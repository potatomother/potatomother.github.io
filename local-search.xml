<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>手写深拷贝</title>
    <link href="/2021/08/20/%E6%89%8B%E5%86%99%E6%B7%B1%E6%8B%B7%E8%B4%9D/"/>
    <url>/2021/08/20/%E6%89%8B%E5%86%99%E6%B7%B1%E6%8B%B7%E8%B4%9D/</url>
    
    <content type="html"><![CDATA[<h1 id="手写深拷贝"><a href="#手写深拷贝" class="headerlink" title="手写深拷贝"></a>手写深拷贝</h1><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-keyword">function</span> deep<span class="hljs-constructor">Copy(<span class="hljs-params">p</span>,<span class="hljs-params">c</span>)</span>&#123;<br>    var c=c <span class="hljs-pattern-match"><span class="hljs-operator">||</span>&#123;&#125; ;</span><br><span class="hljs-pattern-match">    <span class="hljs-keyword">for</span>(var i <span class="hljs-keyword">in</span> p)&#123;</span><br><span class="hljs-pattern-match"><span class="hljs-keyword">if</span>(typeof p[i] <span class="hljs-operator">==</span>= &#x27;<span class="hljs-keyword">object</span>&#x27;)&#123;</span><br><span class="hljs-pattern-match">c[i]=(typeof p[i].constructor <span class="hljs-operator">==</span>= <span class="hljs-constructor">Array</span>)?[]:&#123;&#125;</span><br><span class="hljs-pattern-match">deep<span class="hljs-constructor">Copy(<span class="hljs-params">p</span>[<span class="hljs-params">i</span>],<span class="hljs-params">c</span>[<span class="hljs-params">i</span>])</span></span><br><span class="hljs-pattern-match">&#125;<span class="hljs-keyword">else</span>&#123;</span><br><span class="hljs-pattern-match">c[i]=p[i]</span><br><span class="hljs-pattern-match">&#125;</span><br><span class="hljs-pattern-match">    &#125;</span><br><span class="hljs-pattern-match">return c</span><br><span class="hljs-pattern-match">&#125;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>dfs bfs和快排</title>
    <link href="/2021/08/19/dfs-bfs%E5%92%8C%E5%BF%AB%E6%8E%92/"/>
    <url>/2021/08/19/dfs-bfs%E5%92%8C%E5%BF%AB%E6%8E%92/</url>
    
    <content type="html"><![CDATA[<h1 id="dfs-bfs和快排"><a href="#dfs-bfs和快排" class="headerlink" title="dfs bfs和快排"></a>dfs bfs和快排</h1><h2 id="深度优先和广度优先的测试数据"><a href="#深度优先和广度优先的测试数据" class="headerlink" title="深度优先和广度优先的测试数据"></a>深度优先和广度优先的测试数据</h2><p>//测试数据</p><figure class="highlight xl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xl">var <span class="hljs-keyword">tree</span> = &#123;    <span class="hljs-keyword">name</span>: <span class="hljs-string">&#x27;中国&#x27;</span>,    children: [        &#123;            <span class="hljs-keyword">name</span>: <span class="hljs-string">&#x27;北京&#x27;</span>,            children: [                &#123;                    <span class="hljs-keyword">name</span>: <span class="hljs-string">&#x27;朝阳群众&#x27;</span>,                    children: [                        &#123;                            <span class="hljs-keyword">name</span>: <span class="hljs-string">&#x27;西宁市&#x27;</span>,                            code: <span class="hljs-string">&#x27;0521&#x27;</span>,                        &#125;                    ]                &#125;,                &#123;                    <span class="hljs-keyword">name</span>: <span class="hljs-string">&#x27;海淀区&#x27;</span>,                &#125;,                &#123;                    <span class="hljs-keyword">name</span>: <span class="hljs-string">&#x27;昌平区&#x27;</span>,                &#125;,            ],        &#125;,        &#123;            <span class="hljs-keyword">name</span>: <span class="hljs-string">&#x27;浙江省&#x27;</span>,            children: [                &#123;                    <span class="hljs-keyword">name</span>: <span class="hljs-string">&#x27;杭州市&#x27;</span>,                    code: <span class="hljs-string">&#x27;0571&#x27;</span>,                &#125;,                &#123;                    <span class="hljs-keyword">name</span>: <span class="hljs-string">&#x27;嘉兴市&#x27;</span>,                &#125;,                &#123;                    <span class="hljs-keyword">name</span>: <span class="hljs-string">&#x27;绍兴市&#x27;</span>,                &#125;,                &#123;                    <span class="hljs-keyword">name</span>: <span class="hljs-string">&#x27;宁波市&#x27;</span>,                &#125;,            ],        &#125;,    ], &#125;;<br><br><br></code></pre></td></tr></table></figure><h2 id="dfs深度优先遍历"><a href="#dfs深度优先遍历" class="headerlink" title="dfs深度优先遍历"></a>dfs深度优先遍历</h2><p>//result 记录遍历结果，stack 栈</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs maxima"><span class="hljs-built_in">let</span> result = []<br><br>function dfs(tree) &#123;<br><span class="hljs-built_in">let</span> stack = []<br>stack.<span class="hljs-built_in">push</span>(tree)<br>    <span class="hljs-keyword">while</span>(stack.<span class="hljs-built_in">length</span> != <span class="hljs-number">0</span>)&#123;<br><span class="hljs-built_in">let</span> item =stack.<span class="hljs-built_in">pop</span>()<br>result.<span class="hljs-built_in">push</span>(item.name)<br><span class="hljs-built_in">let</span> children =item.children<br><span class="hljs-keyword">if</span>(children)&#123;<br><span class="hljs-keyword">for</span>( <span class="hljs-built_in">let</span> i=children.<span class="hljs-built_in">length</span>-<span class="hljs-number">1</span> ;i&gt;=<span class="hljs-number">0</span>;i-- )&#123;<br>stack.<span class="hljs-built_in">push</span>(children[i])<br>&#125;// <span class="hljs-keyword">for</span><br>&#125;<br>&#125;<br><span class="hljs-built_in">return</span> result<br>&#125;<br>dfs(tree)<br></code></pre></td></tr></table></figure><h2 id="bfs广搜"><a href="#bfs广搜" class="headerlink" title="bfs广搜"></a>bfs广搜</h2><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs maxima"><span class="hljs-built_in">let</span> result = []<br>function bfs(tree)&#123;<br><span class="hljs-built_in">let</span> duilie=[]<br>duilie.<span class="hljs-built_in">push</span>(tree)<br>result.<span class="hljs-built_in">push</span>(tree.name)<br><span class="hljs-keyword">while</span>(duilie.<span class="hljs-built_in">length</span>)&#123;<br><span class="hljs-built_in">let</span> item = duilie.shift()<br><span class="hljs-built_in">let</span> children=item.children<br><span class="hljs-keyword">if</span>(children)&#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-built_in">let</span> i=<span class="hljs-number">0</span>;i&lt;children.<span class="hljs-built_in">length</span>;i++ )&#123;<br>                duilie.<span class="hljs-built_in">push</span>(children[i])<br>                result.<span class="hljs-built_in">push</span>(children[i].name)<br>&#125;<br>&#125;<br><br>&#125;<br><span class="hljs-built_in">return</span> result<br>&#125;<br>bfs(tree)<br></code></pre></td></tr></table></figure><h2 id="快排"><a href="#快排" class="headerlink" title="快排"></a>快排</h2><figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs coq"><span class="hljs-keyword">let</span> a=[<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">8</span>,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>]<br>function quicksort(<span class="hljs-built_in">left</span>,<span class="hljs-built_in">right</span>)&#123;<br><span class="hljs-keyword">if</span>(<span class="hljs-built_in">left</span>&gt;<span class="hljs-built_in">right</span>)<span class="hljs-keyword">return</span>;<br><br><span class="hljs-keyword">let</span> i=<span class="hljs-built_in">left</span>,j=<span class="hljs-built_in">right</span>,temp=a[<span class="hljs-built_in">left</span>];<br>while(i!=j)&#123;<br>        while(a[j]&gt;=temp &amp;&amp; i&lt;j)<br>            j--;<br>        while(a[i]&lt;=temp &amp;&amp; i&lt;j)<br>            i++;<br>        <span class="hljs-keyword">if</span>(i&lt;j)&#123;<br>            <span class="hljs-keyword">let</span> t=a[i]<br>            a[i]=a[j]<br>            a[j]=t<br>        &#125;<br>&#125;<br>a[<span class="hljs-built_in">left</span>]=a[i]<br>a[i]=temp<br>quicksort(<span class="hljs-built_in">left</span>,i<span class="hljs-number">-1</span>)<br>quicksort(i+<span class="hljs-number">1</span>,<span class="hljs-built_in">right</span>)<br>&#125;<br>quicksort(<span class="hljs-number">0</span>,a.length<span class="hljs-number">-1</span>)<br></code></pre></td></tr></table></figure><p>​    </p>]]></content>
    
    
    
    <tags>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>百变小樱二——代码拆解实现</title>
    <link href="/2021/08/09/%E7%99%BE%E5%8F%98%E5%B0%8F%E6%A8%B1%E4%BA%8C%E2%80%94%E2%80%94%E4%BB%A3%E7%A0%81%E6%8B%86%E8%A7%A3%E5%AE%9E%E7%8E%B0/"/>
    <url>/2021/08/09/%E7%99%BE%E5%8F%98%E5%B0%8F%E6%A8%B1%E4%BA%8C%E2%80%94%E2%80%94%E4%BB%A3%E7%A0%81%E6%8B%86%E8%A7%A3%E5%AE%9E%E7%8E%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="百变小樱二——代码拆解实现"><a href="#百变小樱二——代码拆解实现" class="headerlink" title="百变小樱二——代码拆解实现"></a>百变小樱二——代码拆解实现</h1><h4 id="看我！-点我查看项目演示"><a href="#看我！-点我查看项目演示" class="headerlink" title="看我！~点我查看项目演示"></a><a href="https://potatomother.github.io/MyPage/cardcaptorsakura-gh-pages/">看我！~点我查看项目演示</a></h4><p>先放一张完整的效果图</p><p><img src="1.png" alt="完整效果图"></p><p>接着我们一步一步拆解代码进行实现</p><h2 id="1-读入数据"><a href="#1-读入数据" class="headerlink" title="1.读入数据"></a>1.读入数据</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs javascript">d3.queue() <span class="hljs-comment">//queue队列  defer任务  await执行完成之后调用函数</span><br>    .defer(d3.json,<span class="hljs-string">&quot;../data/ccs_chapter_hierarchy.json&quot;</span>)<br>    .defer(d3.json, <span class="hljs-string">&quot;../data/ccs_chapter_total.json&quot;</span>)<br>    .defer(d3.json,<span class="hljs-string">&quot;../data/ccs_character_per_chapter.json&quot;</span>)<br>    .defer(d3.json,<span class="hljs-string">&quot;../data/ccs_character_per_chapter_cover.json&quot;</span>)<br>    .defer(d3.csv,<span class="hljs-string">&quot;../data/ccs_character_total.csv&quot;</span>)<br>    .defer(d3.csv,<span class="hljs-string">&quot;../data/ccs_character_relations.csv&quot;</span>)<br>    .defer(d3.json,<span class="hljs-string">&quot;../data/ccs_color_distribution.json&quot;</span>)<br>    .await(draw);  <span class="hljs-comment">//执行完成队列里的任务之后执行draw</span><br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">draw</span>(<span class="hljs-params">error,chapter_hierarchy_data,chapter_total_data,character_data,cover_data,character_total_data,relation_data,color_data</span>)</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(character_total_data);<br>&#125;<span class="hljs-comment">//await 调用的函数draw，第一个返回值应该是error</span><br><br></code></pre></td></tr></table></figure><h2 id="2-最内圈的彩色甜甜圈"><a href="#2-最内圈的彩色甜甜圈" class="headerlink" title="2.最内圈的彩色甜甜圈"></a>2.最内圈的彩色甜甜圈</h2><p>先画最内圈的彩色甜甜圈，如下图所示：</p><p><img src="2.png" alt="image-20210809111332415"></p><h3 id="甜甜圈"><a href="#甜甜圈" class="headerlink" title="甜甜圈"></a>甜甜圈</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs javascript">rad_donut_inner = width * <span class="hljs-number">0.122</span>, <span class="hljs-comment">//字符圈的内半径</span><br>      rad_donut_outer = width * <span class="hljs-number">0.13</span>, <span class="hljs-comment">//字符圈的外半径</span><br>      <span class="hljs-comment">//字符圆环图的 Arc 命令</span><br>      <span class="hljs-keyword">var</span> arc = d3.arc() <br>          .outerRadius(rad_donut_outer)<span class="hljs-comment">//外圈大小</span><br>          .innerRadius(rad_donut_inner)<span class="hljs-comment">//内圈大小</span><br>          .padAngle(<span class="hljs-number">0.01</span>) <span class="hljs-comment">//间隔</span><br>          .cornerRadius((rad_donut_outer - rad_donut_inner) / <span class="hljs-number">2</span> * <span class="hljs-number">1</span>)<span class="hljs-comment">//圆角</span><br>      <span class="hljs-comment">//用于计算甜甜圈切片大小的饼图函数</span><br>      <span class="hljs-keyword">var</span> pie = d3.pie()  <br>          .sort(<span class="hljs-literal">null</span>)<br>          .value(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">d</span>) </span>&#123; <span class="hljs-keyword">return</span> d.num_chapters; &#125;);<span class="hljs-comment">//关键字设为角色出现的章节数（num_chapters）</span><br><br>      <span class="hljs-keyword">var</span> arcs = pie(character_total_data);<br>      arcs.forEach(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">d,i</span>) </span>&#123;<br>          d.character = character_total_data[i].character;<br>          d.centerAngle = (d.endAngle - d.startAngle) / <span class="hljs-number">2</span> + d.startAngle;<br>      &#125;);<br><br>      <span class="hljs-comment">//创建每个角色的甜甜圈切片（以及它们出现的章节数）</span><br>      <span class="hljs-keyword">var</span> donut_group = chart.append(<span class="hljs-string">&quot;g&quot;</span>).attr(<span class="hljs-string">&quot;class&quot;</span>, <span class="hljs-string">&quot;donut-group&quot;</span>);<br>      <span class="hljs-keyword">var</span> slice = donut_group.selectAll(<span class="hljs-string">&quot;.arc&quot;</span>)<br>          .data(arcs)<br>          .enter().append(<span class="hljs-string">&quot;path&quot;</span>)<br>          .attr(<span class="hljs-string">&quot;class&quot;</span>, <span class="hljs-string">&quot;arc&quot;</span>)<br>          .attr(<span class="hljs-string">&quot;d&quot;</span>, arc)<br>          .style(<span class="hljs-string">&quot;fill&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">d</span>) </span>&#123; <span class="hljs-keyword">return</span> d.data.color; &#125;);<br></code></pre></td></tr></table></figure><h3 id="名字标签"><a href="#名字标签" class="headerlink" title="名字标签"></a>名字标签</h3><p>然后在这个基础上增加姓名标签，姓名标签分两部分：大写的名字和小写的姓。这里是增加的同学标签</p><p><img src="3.png" alt="image-20210809115907973"></p><p>代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> hover_circle_group = chart.append(<span class="hljs-string">&quot;g&quot;</span>).attr(<span class="hljs-string">&quot;class&quot;</span>, <span class="hljs-string">&quot;hover-circle-group&quot;</span>);<br><span class="hljs-keyword">var</span> name_group = chart.append(<span class="hljs-string">&quot;g&quot;</span>).attr(<span class="hljs-string">&quot;class&quot;</span>, <span class="hljs-string">&quot;name-group&quot;</span>);<br><br><span class="hljs-comment">//为每个角色创建一个组</span><br><span class="hljs-keyword">var</span> names = name_group.selectAll(<span class="hljs-string">&quot;.name&quot;</span>)<br>    .data(arcs)<br>    .enter().append(<span class="hljs-string">&quot;g&quot;</span>)<br>    .attr(<span class="hljs-string">&quot;class&quot;</span>, <span class="hljs-string">&quot;name&quot;</span>)<br>    .style(<span class="hljs-string">&quot;text-anchor&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">d</span>) </span>&#123; <span class="hljs-keyword">return</span> d.centerAngle &gt; <span class="hljs-number">0</span> &amp; d.centerAngle &lt; <span class="hljs-built_in">Math</span>.PI ? <span class="hljs-string">&quot;start&quot;</span> : <span class="hljs-string">&quot;end&quot;</span>;; &#125;)<br>    .style(<span class="hljs-string">&quot;font-family&quot;</span>, <span class="hljs-string">&quot;Anime Ace&quot;</span>)<br><br><span class="hljs-comment">//添加一个大的 &quot;main&quot; 名字</span><br>names.append(<span class="hljs-string">&quot;text&quot;</span>)<br>    .attr(<span class="hljs-string">&quot;class&quot;</span>, <span class="hljs-string">&quot;name-label&quot;</span>)<br>    .attr(<span class="hljs-string">&quot;id&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">d, i</span>) </span>&#123; <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;name-label-&quot;</span> + i; &#125;)<br>    .attr(<span class="hljs-string">&quot;dy&quot;</span>, <span class="hljs-string">&quot;.35em&quot;</span>)<br>    .attr(<span class="hljs-string">&quot;transform&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">d, i</span>) </span>&#123;<br>        <span class="hljs-comment">//If there is a last name, move the first a bit upward</span><br>        <span class="hljs-keyword">if</span>(character_total_data[i].last_name !== <span class="hljs-string">&quot;&quot;</span>) &#123;<br>            <span class="hljs-keyword">var</span> finalAngle = d.centerAngle + (d.centerAngle &gt; <span class="hljs-number">0</span> &amp; d.centerAngle &lt; <span class="hljs-built_in">Math</span>.PI ? -<span class="hljs-number">0.02</span> : <span class="hljs-number">0.02</span>);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">var</span> finalAngle = d.centerAngle;<br>        &#125;<span class="hljs-comment">//else</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;rotate(&quot;</span> + (finalAngle * <span class="hljs-number">180</span> / <span class="hljs-built_in">Math</span>.PI - <span class="hljs-number">90</span>) + <span class="hljs-string">&quot;)&quot;</span><br>            + <span class="hljs-string">&quot;translate(&quot;</span> + rad_name + <span class="hljs-string">&quot;)&quot;</span><br>            + (finalAngle &gt; <span class="hljs-number">0</span> &amp; finalAngle &lt; <span class="hljs-built_in">Math</span>.PI ? <span class="hljs-string">&quot;&quot;</span> : <span class="hljs-string">&quot;rotate(180)&quot;</span>);<br>    &#125;)<br>    .style(<span class="hljs-string">&quot;font-size&quot;</span>, (<span class="hljs-number">12</span>*size_factor)+<span class="hljs-string">&quot;px&quot;</span>)<br>    .text(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">d, i</span>) </span>&#123; <span class="hljs-keyword">return</span> character_total_data[i].first_name; &#125;);<br><br><span class="hljs-comment">//在后面添加一个小的姓氏</span><br>names.append(<span class="hljs-string">&quot;text&quot;</span>)<br>    .attr(<span class="hljs-string">&quot;class&quot;</span>, <span class="hljs-string">&quot;last-name-label&quot;</span>)<br>    .attr(<span class="hljs-string">&quot;id&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">d, i</span>) </span>&#123; <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;last-name-label-&quot;</span> + i; &#125;)<br>    .attr(<span class="hljs-string">&quot;dy&quot;</span>, <span class="hljs-string">&quot;.35em&quot;</span>)<br>    .a ttr(<span class="hljs-string">&quot;transform&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">d, i</span>) </span>&#123;<br>        <span class="hljs-comment">//If there is a last name, move the last a bit downward</span><br>        <span class="hljs-keyword">if</span>(character_total_data[i].last_name !== <span class="hljs-string">&quot;&quot;</span>) &#123;<br>            <span class="hljs-keyword">var</span> finalAngle = d.centerAngle + (d.centerAngle &gt; <span class="hljs-number">0</span> &amp; d.centerAngle &lt; <span class="hljs-built_in">Math</span>.PI ? <span class="hljs-number">0.03</span> : -<span class="hljs-number">0.03</span>);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">var</span> finalAngle = d.centerAngle;<br>        &#125;<span class="hljs-comment">//else</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;rotate(&quot;</span> + (finalAngle * <span class="hljs-number">180</span> / <span class="hljs-built_in">Math</span>.PI - <span class="hljs-number">90</span>) + <span class="hljs-string">&quot;)&quot;</span><br>            + <span class="hljs-string">&quot;translate(&quot;</span> + rad_name + <span class="hljs-string">&quot;)&quot;</span><br>            + (finalAngle &gt; <span class="hljs-number">0</span> &amp; finalAngle &lt; <span class="hljs-built_in">Math</span>.PI ? <span class="hljs-string">&quot;&quot;</span> : <span class="hljs-string">&quot;rotate(180)&quot;</span>);<br>    &#125;)<br>    .style(<span class="hljs-string">&quot;font-size&quot;</span>, (<span class="hljs-number">9</span>*size_factor)+<span class="hljs-string">&quot;px&quot;</span>)<br>    .text(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">d, i</span>) </span>&#123; <span class="hljs-keyword">return</span> character_total_data[i].last_name; &#125;);<br><br><span class="hljs-comment">//增加一行 添加一个classmate</span><br>names.filter(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">d,i</span>) </span>&#123; <span class="hljs-keyword">return</span> i === arcs.length - <span class="hljs-number">1</span>; &#125;)<br>    .append(<span class="hljs-string">&quot;text&quot;</span>)<br>    .attr(<span class="hljs-string">&quot;class&quot;</span>, <span class="hljs-string">&quot;last-name-label&quot;</span>)<br>    .attr(<span class="hljs-string">&quot;dy&quot;</span>, <span class="hljs-string">&quot;.35em&quot;</span>)<br>    .attr(<span class="hljs-string">&quot;y&quot;</span>, <span class="hljs-string">&quot;1.35em&quot;</span>)<br>    .attr(<span class="hljs-string">&quot;transform&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">d, i</span>) </span>&#123;<br>        <span class="hljs-keyword">var</span> finalAngle = (d.endAngle - d.startAngle) / <span class="hljs-number">2</span> + d.startAngle - <span class="hljs-number">0.03</span>;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;rotate(&quot;</span> + (finalAngle * <span class="hljs-number">180</span> / <span class="hljs-built_in">Math</span>.PI - <span class="hljs-number">90</span>) + <span class="hljs-string">&quot;)&quot;</span><br>            + <span class="hljs-string">&quot;translate(&quot;</span> + rad_name + <span class="hljs-string">&quot;)rotate(180)&quot;</span>;<br>    &#125;)<br>    .style(<span class="hljs-string">&quot;font-size&quot;</span>, (<span class="hljs-number">9</span>*size_factor)+<span class="hljs-string">&quot;px&quot;</span>)<br>    .text(<span class="hljs-string">&quot;Rika, Yamazaki&quot;</span>);<br><br><br></code></pre></td></tr></table></figure><h3 id="名字外侧的点"><a href="#名字外侧的点" class="headerlink" title="名字外侧的点"></a>名字外侧的点</h3><p>加上名字后面的点，方便后面做交互：</p><p><img src="4.png" alt="image-20210809140130447"></p><p>代码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">///////////////////////////////////////////////////////////////////////////</span><br>      <span class="hljs-comment">///////////////////////////// 创建名字后面的点 ////////////////////////////</span><br>      <span class="hljs-comment">///////////////////////////////////////////////////////////////////////////</span><br><br>      <span class="hljs-keyword">var</span> characterByName = [];<br>      <span class="hljs-comment">//名字后面的点的颜色可以是类型</span><br>      character_total_data.forEach(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">d, i</span>) </span>&#123;<br>          <span class="hljs-keyword">var</span> text_width_first = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&#x27;name-label-&#x27;</span> + i).getComputedTextLength();<br>          <span class="hljs-keyword">var</span> text_width_last = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&#x27;last-name-label-&#x27;</span> + i).getComputedTextLength();<br>          d.dot_name_rad = rad_name + <span class="hljs-built_in">Math</span>.max(text_width_first,text_width_last) + <span class="hljs-number">10</span>;<br>          d.name_angle = (arcs[i].endAngle - arcs[i].startAngle) / <span class="hljs-number">2</span> + arcs[i].startAngle;<br><br>          characterByName[d.character] = d;<br>      &#125;)<span class="hljs-comment">//forEach</span><br><br>      <span class="hljs-comment">//在每个字符的每个名称的末尾添加一个圆圈</span><br>      <span class="hljs-keyword">var</span> name_dot_group = chart.append(<span class="hljs-string">&quot;g&quot;</span>).attr(<span class="hljs-string">&quot;class&quot;</span>, <span class="hljs-string">&quot;name-dot-group&quot;</span>);<br>      <span class="hljs-keyword">var</span> name_dot = name_dot_group.selectAll(<span class="hljs-string">&quot;.type-dot&quot;</span>)<br>          .data(character_total_data)<br>          .enter().append(<span class="hljs-string">&quot;circle&quot;</span>)<br>          .attr(<span class="hljs-string">&quot;class&quot;</span>, <span class="hljs-string">&quot;type-dot&quot;</span>)<br>          .attr(<span class="hljs-string">&quot;cx&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">d</span>) </span>&#123; <span class="hljs-keyword">return</span> d.dot_name_rad * <span class="hljs-built_in">Math</span>.cos(d.name_angle - pi1_2); &#125;)<br>          .attr(<span class="hljs-string">&quot;cy&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">d</span>) </span>&#123; <span class="hljs-keyword">return</span> d.dot_name_rad * <span class="hljs-built_in">Math</span>.sin(d.name_angle - pi1_2); &#125;)<br>          .attr(<span class="hljs-string">&quot;r&quot;</span>, <span class="hljs-number">6</span> * size_factor)<br>          .style(<span class="hljs-string">&quot;fill&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">d</span>) </span>&#123; <span class="hljs-keyword">return</span> d.color; &#125;)<br>          .style(<span class="hljs-string">&quot;stroke&quot;</span>, <span class="hljs-string">&quot;white&quot;</span>)<br>          .style(<span class="hljs-string">&quot;stroke-width&quot;</span>, <span class="hljs-number">3</span> * size_factor);<br></code></pre></td></tr></table></figure><h3 id="人物关系线条"><a href="#人物关系线条" class="headerlink" title="人物关系线条"></a>人物关系线条</h3><p>之后是增加甜甜圈内部的关系，线条代表了不同人物之间存在的关系</p><p><img src="5.png" alt="image-20210809140511572"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">///////////////////////////////////////////////////////////////////////////</span><br>   <span class="hljs-comment">////////////////////////// 创建内部关系 /////////////////////////</span><br>   <span class="hljs-comment">///////////////////////////////////////////////////////////////////////////</span><br><br>   <span class="hljs-keyword">var</span> pull_scale = d3.scaleLinear()<br>       .domain([<span class="hljs-number">2</span> * rad_relation, <span class="hljs-number">0</span>])<br>       .range([<span class="hljs-number">0.7</span>, <span class="hljs-number">2.3</span>]);<br>   <span class="hljs-keyword">var</span> color_relation = d3.scaleOrdinal()<br>       .domain([<span class="hljs-string">&quot;family&quot;</span>, <span class="hljs-string">&quot;crush&quot;</span>, <span class="hljs-string">&quot;love&quot;</span>, <span class="hljs-string">&quot;friends&quot;</span>, <span class="hljs-string">&quot;master&quot;</span>]) <span class="hljs-comment">//&quot;teacher&quot;,&quot;ex-lovers&quot;,&quot;reincarnation&quot;,&quot;rival&quot;</span><br>       .range([<span class="hljs-string">&quot;#2C9AC6&quot;</span>, <span class="hljs-string">&quot;#FA88A8&quot;</span>, <span class="hljs-string">&quot;#E01A25&quot;</span>, <span class="hljs-string">&quot;#7EB852&quot;</span>, <span class="hljs-string">&quot;#F6B42B&quot;</span>])<br>       .unknown(<span class="hljs-string">&quot;#bbbbbb&quot;</span>);<br>   <span class="hljs-keyword">var</span> stroke_relation = d3.scaleOrdinal()<br>       .domain([<span class="hljs-string">&quot;family&quot;</span>, <span class="hljs-string">&quot;crush&quot;</span>, <span class="hljs-string">&quot;love&quot;</span>, <span class="hljs-string">&quot;friends&quot;</span>, <span class="hljs-string">&quot;master&quot;</span>]) <span class="hljs-comment">//&quot;teacher&quot;,&quot;ex-lovers&quot;,&quot;reincarnation&quot;,&quot;rival&quot;</span><br>       .range([<span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">8</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>])<br>       .unknown(<span class="hljs-number">3</span>);<br><br>   <span class="hljs-keyword">var</span> relation_group = chart.append(<span class="hljs-string">&quot;g&quot;</span>).attr(<span class="hljs-string">&quot;class&quot;</span>, <span class="hljs-string">&quot;relation-group&quot;</span>);<br><br>   <span class="hljs-comment">//在具有关系的人物之间创建area</span><br>   <span class="hljs-keyword">var</span> relation_lines = relation_group.selectAll(<span class="hljs-string">&quot;.relation-path&quot;</span>)<br>       .data(relation_data)<br>       .enter().append(<span class="hljs-string">&quot;path&quot;</span>)<br>       .attr(<span class="hljs-string">&quot;class&quot;</span>, <span class="hljs-string">&quot;relation-path&quot;</span>)<br>       .style(<span class="hljs-string">&quot;fill&quot;</span>, <span class="hljs-string">&quot;none&quot;</span>)<br>       .style(<span class="hljs-string">&quot;stroke&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">d</span>) </span>&#123; <span class="hljs-keyword">return</span> color_relation(d.type); &#125;)<br>       .style(<span class="hljs-string">&quot;stroke-width&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">d</span>) </span>&#123; <span class="hljs-keyword">return</span> stroke_relation(d.type) * size_factor; &#125;)<br>       .style(<span class="hljs-string">&quot;stroke-linecap&quot;</span>, <span class="hljs-string">&quot;round&quot;</span>)<br>       .style(<span class="hljs-string">&quot;mix-blend-mode&quot;</span>, <span class="hljs-string">&quot;multiply&quot;</span>)<br>       .style(<span class="hljs-string">&quot;opacity&quot;</span>, <span class="hljs-number">0.7</span>)<br>       .attr(<span class="hljs-string">&quot;d&quot;</span>, create_relation_lines);<br><br>   <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">create_relation_lines</span>(<span class="hljs-params">d</span>) </span>&#123;<br>       <span class="hljs-keyword">var</span> source_a = characterByName[d.source].name_angle,<br>           target_a = characterByName[d.target].name_angle;<br>       <span class="hljs-keyword">var</span> x1 = rad_relation * <span class="hljs-built_in">Math</span>.cos(source_a - pi1_2),<br>           y1 = rad_relation * <span class="hljs-built_in">Math</span>.sin(source_a - pi1_2),<br>           x2 = rad_relation * <span class="hljs-built_in">Math</span>.cos(target_a - pi1_2),<br>           y2 = rad_relation * <span class="hljs-built_in">Math</span>.sin(target_a - pi1_2);<br>       <span class="hljs-keyword">var</span> dx = x2 - x1,<br>           dy = y2 - y1,<br>           dr = <span class="hljs-built_in">Math</span>.sqrt(dx * dx + dy * dy);<br>       <span class="hljs-keyword">var</span> curve = dr * <span class="hljs-number">1</span> / pull_scale(dr);<br><br>       <span class="hljs-comment">//获得角度来确定最佳扫描标志</span><br>       <span class="hljs-keyword">var</span> delta_angle = (target_a - source_a) / <span class="hljs-built_in">Math</span>.PI;<br>       <span class="hljs-keyword">var</span> sweep_flag = <span class="hljs-number">0</span>;<br>       <span class="hljs-keyword">if</span> ((delta_angle &gt; -<span class="hljs-number">1</span> &amp;&amp; delta_angle &lt;= <span class="hljs-number">0</span>) || (delta_angle &gt; <span class="hljs-number">1</span> &amp;&amp; delta_angle &lt;= <span class="hljs-number">2</span>))<br>           sweep_flag = <span class="hljs-number">1</span>;<br><br>       <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;M&quot;</span> + x1 + <span class="hljs-string">&quot;,&quot;</span> + y1 + <span class="hljs-string">&quot; A&quot;</span> + curve + <span class="hljs-string">&quot;,&quot;</span> + curve + <span class="hljs-string">&quot; 0 0 &quot;</span> + sweep_flag + <span class="hljs-string">&quot; &quot;</span> + x2 + <span class="hljs-string">&quot;,&quot;</span> + y2;<br>   &#125;<span class="hljs-comment">//function create_relation_lines</span><br></code></pre></td></tr></table></figure><h2 id="3-章节"><a href="#3-章节" class="headerlink" title="3.章节"></a>3.章节</h2><h3 id="章节编号"><a href="#章节编号" class="headerlink" title="章节编号"></a>章节编号</h3><p><img src="8.png" alt="image-20210809171817442"></p><p>代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">///////////////////////////////////////////////////////////////////////////</span><br><span class="hljs-comment">///////////////////////// 创建章节甜甜圈图 //////////////////////</span><br><span class="hljs-comment">///////////////////////////////////////////////////////////////////////////</span><br><br><span class="hljs-comment">//按正确的顺序去创建一个group</span><br><span class="hljs-keyword">var</span> chapter_group = chart.append(<span class="hljs-string">&quot;g&quot;</span>).attr(<span class="hljs-string">&quot;class&quot;</span>, <span class="hljs-string">&quot;chapter-group&quot;</span>);<br><span class="hljs-keyword">var</span> donut_chapter_group = chapter_group.append(<span class="hljs-string">&quot;g&quot;</span>).attr(<span class="hljs-string">&quot;class&quot;</span>, <span class="hljs-string">&quot;donut-chapter-group&quot;</span>);<br><span class="hljs-keyword">var</span> chapter_dot_group = chapter_group.append(<span class="hljs-string">&quot;g&quot;</span>).attr(<span class="hljs-string">&quot;class&quot;</span>, <span class="hljs-string">&quot;chapter-dot-group&quot;</span>);<br><span class="hljs-keyword">var</span> donut_chapter_hover_group = chapter_group.append(<span class="hljs-string">&quot;g&quot;</span>).attr(<span class="hljs-string">&quot;class&quot;</span>, <span class="hljs-string">&quot;donut-chapter_hover-group&quot;</span>);<br><span class="hljs-keyword">var</span> chapter_num_group = chapter_group.append(<span class="hljs-string">&quot;g&quot;</span>).attr(<span class="hljs-string">&quot;class&quot;</span>, <span class="hljs-string">&quot;chapter-number-group&quot;</span>);<br><br><span class="hljs-comment">//通过arc 命令得到章节号码甜甜圈</span><br><span class="hljs-keyword">var</span> arc_chapter = d3.arc()<br>    .outerRadius(rad_chapter_donut_outer)<br>    .innerRadius(rad_chapter_donut_inner)<br>    .padAngle(<span class="hljs-number">0.01</span>)<br>    .cornerRadius((rad_chapter_donut_outer - rad_chapter_donut_inner) / <span class="hljs-number">2</span>)<br><br><span class="hljs-comment">//创建每个字符的甜甜圈切片（以及它们出现在的章节数）</span><br><span class="hljs-keyword">var</span> chapter_slice = donut_chapter_group.selectAll(<span class="hljs-string">&quot;.arc&quot;</span>)<br>    .data(chapter_location_data)<br>    .enter().append(<span class="hljs-string">&quot;path&quot;</span>)<br>    .attr(<span class="hljs-string">&quot;class&quot;</span>, <span class="hljs-string">&quot;arc&quot;</span>)<br>    .attr(<span class="hljs-string">&quot;d&quot;</span>, arc_chapter)<br>    .style(<span class="hljs-string">&quot;fill&quot;</span>, <span class="hljs-string">&quot;none&quot;</span>)<br>    .style(<span class="hljs-string">&quot;stroke&quot;</span>, <span class="hljs-string">&quot;#c4c4c4&quot;</span>)<br>    .style(<span class="hljs-string">&quot;stroke-width&quot;</span>, <span class="hljs-number">1</span> * size_factor);<br><span class="hljs-comment">//创建每个字符的甜甜圈切片的遮罩（以及它们出现在的章节数）</span><br><span class="hljs-keyword">var</span> chapter_hover_slice = donut_chapter_hover_group.selectAll(<span class="hljs-string">&quot;.arc&quot;</span>)<br>    .data(chapter_location_data)<br>    .enter().append(<span class="hljs-string">&quot;path&quot;</span>)<br>    .attr(<span class="hljs-string">&quot;class&quot;</span>, <span class="hljs-string">&quot;arc&quot;</span>)<br>    .attr(<span class="hljs-string">&quot;d&quot;</span>, arc_chapter)<br>    .style(<span class="hljs-string">&quot;fill&quot;</span>, <span class="hljs-string">&quot;none&quot;</span>)<br>    .style(<span class="hljs-string">&quot;stroke&quot;</span>, <span class="hljs-string">&quot;none&quot;</span>)<br>    .style(<span class="hljs-string">&quot;stroke-width&quot;</span>, <span class="hljs-number">1.5</span> * size_factor);<br><br><span class="hljs-comment">//T文本位于每个甜甜圈切片的中心</span><br><span class="hljs-keyword">var</span> rad_chapter_donut_half = ((rad_chapter_donut_outer - rad_chapter_donut_inner) / <span class="hljs-number">2</span> + rad_chapter_donut_inner);<br><br><span class="hljs-comment">//添加章节号文本</span><br><span class="hljs-keyword">var</span> chapter_number = chapter_num_group.selectAll(<span class="hljs-string">&quot;.chapter-number&quot;</span>)<br>    .data(chapter_location_data)<br>    .enter().append(<span class="hljs-string">&quot;text&quot;</span>)<br>    .attr(<span class="hljs-string">&quot;class&quot;</span>, <span class="hljs-string">&quot;chapter-number&quot;</span>)<br>    .style(<span class="hljs-string">&quot;text-anchor&quot;</span>, <span class="hljs-string">&quot;middle&quot;</span>)<br>    .attr(<span class="hljs-string">&quot;dy&quot;</span>, <span class="hljs-string">&quot;.35em&quot;</span>)<br>    .attr(<span class="hljs-string">&quot;transform&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">d, i</span>) </span>&#123;<br>        <span class="hljs-keyword">var</span> angle = d.centerAngle * <span class="hljs-number">180</span> / <span class="hljs-built_in">Math</span>.PI - <span class="hljs-number">90</span>;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;rotate(&quot;</span> + angle + <span class="hljs-string">&quot;)translate(&quot;</span> + rad_chapter_donut_half + <span class="hljs-string">&quot;)&quot;</span> +<br>            <span class="hljs-comment">// (d.centerAngle &gt; 0 &amp; d.centerAngle &lt; Math.PI ? &quot;&quot; : &quot;rotate(180)&quot;)</span><br>            <span class="hljs-string">&quot;rotate(&quot;</span> + -angle + <span class="hljs-string">&quot;)&quot;</span>;<br>    &#125;)<br>    .style(<span class="hljs-string">&quot;font-size&quot;</span>, (<span class="hljs-number">9</span>*size_factor) + <span class="hljs-string">&quot;px&quot;</span>)<br>    .text(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">d, i</span>) </span>&#123; <span class="hljs-keyword">return</span> i + <span class="hljs-number">1</span>; &#125;);<br><br><span class="hljs-comment">//在每章切片的内部添加一个圆圈</span><br><span class="hljs-keyword">var</span> chapter_dot_rad = <span class="hljs-number">3.5</span> * size_factor;<br><span class="hljs-keyword">var</span> chapter_dot = chapter_dot_group.selectAll(<span class="hljs-string">&quot;.chapter-dot&quot;</span>)<br>    .data(chapter_location_data)<br>    .enter().append(<span class="hljs-string">&quot;circle&quot;</span>)<br>    .attr(<span class="hljs-string">&quot;class&quot;</span>, <span class="hljs-string">&quot;chapter-dot&quot;</span>)<br>    .attr(<span class="hljs-string">&quot;cx&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">d</span>) </span>&#123; <span class="hljs-keyword">return</span> rad_dot_color * <span class="hljs-built_in">Math</span>.cos(d.centerAngle - pi1_2); &#125;)<br>    .attr(<span class="hljs-string">&quot;cy&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">d</span>) </span>&#123; <span class="hljs-keyword">return</span> rad_dot_color * <span class="hljs-built_in">Math</span>.sin(d.centerAngle - pi1_2); &#125;)<br>    .attr(<span class="hljs-string">&quot;r&quot;</span>, chapter_dot_rad)<br>    .style(<span class="hljs-string">&quot;fill&quot;</span>, <span class="hljs-string">&quot;#c4c4c4&quot;</span>)<br>    .style(<span class="hljs-string">&quot;stroke&quot;</span>, <span class="hljs-string">&quot;white&quot;</span>)<br>    .style(<span class="hljs-string">&quot;stroke-width&quot;</span>, chapter_dot_rad * <span class="hljs-number">0.5</span>);<br><br></code></pre></td></tr></table></figure><h3 id="章节点点"><a href="#章节点点" class="headerlink" title="章节点点"></a>章节点点</h3><p><img src="9.png" alt="image-20210809172648323"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">///////////////////////////////////////////////////////////////////////////</span><br><span class="hljs-comment">///////////////////////// 创建体积虚线 ///////////////////////</span><br><span class="hljs-comment">///////////////////////////////////////////////////////////////////////////</span><br><br><span class="hljs-comment">//按顺序创建group</span><br><span class="hljs-keyword">var</span> donut_volume_group = chart.append(<span class="hljs-string">&quot;g&quot;</span>).attr(<span class="hljs-string">&quot;class&quot;</span>, <span class="hljs-string">&quot;donut-volume-group&quot;</span>);<br><br><span class="hljs-comment">//创建 arcs 数据</span><br><span class="hljs-keyword">var</span> volume_data = [<br>    &#123; <span class="hljs-attr">volume</span>: <span class="hljs-number">1</span>, <span class="hljs-attr">num_chapters</span>: <span class="hljs-number">5</span>, <span class="hljs-attr">chapter_start</span>: <span class="hljs-number">1</span>, <span class="hljs-attr">chapter_end</span>: <span class="hljs-number">5</span> &#125;,<br>    &#123; <span class="hljs-attr">volume</span>: <span class="hljs-number">2</span>, <span class="hljs-attr">num_chapters</span>: <span class="hljs-number">5</span>, <span class="hljs-attr">chapter_start</span>: <span class="hljs-number">6</span>, <span class="hljs-attr">chapter_end</span>: <span class="hljs-number">10</span> &#125;,<br>    &#123; <span class="hljs-attr">volume</span>: <span class="hljs-number">4</span>, <span class="hljs-attr">num_chapters</span>: <span class="hljs-number">4</span>, <span class="hljs-attr">chapter_start</span>: <span class="hljs-number">11</span>, <span class="hljs-attr">chapter_end</span>: <span class="hljs-number">14</span> &#125;,<br>    &#123; <span class="hljs-attr">volume</span>: <span class="hljs-number">3</span>, <span class="hljs-attr">num_chapters</span>: <span class="hljs-number">4</span>, <span class="hljs-attr">chapter_start</span>: <span class="hljs-number">15</span>, <span class="hljs-attr">chapter_end</span>: <span class="hljs-number">18</span> &#125;,<br>    &#123; <span class="hljs-attr">volume</span>: <span class="hljs-number">5</span>, <span class="hljs-attr">num_chapters</span>: <span class="hljs-number">4</span>, <span class="hljs-attr">chapter_start</span>: <span class="hljs-number">19</span>, <span class="hljs-attr">chapter_end</span>: <span class="hljs-number">22</span> &#125;,<br>    &#123; <span class="hljs-attr">volume</span>: <span class="hljs-number">6</span>, <span class="hljs-attr">num_chapters</span>: <span class="hljs-number">4</span>, <span class="hljs-attr">chapter_start</span>: <span class="hljs-number">23</span>, <span class="hljs-attr">chapter_end</span>: <span class="hljs-number">26</span> &#125;,<br>    &#123; <span class="hljs-attr">volume</span>: <span class="hljs-number">7</span>, <span class="hljs-attr">num_chapters</span>: <span class="hljs-number">4</span>, <span class="hljs-attr">chapter_start</span>: <span class="hljs-number">27</span>, <span class="hljs-attr">chapter_end</span>: <span class="hljs-number">30</span> &#125;,<br>    &#123; <span class="hljs-attr">volume</span>: <span class="hljs-number">8</span>, <span class="hljs-attr">num_chapters</span>: <span class="hljs-number">4</span>, <span class="hljs-attr">chapter_start</span>: <span class="hljs-number">31</span>, <span class="hljs-attr">chapter_end</span>: <span class="hljs-number">34</span> &#125;,<br>    &#123; <span class="hljs-attr">volume</span>: <span class="hljs-number">9</span>, <span class="hljs-attr">num_chapters</span>: <span class="hljs-number">4</span>, <span class="hljs-attr">chapter_start</span>: <span class="hljs-number">35</span>, <span class="hljs-attr">chapter_end</span>: <span class="hljs-number">38</span> &#125;,<br>    &#123; <span class="hljs-attr">volume</span>: <span class="hljs-number">10</span>, <span class="hljs-attr">num_chapters</span>: <span class="hljs-number">4</span>, <span class="hljs-attr">chapter_start</span>: <span class="hljs-number">39</span>, <span class="hljs-attr">chapter_end</span>: <span class="hljs-number">42</span> &#125;,<br>    &#123; <span class="hljs-attr">volume</span>: <span class="hljs-number">11</span>, <span class="hljs-attr">num_chapters</span>: <span class="hljs-number">3</span>, <span class="hljs-attr">chapter_start</span>: <span class="hljs-number">43</span>, <span class="hljs-attr">chapter_end</span>: <span class="hljs-number">45</span> &#125;,<br>    &#123; <span class="hljs-attr">volume</span>: <span class="hljs-number">12</span>, <span class="hljs-attr">num_chapters</span>: <span class="hljs-number">5</span>, <span class="hljs-attr">chapter_start</span>: <span class="hljs-number">46</span>, <span class="hljs-attr">chapter_end</span>: <span class="hljs-number">50</span> &#125;<br>];<br>volume_data = volume_data.filter(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">d</span>) </span>&#123; <span class="hljs-keyword">return</span> d.volume &lt;= num_volume; &#125;);<br><span class="hljs-comment">//指出开始和结束的角度</span><br>volume_data.forEach(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">d, i</span>) </span>&#123;<br>    d.startAngle = chapter_location_data[d.chapter_start - <span class="hljs-number">1</span>].startAngle,<br>        d.endAngle = chapter_location_data[d.chapter_end - <span class="hljs-number">1</span>].endAngle;<br>    d.centerAngle = (d.endAngle - d.startAngle) / <span class="hljs-number">2</span> + d.startAngle;<br>&#125;);<br><br><span class="hljs-keyword">var</span> volume_slice = donut_volume_group.selectAll(<span class="hljs-string">&quot;.volume-arc&quot;</span>)<br>    .data(volume_data)<br>    .enter().append(<span class="hljs-string">&quot;path&quot;</span>)<br>    .attr(<span class="hljs-string">&quot;class&quot;</span>, <span class="hljs-string">&quot;volume-arc&quot;</span>)<br>    .style(<span class="hljs-string">&quot;stroke&quot;</span>, <span class="hljs-string">&quot;#c4c4c4&quot;</span>)<br>    .style(<span class="hljs-string">&quot;stroke&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">d,i</span>) </span>&#123; <span class="hljs-keyword">return</span> d.volume &lt;= <span class="hljs-number">6</span> ? color_kero : color_sakura; &#125;)<br>    .style(<span class="hljs-string">&quot;stroke-width&quot;</span>, <span class="hljs-number">3</span> * size_factor)<br>    .style(<span class="hljs-string">&quot;stroke-dasharray&quot;</span>, <span class="hljs-string">&quot;0,&quot;</span> + (<span class="hljs-number">7</span> * size_factor))<br>    .attr(<span class="hljs-string">&quot;d&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">d,i</span>) </span>&#123;<br>        <span class="hljs-keyword">var</span> rad = rad_volume_inner,<br>            xs = rad * <span class="hljs-built_in">Math</span>.cos(d.startAngle - pi1_2),<br>            ys = rad * <span class="hljs-built_in">Math</span>.sin(d.startAngle - pi1_2),<br>            xt = rad * <span class="hljs-built_in">Math</span>.cos(d.endAngle - pi1_2),<br>            yt = rad * <span class="hljs-built_in">Math</span>.sin(d.endAngle - pi1_2)<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;M&quot;</span> + xs + <span class="hljs-string">&quot;,&quot;</span> + ys + <span class="hljs-string">&quot; A&quot;</span> + rad + <span class="hljs-string">&quot;,&quot;</span> + rad + <span class="hljs-string">&quot; 0 0 1 &quot;</span> + xt + <span class="hljs-string">&quot;,&quot;</span> + yt;<br>    &#125;);<br><br><br></code></pre></td></tr></table></figure><h2 id="4-人物和章节的关系线"><a href="#4-人物和章节的关系线" class="headerlink" title="4.人物和章节的关系线"></a>4.人物和章节的关系线</h2><h3 id="关系线"><a href="#关系线" class="headerlink" title="关系线"></a>关系线</h3><p><img src="11.png" alt="image-20210809180255662"></p><p>代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">///////////////////////////////////////////////////////////////////////////</span><br><span class="hljs-comment">//////////////////// 创建人物和章节之间的关系线 /////////////////////</span><br><span class="hljs-comment">///////////////////////////////////////////////////////////////////////////</span><br><br><span class="hljs-comment">//线函数，使用canvas将线条从人物连接到章节</span><br><span class="hljs-keyword">var</span> line = d3.lineRadial()<br>    .angle(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">d</span>) </span>&#123; <span class="hljs-keyword">return</span> d.angle; &#125;)<br>    .radius(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">d</span>) </span>&#123; <span class="hljs-keyword">return</span> d.radius; &#125;)<br>    .curve(d3.curveBasis)<br>    .context(ctx);<br><br><span class="hljs-comment">//为封面绘制线条</span><br>ctx.globalAlpha = cover_alpha;<br>create_lines(<span class="hljs-string">&quot;character&quot;</span>, cover_data);<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">create_lines</span>(<span class="hljs-params">type, data</span>) </span>&#123;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; data.length; i++) &#123;<br>        d = data[i];<br>        <span class="hljs-keyword">var</span> line_data = [];<br><br>        <span class="hljs-keyword">var</span> source_a = characterByName[d.character].name_angle,<br>            source_r = characterByName[d.character].dot_name_rad<br>        <span class="hljs-keyword">var</span> target_a = chapter_location_data[d.chapter - <span class="hljs-number">1</span>].centerAngle,<br>            target_r = rad_dot_color;<br><br>        <span class="hljs-comment">//找出一些变量来决定要创建的路径</span><br>        <span class="hljs-keyword">if</span> (target_a - source_a &lt; -<span class="hljs-built_in">Math</span>.PI) &#123;<br>            <span class="hljs-keyword">var</span> side = <span class="hljs-string">&quot;cw&quot;</span>;<br>            <span class="hljs-keyword">var</span> da = <span class="hljs-number">2</span> + (target_a - source_a) / <span class="hljs-built_in">Math</span>.PI;<br>            <span class="hljs-keyword">var</span> angle_sign = <span class="hljs-number">1</span>;<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (target_a - source_a &lt; <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">var</span> side = <span class="hljs-string">&quot;ccw&quot;</span>;<br>            <span class="hljs-keyword">var</span> da = (source_a - target_a) / <span class="hljs-built_in">Math</span>.PI;<br>            <span class="hljs-keyword">var</span> angle_sign = -<span class="hljs-number">1</span>;<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (target_a - source_a &lt; <span class="hljs-built_in">Math</span>.PI) &#123;<br>            <span class="hljs-keyword">var</span> side = <span class="hljs-string">&quot;cw&quot;</span>;<br>            <span class="hljs-keyword">var</span> da = (target_a - source_a) / <span class="hljs-built_in">Math</span>.PI;<br>            <span class="hljs-keyword">var</span> angle_sign = <span class="hljs-number">1</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">var</span> side = <span class="hljs-string">&quot;ccw&quot;</span>;<br>            <span class="hljs-keyword">var</span> da = <span class="hljs-number">2</span> - (target_a - source_a) / <span class="hljs-built_in">Math</span>.PI;<br>            <span class="hljs-keyword">var</span> angle_sign = -<span class="hljs-number">1</span>;<br>        &#125;<span class="hljs-comment">//else</span><br>        <span class="hljs-comment">//console.log(side, da, angle_sign);</span><br><br><br>        <span class="hljs-comment">//计算线路中间弧形部分的半径</span><br>        <span class="hljs-keyword">var</span> range = type === <span class="hljs-string">&quot;character&quot;</span> ? [rad_line_max, rad_line_min] : [rad_line_min, rad_line_max];<br>        <span class="hljs-keyword">var</span> scale_rad_curve = d3.scaleLinear()<br>            .domain([<span class="hljs-number">0</span>, <span class="hljs-number">1</span>])<br>            .range(range);<br>        <span class="hljs-keyword">var</span> rad_curve_line = scale_rad_curve(da) * width;<br><br>        <span class="hljs-comment">//对曲线上的第一点上进行稍微的偏移</span><br>        <span class="hljs-keyword">var</span> range = type === <span class="hljs-string">&quot;character&quot;</span> ? [<span class="hljs-number">0</span>, <span class="hljs-number">0.07</span>] : [<span class="hljs-number">0</span>, <span class="hljs-number">0.01</span>];<br>        <span class="hljs-keyword">var</span> scale_angle_start_offset = d3.scaleLinear()<br>            .domain([<span class="hljs-number">0</span>, <span class="hljs-number">1</span>])<br>            .range(range);<br>        <span class="hljs-keyword">var</span> start_angle = source_a + angle_sign * scale_angle_start_offset(da) * <span class="hljs-built_in">Math</span>.PI;<br><br>        <span class="hljs-comment">//对曲线上的最后一个点进行稍微的偏移</span><br>        <span class="hljs-keyword">var</span> range = type === <span class="hljs-string">&quot;character&quot;</span> ? [<span class="hljs-number">0</span>, <span class="hljs-number">0.02</span>] : [<span class="hljs-number">0</span>, <span class="hljs-number">0.07</span>];<br>        <span class="hljs-keyword">var</span> scale_angle_end_offset = d3.scaleLinear()<br>            .domain([<span class="hljs-number">0</span>, <span class="hljs-number">1</span>])<br>            .range(range);<br>        <span class="hljs-keyword">var</span> end_angle = target_a - angle_sign * scale_angle_end_offset(da) * <span class="hljs-built_in">Math</span>.PI;<br><br>        <span class="hljs-keyword">if</span> (target_a - source_a &lt; -<span class="hljs-built_in">Math</span>.PI) &#123;<br>            <span class="hljs-keyword">var</span> da_inner = pi2 + (end_angle - start_angle);<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (target_a - source_a &lt; <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">var</span> da_inner = (start_angle - end_angle);<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (target_a - source_a &lt; <span class="hljs-built_in">Math</span>.PI) &#123;<br>            <span class="hljs-keyword">var</span> da_inner = (end_angle - start_angle);<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (target_a - source_a &lt; <span class="hljs-number">2</span> * <span class="hljs-built_in">Math</span>.PI) &#123;<br>            <span class="hljs-keyword">var</span> da_inner = pi2 - (end_angle - start_angle)<br>        &#125;<span class="hljs-comment">//else if</span><br><br>        <span class="hljs-comment">//将第一个点连接到数据</span><br>        line_data.push(&#123;<br>            <span class="hljs-attr">angle</span>: source_a,<br>            <span class="hljs-attr">radius</span>: source_r<br>        &#125;);<br><br>        <span class="hljs-comment">//附加曲线部分的第一点</span><br>        line_data.push(&#123;<br>            <span class="hljs-attr">angle</span>: start_angle,<br>            <span class="hljs-attr">radius</span>: rad_curve_line<br>        &#125;);<br><br>        <span class="hljs-comment">//为曲线线在中间创建点</span><br>        <span class="hljs-keyword">var</span> step = <span class="hljs-number">0.06</span>;<br>        <span class="hljs-keyword">var</span> n = <span class="hljs-built_in">Math</span>.abs(<span class="hljs-built_in">Math</span>.floor(da_inner / step));<br>        <span class="hljs-keyword">var</span> curve_angle = start_angle;<br>        <span class="hljs-keyword">var</span> sign = side === <span class="hljs-string">&quot;cw&quot;</span> ? <span class="hljs-number">1</span> : -<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">if</span>(n &gt;= <span class="hljs-number">1</span>) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> j = <span class="hljs-number">0</span>; j &lt; n; j++) &#123;<br>                curve_angle += (sign * step) % pi2;<br>                line_data.push(&#123;<br>                    <span class="hljs-attr">angle</span>: curve_angle,<br>                    <span class="hljs-attr">radius</span>: rad_curve_line<br>                &#125;);<br>            &#125;<span class="hljs-comment">//for j</span><br>        &#125;<span class="hljs-comment">//if</span><br><br>        <span class="hljs-comment">//附加曲线部分的最后一个点</span><br>        line_data.push(&#123;<br>            <span class="hljs-attr">angle</span>: end_angle,<br>            <span class="hljs-attr">radius</span>: rad_curve_line<br>        &#125;);<br><br>        <span class="hljs-comment">//将最后一个点连接到数据</span><br>        line_data.push(&#123;<br>            <span class="hljs-attr">angle</span>: target_a,<br>            <span class="hljs-attr">radius</span>: target_r<br>        &#125;);<br><br>        <span class="hljs-comment">//画路径</span><br>        ctx.beginPath();<br>        line(line_data);<br>        ctx.strokeStyle = characterByName[d.character].color;<br>        ctx.stroke();<br><br>    &#125;<span class="hljs-comment">//for</span><br><br>    ctx.globalAlpha = <span class="hljs-number">0.7</span>;<br>    ctx.lineWidth = <span class="hljs-number">3</span> * size_factor;<br><br>&#125;<span class="hljs-comment">//function create_lines</span><br></code></pre></td></tr></table></figure><h2 id="5-力模拟"><a href="#5-力模拟" class="headerlink" title="5.力模拟"></a>5.力模拟</h2><h3 id="画最外侧的圆圈"><a href="#画最外侧的圆圈" class="headerlink" title="画最外侧的圆圈"></a>画最外侧的圆圈</h3><p><img src="15.png" alt="image-20210810103621738"></p><p>代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">/////////////////////////////////////////////////////////////////////////</span><br><span class="hljs-comment">///////////////////////// 数据准备 //////////////////////////</span><br><span class="hljs-comment">/////////////////////////////////////////////////////////////////////////</span><br><br>color_data.forEach(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">d</span>)</span>&#123;<br>    d.cluster =d.chapter -<span class="hljs-number">1</span>;<br>    d.radius=radius_scale(d.percentage);<br><br>    <span class="hljs-comment">//此数据点的重心</span><br>    d.focusX=rad_color*<span class="hljs-built_in">Math</span>.cos(chapter_location_data[d.cluster].centerAngle-pi1_2);<br>    d.focusY=rad_color*<span class="hljs-built_in">Math</span>.sin(chapter_location_data[d.cluster].centerAngle-pi1_2);<br>    <span class="hljs-comment">//添加一点随机性，以免在模拟中出现奇怪的放置行为</span><br>    d.x=d.focusX+random();<br>    d.y=d.focusY+random();<br>&#125;)<span class="hljs-comment">//forEach</span><br><br><span class="hljs-comment">///////////////////////////////////////////////////////////////////////////</span><br><span class="hljs-comment">/////////////////////////// 创建颜色圈 //////////////////////////</span><br><span class="hljs-comment">///////////////////////////////////////////////////////////////////////////</span><br><span class="hljs-comment">//在章节点点外侧生成彩色圆圈</span><br><span class="hljs-keyword">var</span> color_group = chart.append(<span class="hljs-string">&quot;g&quot;</span>).attr(<span class="hljs-string">&quot;class&quot;</span>, <span class="hljs-string">&quot;color-group&quot;</span>);<br><span class="hljs-keyword">var</span> color_circle = color_group.selectAll(<span class="hljs-string">&quot;.color-circle&quot;</span>)<br>    .data(color_data)<br>    .enter().append(<span class="hljs-string">&quot;circle&quot;</span>)<br>    .attr(<span class="hljs-string">&quot;class&quot;</span>, <span class="hljs-string">&quot;color-circle&quot;</span>)<br>    .attr(<span class="hljs-string">&quot;cx&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">d</span>) </span>&#123; <span class="hljs-keyword">return</span> d.x; &#125;)<br>    .attr(<span class="hljs-string">&quot;cy&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">d</span>) </span>&#123; <span class="hljs-keyword">return</span> d.y; &#125;)<br>    .attr(<span class="hljs-string">&quot;r&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">d</span>) </span>&#123; <span class="hljs-keyword">return</span> d.radius * size_factor; &#125;)<br>    .style(<span class="hljs-string">&quot;fill&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">d</span>) </span>&#123; <span class="hljs-keyword">return</span> d.color; &#125;)<br>    .style(<span class="hljs-string">&quot;stroke&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">d</span>) </span>&#123; <span class="hljs-keyword">return</span> d.color; &#125;)<br>    .style(<span class="hljs-string">&quot;stroke-width&quot;</span>, <span class="hljs-number">3</span> * size_factor)<br></code></pre></td></tr></table></figure><h3 id="力模拟"><a href="#力模拟" class="headerlink" title="力模拟"></a>力模拟</h3><p><img src="16.png" alt="image-20210810103024937"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">/////////////////////////////////////////////////////////////////////////</span><br><span class="hljs-comment">///////////////////////// 运行力模拟 //////////////////////////</span><br><span class="hljs-comment">/////////////////////////////////////////////////////////////////////////</span><br><br>simulation = d3.forceSimulation(color_data) <br>    .force(<span class="hljs-string">&quot;x&quot;</span>, d3.forceX().x(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">d</span>) </span>&#123; <span class="hljs-keyword">return</span> d.focusX; &#125;).strength(<span class="hljs-number">0.05</span>))<br>    .force(<span class="hljs-string">&quot;y&quot;</span>, d3.forceY().y(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">d</span>) </span>&#123; <span class="hljs-keyword">return</span> d.focusY; &#125;).strength(<span class="hljs-number">0.05</span>))<br>    .force(<span class="hljs-string">&quot;collide&quot;</span>, d3.forceCollide(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">d</span>) </span>&#123; <span class="hljs-keyword">return</span> (d.radius * <span class="hljs-number">1</span> + <span class="hljs-number">2.5</span>) * size_factor; &#125;).strength(<span class="hljs-number">0</span>))<br>    .on(<span class="hljs-string">&quot;tick&quot;</span>, tick)<br>    .on(<span class="hljs-string">&quot;end&quot;</span>, simulation_end)<br>    .alphaMin(<span class="hljs-number">.2</span>)<br><span class="hljs-comment">//.stop();</span><br><span class="hljs-comment">//提高碰撞强度以提供平滑过渡</span><br><span class="hljs-keyword">var</span> t = d3.timer(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">elapsed</span>) </span>&#123;<br>    <span class="hljs-keyword">var</span> dt = elapsed / <span class="hljs-number">3000</span>;<br>    simulation.force(<span class="hljs-string">&quot;collide&quot;</span>).strength(<span class="hljs-built_in">Math</span>.pow(dt, <span class="hljs-number">2</span>) * <span class="hljs-number">0.7</span>);<br>    <span class="hljs-keyword">if</span> (dt &gt;= <span class="hljs-number">1.0</span>) t.stop();<br>&#125;);<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">tick</span>(<span class="hljs-params">e</span>) </span>&#123;<br>    color_circle<br>        .attr(<span class="hljs-string">&quot;cx&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">d</span>) </span>&#123; <span class="hljs-keyword">return</span> d.x; &#125;)<br>        .attr(<span class="hljs-string">&quot;cy&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">d</span>) </span>&#123; <span class="hljs-keyword">return</span> d.y; &#125;)<br>&#125;<span class="hljs-comment">//function tick</span><br><span class="hljs-comment">//simulation结束的时候运行这个函数</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">simulation_end</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-comment">//Create the CMYK halftones</span><br>    color_circle.style(<span class="hljs-string">&quot;fill&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">d, i</span>) </span>&#123; <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;url(#pattern-total-&quot;</span> + i + <span class="hljs-string">&quot;)&quot;</span>; &#125;)<br>&#125;<span class="hljs-comment">//function simulation_end</span><br>data_save = color_data; <span class="hljs-comment">//存下最终位置</span><br></code></pre></td></tr></table></figure><h3 id="绘制CMYK风格的点阵填充"><a href="#绘制CMYK风格的点阵填充" class="headerlink" title="绘制CMYK风格的点阵填充"></a>绘制CMYK风格的点阵填充</h3><p><img src="17.png" alt="image-20210810103929090"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//////////////////////////////////////////////////////////////</span><br> <span class="hljs-comment">///////////////////// 创建 CMYK 模式 ///////////////////</span><br> <span class="hljs-comment">//////////////////////////////////////////////////////////////</span><br><br> <span class="hljs-comment">//模式基于 http://blockbuilder.org/veltman/50a350e86de82278ffb2df248499d3e2</span><br> <span class="hljs-keyword">var</span> radius_color_max = <span class="hljs-number">2</span> * size_factor;<br> <span class="hljs-keyword">var</span> radius_color = d3.scaleSqrt().range([<span class="hljs-number">0</span>, radius_color_max]);<br><br> <span class="hljs-keyword">var</span> ccs_colors = color_data.map(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">d</span>) </span>&#123; <span class="hljs-keyword">return</span> d.color; &#125;),<br>     cmyk_colors = [<span class="hljs-string">&quot;yellow&quot;</span>, <span class="hljs-string">&quot;magenta&quot;</span>, <span class="hljs-string">&quot;cyan&quot;</span>, <span class="hljs-string">&quot;black&quot;</span>],<br>     rotation = [<span class="hljs-number">0</span>, -<span class="hljs-number">15</span>, <span class="hljs-number">15</span>, <span class="hljs-number">45</span>];<br> <span class="hljs-built_in">console</span>.log(color_data)<br> <span class="hljs-comment">//循环遍历调色板中的不同颜色</span><br> <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> j = <span class="hljs-number">0</span>; j &lt; ccs_colors.length; j++) &#123;<br>     <span class="hljs-comment">//获取此颜色的半径转换</span><br>     <span class="hljs-keyword">var</span> CMYK = rgbToCMYK(d3.rgb(ccs_colors[j]));<br><br>     <span class="hljs-comment">//创建四个模式, C-Y-M-K, 一起形成颜色</span><br>     defs.selectAll(<span class="hljs-string">&quot;.pattern-sub&quot;</span>)<br>         .data(cmyk_colors)<br>         .enter().append(<span class="hljs-string">&quot;pattern&quot;</span>)<br>         .attr(<span class="hljs-string">&quot;id&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">d</span>) </span>&#123; <span class="hljs-built_in">console</span>.log(d);<span class="hljs-keyword">return</span> <span class="hljs-string">&quot;pattern-sub-&quot;</span> + d + <span class="hljs-string">&quot;-&quot;</span> + j; &#125;)<br>         .attr(<span class="hljs-string">&quot;patternUnits&quot;</span>, <span class="hljs-string">&quot;userSpaceOnUse&quot;</span>)<br>         .attr(<span class="hljs-string">&quot;patternTransform&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">d, i</span>) </span>&#123; <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;rotate(&quot;</span> + rotation[i] + <span class="hljs-string">&quot;)&quot;</span>; &#125;)<br>         .attr(<span class="hljs-string">&quot;width&quot;</span>, <span class="hljs-number">2</span> * radius_color_max)<br>         .attr(<span class="hljs-string">&quot;height&quot;</span>, <span class="hljs-number">2</span> * radius_color_max)<br>         .append(<span class="hljs-string">&quot;circle&quot;</span>)<br>         .attr(<span class="hljs-string">&quot;fill&quot;</span>, <span class="hljs-built_in">Object</span>)<br>         .attr(<span class="hljs-string">&quot;cx&quot;</span>, radius_color_max)<br>         .attr(<span class="hljs-string">&quot;cy&quot;</span>, radius_color_max)<br>         .attr(<span class="hljs-string">&quot;r&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">d</span>) </span>&#123; <span class="hljs-keyword">return</span> <span class="hljs-built_in">Math</span>.max(<span class="hljs-number">0.001</span>, radius_color(CMYK[d])); &#125;);<br><br>     <span class="hljs-comment">//将 CMYK 模式嵌入更大的图案中</span><br>     <span class="hljs-keyword">var</span> patterns = defs.append(<span class="hljs-string">&quot;pattern&quot;</span>)<br>         .attr(<span class="hljs-string">&quot;id&quot;</span>, <span class="hljs-string">&quot;pattern-total-&quot;</span> + j)<br>         .attr(<span class="hljs-string">&quot;patternUnits&quot;</span>, <span class="hljs-string">&quot;userSpaceOnUse&quot;</span>)<br>         .attr(<span class="hljs-string">&quot;width&quot;</span>, radius_color_max * <span class="hljs-number">31</span>)<br>         .attr(<span class="hljs-string">&quot;height&quot;</span>, radius_color_max * <span class="hljs-number">31</span>)<br><br>     <span class="hljs-comment">//附上白色背景</span><br>     patterns.append(<span class="hljs-string">&quot;rect&quot;</span>)<br>         .attr(<span class="hljs-string">&quot;width&quot;</span>, width)<br>         .attr(<span class="hljs-string">&quot;height&quot;</span>, height)<br>         .attr(<span class="hljs-string">&quot;x&quot;</span>, <span class="hljs-number">0</span>)<br>         .attr(<span class="hljs-string">&quot;y&quot;</span>, <span class="hljs-number">0</span>)<br>         .style(<span class="hljs-string">&quot;fill&quot;</span>,<span class="hljs-string">&quot;white&quot;</span>)<br><br>     <span class="hljs-comment">//添加CMYK模式</span><br>     patterns<br>         .selectAll(<span class="hljs-string">&quot;.dots&quot;</span>)<br>         .data(cmyk_colors)<br>         .enter().append(<span class="hljs-string">&quot;rect&quot;</span>)<br>         .attr(<span class="hljs-string">&quot;class&quot;</span>, <span class="hljs-string">&quot;dots&quot;</span>)<br>         .attr(<span class="hljs-string">&quot;width&quot;</span>, width)<br>         .attr(<span class="hljs-string">&quot;height&quot;</span>, height)<br>         .attr(<span class="hljs-string">&quot;x&quot;</span>, <span class="hljs-number">0</span>)<br>         .attr(<span class="hljs-string">&quot;y&quot;</span>, <span class="hljs-number">0</span>)<br>         .style(<span class="hljs-string">&quot;mix-blend-mode&quot;</span>, <span class="hljs-string">&quot;multiply&quot;</span>)<br>         .attr(<span class="hljs-string">&quot;fill&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">d, i</span>) </span>&#123; <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;url(#pattern-sub-&quot;</span> + cmyk_colors[i] + <span class="hljs-string">&quot;-&quot;</span> + j + <span class="hljs-string">&quot;)&quot;</span>; &#125;)<br> &#125;<span class="hljs-comment">//for j</span><br></code></pre></td></tr></table></figure><h2 id="6-加入交互"><a href="#6-加入交互" class="headerlink" title="6.加入交互"></a>6.加入交互</h2><h3 id="线条悬停交互"><a href="#线条悬停交互" class="headerlink" title="线条悬停交互"></a>线条悬停交互</h3><p>最内圈人物与人物之间的关系线条增加交互</p><p><code>&quot;mouseover&quot;, mouse_over_relation</code>鼠标移入：鼠标放在某一条弧线上 1.其他的弧线的透明度调低。2.增加文字说明。</p><p><code>&quot;mouseout&quot;, mouse_out</code>鼠标移出：1.透明度还原 2. 删除文字说明。</p><p>需要强调的一点是，交互是加在一个颜色为白色的遮罩上。重点关注遮罩的宽度，即触发交互的宽度：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//原本的线条宽度</span><br>.style(<span class="hljs-string">&quot;stroke-width&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">d</span>) </span>&#123; <span class="hljs-keyword">return</span> stroke_relation(d.type) * size_factor; &#125;)<br><span class="hljs-comment">//遮罩的线条宽度</span><br>.style(<span class="hljs-string">&quot;stroke-width&quot;</span>, <span class="hljs-number">16</span> * size_factor)<br></code></pre></td></tr></table></figure><p>效果图：</p><p><img src="6.png" alt="image-20210809154001171"></p><p>代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs js">      <span class="hljs-comment">///////////////////////////////////////////////////////////////////////////</span><br>      <span class="hljs-comment">/////////////////////创建内部关系悬停区域 ////////////////////////////////////</span><br>      <span class="hljs-comment">///////////////////////////////////////////////////////////////////////////</span><br><br>      <span class="hljs-keyword">var</span> relation_hover_group = chart.append(<span class="hljs-string">&quot;g&quot;</span>).attr(<span class="hljs-string">&quot;class&quot;</span>, <span class="hljs-string">&quot;relation-hover-group&quot;</span>);<br>      <span class="hljs-keyword">var</span> relation_hover_lines = relation_hover_group.selectAll(<span class="hljs-string">&quot;.relation-hover-path&quot;</span>)<br>          .data(relation_data)<br>          .enter().append(<span class="hljs-string">&quot;path&quot;</span>)<br>          .attr(<span class="hljs-string">&quot;class&quot;</span>, <span class="hljs-string">&quot;relation-hover-path&quot;</span>)<br>          .style(<span class="hljs-string">&quot;fill&quot;</span>, <span class="hljs-string">&quot;none&quot;</span>)<br>          .style(<span class="hljs-string">&quot;stroke&quot;</span>, <span class="hljs-string">&quot;white&quot;</span>)<br>          .style(<span class="hljs-string">&quot;stroke-width&quot;</span>, <span class="hljs-number">16</span> * size_factor)<br>          .style(<span class="hljs-string">&quot;opacity&quot;</span>, <span class="hljs-number">0</span>)<br>          <span class="hljs-comment">// .style(&quot;pointer-events&quot;, &quot;all&quot;)</span><br>          .attr(<span class="hljs-string">&quot;d&quot;</span>, create_relation_lines)<br>          .on(<span class="hljs-string">&quot;mouseover&quot;</span>, mouse_over_relation)<br>          <span class="hljs-comment">// .on(&quot;mouseout&quot;, mouse_out)</span><br><br>      <span class="hljs-comment">//调用并创建注释的文本部分</span><br>      <span class="hljs-keyword">var</span> annotation_relation_group = chart.append(<span class="hljs-string">&quot;g&quot;</span>).attr(<span class="hljs-string">&quot;class&quot;</span>, <span class="hljs-string">&quot;annotation-relation-group&quot;</span>);<br><br><span class="hljs-comment">//鼠标移入函数</span><br>      <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">mouse_over_relation</span>(<span class="hljs-params">d,i</span>) </span>&#123;<br>          d3.event.stopPropagation();<br>          mouse_over_in_action = <span class="hljs-literal">true</span>;<br><br>          <span class="hljs-built_in">clearTimeout</span>(remove_text_timer);<br><br>          <span class="hljs-comment">//1.只显示鼠标悬停的关系</span><br>          relation_lines.filter(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">c,j</span>) </span>&#123; <span class="hljs-keyword">return</span> j !== i; &#125;)<br>              .style(<span class="hljs-string">&quot;opacity&quot;</span>, <span class="hljs-number">0.05</span>);<br><br>          <span class="hljs-comment">//2.设置注释</span><br>          <span class="hljs-keyword">var</span> annotations_relationship = [<br>              &#123;<br>                  <span class="hljs-attr">note</span>: &#123;<br>                      <span class="hljs-attr">label</span>: d.note,<br>                      <span class="hljs-attr">title</span>: capitalizeFirstLetter(d.type),<br>                      <span class="hljs-attr">wrap</span>: <span class="hljs-number">150</span>*size_factor,<br>                  &#125;,<br>                  <span class="hljs-attr">relation_type</span>: <span class="hljs-string">&quot;family&quot;</span>,<br>                  <span class="hljs-attr">x</span>: +d.x * size_factor,<br>                  <span class="hljs-attr">y</span>: +d.y * size_factor,<br>                  <span class="hljs-attr">dx</span>: <span class="hljs-number">5</span> * size_factor,<br>                  <span class="hljs-attr">dy</span>: -<span class="hljs-number">5</span> * size_factor<br>              &#125;<br>          ];<br>          <br>          <span class="hljs-keyword">var</span> makeAnnotationsRelationship = d3.annotation()<br>              <span class="hljs-comment">// .editMode(true)</span><br>              .type(d3.annotationLabel)<br>              .annotations(annotations_relationship);<br>          annotation_relation_group.call(makeAnnotationsRelationship);<br><br>          <span class="hljs-comment">//更新样式</span><br>          annotation_relation_group.selectAll(<span class="hljs-string">&quot;.note-line, .connector&quot;</span>)<br>              .style(<span class="hljs-string">&quot;stroke&quot;</span>, <span class="hljs-string">&quot;none&quot;</span>);<br>          annotation_relation_group.select(<span class="hljs-string">&quot;.annotation-note-title&quot;</span>)<br>              .style(<span class="hljs-string">&quot;fill&quot;</span>, color_relation(d.type) === <span class="hljs-string">&quot;#bbbbbb&quot;</span> ? <span class="hljs-string">&quot;#9e9e9e&quot;</span> : color_relation(d.type));<br><br>      &#125;<span class="hljs-comment">//function mouse_over_relation</span><br><br><br></code></pre></td></tr></table></figure><h4 id="鼠标移出"><a href="#鼠标移出" class="headerlink" title="鼠标移出"></a><strong>鼠标移出</strong></h4><p><code>mouse_out</code>事件：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//鼠标移出函数</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">mouse_out</span>(<span class="hljs-params"></span>) </span>&#123;<br>          <span class="hljs-comment">//只有当之前有鼠标移入之后的移出时，才会运行此功能</span><br>          <span class="hljs-keyword">if</span>(!mouse_over_in_action) <span class="hljs-keyword">return</span>;<br>          mouse_over_in_action = <span class="hljs-literal">false</span>;<br>        <span class="hljs-comment">//1.还原所有的关系</span><br>          relation_lines.style(<span class="hljs-string">&quot;opacity&quot;</span>, <span class="hljs-number">0.7</span>);<br>            <span class="hljs-comment">//2.移除所有的注释</span><br>          annotation_relation_group.selectAll(<span class="hljs-string">&quot;.annotation&quot;</span>).remove();<br><br>      &#125;<span class="hljs-comment">//function mouse_out</span><br><br></code></pre></td></tr></table></figure><h4 id=""><a href="#" class="headerlink" title=""></a></h4><h3 id="人物标签"><a href="#人物标签" class="headerlink" title="人物标签"></a>人物标签</h3><h4 id="内小圈：人物标签与内环"><a href="#内小圈：人物标签与内环" class="headerlink" title="内小圈：人物标签与内环"></a>内小圈：人物标签与内环</h4><p>效果：</p><p><img src="7.png" alt="image-20210809164829671"></p><p>分析交互：</p><p>鼠标移入名字区域，1.名字外侧的点样式改变 2.显示人物图像</p><p>鼠标移出，3.隐藏悬停圆圈，还原点的样式 4.去除人物图像</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">///////////////////////////////////////////////////////////////////////////</span><br>        <span class="hljs-comment">//////////////////////// 创建遮盖的圈 //////////////////////</span><br>        <span class="hljs-comment">///////////////////////////////////////////////////////////////////////////       </span><br><span class="hljs-comment">//在中心添加一个圆圈，显示悬停上的封面图像</span><br>    <span class="hljs-keyword">var</span> cover_circle_group = chart.append(<span class="hljs-string">&quot;g&quot;</span>).attr(<span class="hljs-string">&quot;class&quot;</span>, <span class="hljs-string">&quot;cover-circle-group&quot;</span>);<br>    <span class="hljs-keyword">var</span> cover_circle = cover_circle_group.append(<span class="hljs-string">&quot;circle&quot;</span>)<br>        .attr(<span class="hljs-string">&quot;class&quot;</span>, <span class="hljs-string">&quot;cover-circle&quot;</span>)<br>        .attr(<span class="hljs-string">&quot;cx&quot;</span>, <span class="hljs-number">0</span>)<br>        .attr(<span class="hljs-string">&quot;cy&quot;</span>, <span class="hljs-number">0</span>)<br>        .attr(<span class="hljs-string">&quot;r&quot;</span>, rad_image)<br>        .style(<span class="hljs-string">&quot;fill&quot;</span>, <span class="hljs-string">&quot;none&quot;</span>); <br><span class="hljs-comment">///////////////////////////////////////////////////////////////////////////</span><br>    <span class="hljs-comment">////////////////////// 创建人物名称悬停区域 //////////////////////////////////</span><br>    <span class="hljs-comment">///////////////////////////////////////////////////////////////////////////</span><br><br>    <span class="hljs-comment">//创建悬停区域</span><br>    <span class="hljs-keyword">var</span> rad_hover_circle = <span class="hljs-number">35</span> * size_factor;<br>    <span class="hljs-keyword">var</span> hover_circle = hover_circle_group.selectAll(<span class="hljs-string">&quot;.hover-circle&quot;</span>)<br>        .data(character_total_data)<br>        .enter().append(<span class="hljs-string">&quot;circle&quot;</span>)<br>        .attr(<span class="hljs-string">&quot;class&quot;</span>, <span class="hljs-string">&quot;hover-circle&quot;</span>)<br>        .attr(<span class="hljs-string">&quot;cx&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">d</span>) </span>&#123; <span class="hljs-keyword">return</span> d.dot_name_rad * <span class="hljs-built_in">Math</span>.cos(d.name_angle - pi1_2); &#125;)<br>        .attr(<span class="hljs-string">&quot;cy&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">d</span>) </span>&#123; <span class="hljs-keyword">return</span> d.dot_name_rad * <span class="hljs-built_in">Math</span>.sin(d.name_angle - pi1_2); &#125;)<br>        .attr(<span class="hljs-string">&quot;r&quot;</span>, rad_hover_circle)<br>        .style(<span class="hljs-string">&quot;fill&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">d</span>) </span>&#123; <span class="hljs-keyword">return</span> d.color; &#125;)<br>        .style(<span class="hljs-string">&quot;fill-opacity&quot;</span>, <span class="hljs-number">0.3</span>)<br>        .style(<span class="hljs-string">&quot;opacity&quot;</span>, <span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">var</span> arc_character_hover = d3.arc()<br>        .outerRadius(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">d,i</span>) </span>&#123; <span class="hljs-keyword">return</span> character_total_data[i].dot_name_rad + rad_hover_circle; &#125;)<br>        .innerRadius(rad_donut_inner)<br><br>    <span class="hljs-comment">//创建每个字符的甜甜圈切片</span><br>    <span class="hljs-keyword">var</span> character_hover_group = chart.append(<span class="hljs-string">&quot;g&quot;</span>).attr(<span class="hljs-string">&quot;class&quot;</span>, <span class="hljs-string">&quot;character-hover-group&quot;</span>);<br>    <span class="hljs-keyword">var</span> character_hover = character_hover_group.selectAll(<span class="hljs-string">&quot;.character-hover-arc&quot;</span>)<br>        .data(arcs)<br>        .enter().append(<span class="hljs-string">&quot;path&quot;</span>)<br>        .attr(<span class="hljs-string">&quot;class&quot;</span>, <span class="hljs-string">&quot;character-hover-arc&quot;</span>)<br>        .attr(<span class="hljs-string">&quot;d&quot;</span>, arc_character_hover)<br>        .style(<span class="hljs-string">&quot;fill&quot;</span>, <span class="hljs-string">&quot;none&quot;</span>)<br>        .style(<span class="hljs-string">&quot;pointer-events&quot;</span>, <span class="hljs-string">&quot;all&quot;</span>)<br>        .on(<span class="hljs-string">&quot;mouseover&quot;</span>, mouse_over_character)<br>        .on(<span class="hljs-string">&quot;mouseout&quot;</span>, mouse_out);<br><br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">mouse_over_character</span>(<span class="hljs-params">d</span>) </span>&#123;<br>        d3.event.stopPropagation();<br>        mouse_over_in_action = <span class="hljs-literal">true</span>;<br>        <span class="hljs-comment">//1.显示悬停圈，名字外侧的点样式改变</span><br>        hover_circle.filter(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">c</span>) </span>&#123; <span class="hljs-keyword">return</span> d.character === c.character; &#125;)<br>            .style(<span class="hljs-string">&quot;opacity&quot;</span>, <span class="hljs-number">1</span>);<br>        <span class="hljs-comment">//2.显示中心中的人物图像</span><br>        cover_image.attr(<span class="hljs-string">&quot;xlink:href&quot;</span>, <span class="hljs-string">&quot;../img/character-&quot;</span> + d.character.toLowerCase() + <span class="hljs-string">&quot;.jpg&quot;</span>)<br>        cover_circle.style(<span class="hljs-string">&quot;fill&quot;</span>, <span class="hljs-string">&quot;url(#cover-image)&quot;</span>);<br><br><br><br>    &#125;<span class="hljs-comment">//function mouse_over_character</span><br></code></pre></td></tr></table></figure><h5 id="鼠标移出-1"><a href="#鼠标移出-1" class="headerlink" title="鼠标移出"></a><strong>鼠标移出</strong></h5><p><code>mouse_out</code>函数改为：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//鼠标移出函数</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">mouse_out</span>(<span class="hljs-params"></span>) </span>&#123;<br>          <span class="hljs-comment">//只有当之前有鼠标移入之后的移出时，才会运行此功能</span><br>          <span class="hljs-keyword">if</span>(!mouse_over_in_action) <span class="hljs-keyword">return</span>;<br>          mouse_over_in_action = <span class="hljs-literal">false</span>;<br>             <span class="hljs-comment">//1.还原所有的关系</span><br>          relation_lines.style(<span class="hljs-string">&quot;opacity&quot;</span>, <span class="hljs-number">0.7</span>);<br>            <span class="hljs-comment">//2.移除所有的注释</span><br>          annotation_relation_group.selectAll(<span class="hljs-string">&quot;.annotation&quot;</span>).remove();<br>           <span class="hljs-comment">//3.隐藏悬停圆圈</span><br>          hover_circle.style(<span class="hljs-string">&quot;opacity&quot;</span>, <span class="hljs-number">0</span>);<br>           <span class="hljs-comment">//4.移除中心人物的图像</span><br>          cover_circle.style(<span class="hljs-string">&quot;fill&quot;</span>, <span class="hljs-string">&quot;none&quot;</span>);<br>          cover_image.attr(<span class="hljs-string">&quot;xlink:href&quot;</span>, <span class="hljs-string">&quot;../img/white-square.jpg&quot;</span>);<br><br><br>      &#125;<span class="hljs-comment">//function mouse_out</span><br><br></code></pre></td></tr></table></figure><h4 id="外大圈：人对章节"><a href="#外大圈：人对章节" class="headerlink" title="外大圈：人对章节"></a>外大圈：人对章节</h4><p><img src="12.png" alt="image-20210809181749149"></p><p>鼠标悬停在人物上，显示该人物出现在哪些章节。触发的操作：</p><p>3.仅显示当前人物与章节的关系线条 4. 对应的章节高亮 </p><p>在    <code>mouse_over_character</code>函数中增加</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js">  <span class="hljs-comment">//3.显示当前人物与章节的关系线条</span><br>ctx.clearRect(-width/<span class="hljs-number">2</span>, -height/<span class="hljs-number">2</span>, width, height);<br>ctx.globalAlpha = <span class="hljs-number">0.8</span>;<br>create_lines(<span class="hljs-string">&quot;character&quot;</span>, character_data.filter(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">c,j</span>) </span>&#123;<span class="hljs-keyword">return</span> c.character === d.character; &#125;) );<br><br></code></pre></td></tr></table></figure><p><img src="13.png" alt="image-20210809182051225"></p><p>在    <code>mouse_over_character</code>函数中增加：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//4.突出显示此人物出现的章节</span><br> <span class="hljs-keyword">var</span> char_chapters = character_data<br>     .filter(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">c</span>) </span>&#123; <span class="hljs-keyword">return</span> c.character === d.character; &#125;)<br>     .map(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">c</span>) </span>&#123; <span class="hljs-keyword">return</span> c.chapter; &#125;);<br> <span class="hljs-keyword">var</span> char_color = characterByName[d.character].color;<br> chapter_hover_slice.filter(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">c,j</span>) </span>&#123; <span class="hljs-keyword">return</span> char_chapters.indexOf(j+<span class="hljs-number">1</span>) &gt;= <span class="hljs-number">0</span>; &#125;)<br>     .style(<span class="hljs-string">&quot;fill&quot;</span>, char_color)<br>     .style(<span class="hljs-string">&quot;stroke&quot;</span>, char_color);<br> chapter_number.filter(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">c,j</span>) </span>&#123; <span class="hljs-keyword">return</span> char_chapters.indexOf(j+<span class="hljs-number">1</span>) &gt;= <span class="hljs-number">0</span>; &#125;)<br>     .style(<span class="hljs-string">&quot;fill&quot;</span>, <span class="hljs-string">&quot;white&quot;</span>);<br> chapter_dot.filter(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">c,j</span>) </span>&#123; <span class="hljs-keyword">return</span> char_chapters.indexOf(j+<span class="hljs-number">1</span>) &gt;= <span class="hljs-number">0</span>; &#125;)<br>     .attr(<span class="hljs-string">&quot;r&quot;</span>, chapter_dot_rad * <span class="hljs-number">1.5</span>)<br>     .style(<span class="hljs-string">&quot;stroke-width&quot;</span>, chapter_dot_rad * <span class="hljs-number">0.5</span> * <span class="hljs-number">1.5</span>)<br>     .style(<span class="hljs-string">&quot;fill&quot;</span>, char_color);<br></code></pre></td></tr></table></figure><h5 id="鼠标移出-2"><a href="#鼠标移出-2" class="headerlink" title="鼠标移出"></a><strong>鼠标移出</strong></h5><p>需要在<code>mouse_out</code>函数中增加</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//5.恢复章节&amp;人物连线</span><br>ctx.clearRect(-width / <span class="hljs-number">2</span>, -height / <span class="hljs-number">2</span>, width, height);<br>ctx.globalAlpha = cover_alpha;<br>create_lines(<span class="hljs-string">&quot;character&quot;</span>, cover_data);<br><br></code></pre></td></tr></table></figure><h3 id="章节标签"><a href="#章节标签" class="headerlink" title="章节标签"></a>章节标签</h3><h4 id="章节（除章节对人）"><a href="#章节（除章节对人）" class="headerlink" title="章节（除章节对人）"></a>章节（除章节对人）</h4><p><img src="10.png" alt="image-20210809174828999"></p><p>鼠标悬停在对应的章节编号上需要触发如下操作：</p><p>1.在该章节出现的人物名称亮起，未出现的人物透明度变低2.突出显示章节甜甜圈切片3.在中心显示封面图像</p><p>鼠标离开对应的章节编号需要触发如下操作：</p><p>6.人物名复原  7.突出显示的章节甜甜圈切片还原 4.移除中心人物的图像</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">///////////////////////////////////////////////////////////////////////////</span><br><span class="hljs-comment">/////////////////////创建隐藏章节悬停区域 /////////////////////////////////////</span><br><span class="hljs-comment">///////////////////////////////////////////////////////////////////////////</span><br><br><span class="hljs-keyword">var</span> arc_chapter_hover = d3.arc()<br>    .outerRadius(rad_chapter_outer)<br>    .innerRadius(rad_chapter_inner);<br><br><span class="hljs-comment">//每章创建甜甜圈片</span><br><span class="hljs-keyword">var</span> chapter_hover_group = chart.append(<span class="hljs-string">&quot;g&quot;</span>).attr(<span class="hljs-string">&quot;class&quot;</span>, <span class="hljs-string">&quot;chapter-hover-group&quot;</span>);<br><span class="hljs-keyword">var</span> chapter_hover = chapter_hover_group.selectAll(<span class="hljs-string">&quot;.chapter-hover-arc&quot;</span>)<br>    .data(chapter_location_data)<br>    .enter().append(<span class="hljs-string">&quot;path&quot;</span>)<br>    .attr(<span class="hljs-string">&quot;class&quot;</span>, <span class="hljs-string">&quot;chapter-hover-arc&quot;</span>)<br>    .attr(<span class="hljs-string">&quot;d&quot;</span>, arc_chapter_hover)<br>    .style(<span class="hljs-string">&quot;fill&quot;</span>, <span class="hljs-string">&quot;none&quot;</span>)<br>    .style(<span class="hljs-string">&quot;pointer-events&quot;</span>, <span class="hljs-string">&quot;all&quot;</span>)<br>    .on(<span class="hljs-string">&quot;mouseover&quot;</span>, mouse_over_chapter)<br>    .on(<span class="hljs-string">&quot;mouseout&quot;</span>, mouse_out);<br><br><span class="hljs-comment">//当鼠标在章节弧线上</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">mouse_over_chapter</span>(<span class="hljs-params">d,i</span>) </span>&#123;<br>    d3.event.stopPropagation();<br>    mouse_over_in_action = <span class="hljs-literal">true</span>;<br>    <br>    <span class="hljs-comment">//1.突出显示本章中出现的人物，在该章节出现的人物名称亮起，未出现的人物透明度变低</span><br>    <span class="hljs-keyword">var</span> char_chapters = character_data<br>        .filter(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">c</span>) </span>&#123; <span class="hljs-keyword">return</span> c.chapter === i+<span class="hljs-number">1</span>; &#125;)<br>        .map(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">c</span>) </span>&#123; <span class="hljs-keyword">return</span> c.character; &#125;);<br><br>    names.filter(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">c</span>) </span>&#123; <span class="hljs-keyword">return</span> char_chapters.indexOf(c.character) &lt; <span class="hljs-number">0</span>; &#125;)<br>        .style(<span class="hljs-string">&quot;opacity&quot;</span>, <span class="hljs-number">0.2</span>);<br>    name_dot.filter(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">c</span>) </span>&#123; <span class="hljs-keyword">return</span> char_chapters.indexOf(c.character) &lt; <span class="hljs-number">0</span>; &#125;)<br>        .style(<span class="hljs-string">&quot;opacity&quot;</span>, <span class="hljs-number">0.2</span>);<br><br>    <span class="hljs-comment">//2.突出显示章节甜甜圈切片</span><br>    chapter_hover_slice.filter(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">c, j</span>) </span>&#123; <span class="hljs-keyword">return</span> i === j; &#125;)<br>        .style(<span class="hljs-string">&quot;fill&quot;</span>, color_sakura)<br>        .style(<span class="hljs-string">&quot;stroke&quot;</span>, color_sakura);<br>    chapter_number.filter(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">c, j</span>) </span>&#123; <span class="hljs-keyword">return</span> i === j; &#125;)<br>        .style(<span class="hljs-string">&quot;fill&quot;</span>, <span class="hljs-string">&quot;white&quot;</span>);<br>    chapter_dot.filter(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">c, j</span>) </span>&#123; <span class="hljs-keyword">return</span> i === j; &#125;)<br>        .attr(<span class="hljs-string">&quot;r&quot;</span>, chapter_dot_rad * <span class="hljs-number">1.5</span>)<br>        .style(<span class="hljs-string">&quot;stroke-width&quot;</span>, chapter_dot_rad * <span class="hljs-number">0.5</span> * <span class="hljs-number">1.5</span>)<br>        .style(<span class="hljs-string">&quot;fill&quot;</span>, color_sakura);<br><br>    <span class="hljs-comment">//3.在中心显示封面图像</span><br>    cover_image.attr(<span class="hljs-string">&quot;xlink:href&quot;</span>, <span class="hljs-string">&quot;../img/ccs-chapter-&quot;</span> + (i+<span class="hljs-number">1</span>) + <span class="hljs-string">&quot;.jpg&quot;</span>)<br>    cover_circle.style(<span class="hljs-string">&quot;fill&quot;</span>, <span class="hljs-string">&quot;url(#cover-image)&quot;</span>);<br>&#125;<span class="hljs-comment">//function mouse_over_chapter</span><br></code></pre></td></tr></table></figure><h5 id="鼠标移出-3"><a href="#鼠标移出-3" class="headerlink" title="鼠标移出"></a><strong>鼠标移出</strong></h5><p>鼠标移出的情况继续修改<code>mouse_out</code>函数，在之前的基础上增加：6.人物名复原  7.突出显示的章节甜甜圈切片还原</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//6.人物名称恢复正常</span><br>names.style(<span class="hljs-string">&quot;opacity&quot;</span>, <span class="hljs-literal">null</span>);<br>name_dot.style(<span class="hljs-string">&quot;opacity&quot;</span>, <span class="hljs-literal">null</span>);<br><span class="hljs-comment">//7.恢复章节标签</span><br>chapter_hover_slice.style(<span class="hljs-string">&quot;fill&quot;</span>, <span class="hljs-string">&quot;none&quot;</span>).style(<span class="hljs-string">&quot;stroke&quot;</span>, <span class="hljs-string">&quot;none&quot;</span>);<br>chapter_number.style(<span class="hljs-string">&quot;fill&quot;</span>, <span class="hljs-literal">null</span>);<br>chapter_dot<br>    .attr(<span class="hljs-string">&quot;r&quot;</span>, chapter_dot_rad)<br>    .style(<span class="hljs-string">&quot;stroke-width&quot;</span>, chapter_dot_rad * <span class="hljs-number">0.5</span>)<br>    .style(<span class="hljs-string">&quot;fill&quot;</span>, <span class="hljs-string">&quot;#c4c4c4&quot;</span>);<br></code></pre></td></tr></table></figure><h4 id="章节对人"><a href="#章节对人" class="headerlink" title="章节对人"></a>章节对人</h4><p><img src="14.png" alt="image-20210809182324048"></p><p>鼠标悬停在章节上，显示该章节出现的人物。触发的操作：4.仅显示该章节与人物的连接线 </p><p>在    <code> mouse_over_chapter</code>函数中增加：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//4.仅显示该章节与人物的连接线           </span><br>ctx.clearRect(-width / <span class="hljs-number">2</span>, -height / <span class="hljs-number">2</span>, width, height);<br>            ctx.lineWidth = <span class="hljs-number">4</span> * size_factor;<br>            ctx.globalAlpha = <span class="hljs-number">1</span>;<br>            create_lines(<span class="hljs-string">&quot;chapter&quot;</span>, character_data.filter(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">c</span>) </span>&#123; <span class="hljs-keyword">return</span> c.chapter === i+<span class="hljs-number">1</span>; &#125;));<br></code></pre></td></tr></table></figure><h5 id="鼠标移出-4"><a href="#鼠标移出-4" class="headerlink" title="鼠标移出"></a><strong>鼠标移出</strong></h5><p>这里<code>mouse_out</code>暂时不需要修改 </p><h3 id="力模拟-1"><a href="#力模拟-1" class="headerlink" title="力模拟"></a>力模拟</h3><p>鼠标移入力模拟生成的圆圈区域：1.显示彩色圈圈组的圆环，2.章节编号边框变色 3.突出对应的连线  4.突出对应的人物名称5.在中心显示章节封面图片</p><p>鼠标移出力模拟生成的圆圈区域：8.隐藏彩色圈圈组的圆环7.章节编号边框还原 5.连线恢复（章节&amp;人物、人物&amp;人物）  6对应的人物名称恢复4.隐藏中心显示章节封面图片</p><p><img src="18.png" alt="image-20210810104715343"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">///////////////////////////////////////////////////////////////////////////</span><br> <span class="hljs-comment">//////////////////////// 创建悬停圆环 ////////////////////////</span><br> <span class="hljs-comment">///////////////////////////////////////////////////////////////////////////</span><br><br> <span class="hljs-comment">//悬停时生成的圆环</span><br> <span class="hljs-keyword">var</span> color_circle_hover_group = chart.append(<span class="hljs-string">&quot;g&quot;</span>).attr(<span class="hljs-string">&quot;class&quot;</span>, <span class="hljs-string">&quot;color-circle-hover-group&quot;</span>);<br> <span class="hljs-keyword">var</span> color_hover_circle = color_circle_hover_group<br>     <span class="hljs-comment">// .selectAll(&quot;.color-hover-circle&quot;)</span><br>     <span class="hljs-comment">// .data(chapter_location_data)</span><br>     <span class="hljs-comment">// .enter()</span><br>     .append(<span class="hljs-string">&quot;circle&quot;</span>)<br>     .attr(<span class="hljs-string">&quot;class&quot;</span>, <span class="hljs-string">&quot;color-hover-circle&quot;</span>)<br>     <span class="hljs-comment">// .attr(&quot;cx&quot;, function (d) &#123; return rad_color * Math.cos(d.centerAngle - pi1_2); &#125;)</span><br>     <span class="hljs-comment">// .attr(&quot;cy&quot;, function (d) &#123; return rad_color * Math.sin(d.centerAngle - pi1_2); &#125;)</span><br>     .attr(<span class="hljs-string">&quot;r&quot;</span>,  <span class="hljs-number">36</span> * size_factor)<br>     .style(<span class="hljs-string">&quot;fill&quot;</span>, <span class="hljs-string">&quot;none&quot;</span>)<br>     .style(<span class="hljs-string">&quot;stroke&quot;</span>, color_sakura)<br>     .style(<span class="hljs-string">&quot;stroke-width&quot;</span>, chapter_dot_rad * <span class="hljs-number">0.5</span> * <span class="hljs-number">1.5</span>)<br>     .style(<span class="hljs-string">&quot;opacity&quot;</span>, <span class="hljs-number">0</span>);<br><br> <span class="hljs-comment">///////////////////////////////////////////////////////////////////////////</span><br> <span class="hljs-comment">////////////////////// 创建隐藏的封面停区域////////////////////</span><br> <span class="hljs-comment">///////////////////////////////////////////////////////////////////////////</span><br><br> <span class="hljs-keyword">var</span> arc_cover_hover = d3.arc()<br>     .outerRadius(rad_cover_outer)<br>     .innerRadius(rad_cover_inner);<br><br> <span class="hljs-comment">//为每章创建甜甜圈片，用于触发交互</span><br> <span class="hljs-keyword">var</span> cover_hover_group = chart.append(<span class="hljs-string">&quot;g&quot;</span>).attr(<span class="hljs-string">&quot;class&quot;</span>, <span class="hljs-string">&quot;cover-hover-group&quot;</span>);<br> <span class="hljs-keyword">var</span> cover_hover = cover_hover_group.selectAll(<span class="hljs-string">&quot;.cover-hover-arc&quot;</span>)<br>     .data(chapter_location_data)<br>     .enter().append(<span class="hljs-string">&quot;path&quot;</span>)<br>     .attr(<span class="hljs-string">&quot;class&quot;</span>, <span class="hljs-string">&quot;cover-hover-arc&quot;</span>)<br>     .attr(<span class="hljs-string">&quot;d&quot;</span>, arc_cover_hover)<br>     .style(<span class="hljs-string">&quot;fill&quot;</span>, <span class="hljs-string">&quot;none&quot;</span>)<br>     .style(<span class="hljs-string">&quot;pointer-events&quot;</span>, <span class="hljs-string">&quot;all&quot;</span>)<br>     .on(<span class="hljs-string">&quot;mouseover&quot;</span>, mouse_over_cover)<br>     .on(<span class="hljs-string">&quot;mouseout&quot;</span>, mouse_out);<br><br> <span class="hljs-comment">//当鼠标移入该区域时</span><br> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">mouse_over_cover</span>(<span class="hljs-params">d,i</span>) </span>&#123;<br>     d3.event.stopPropagation();<br>     mouse_over_in_action = <span class="hljs-literal">true</span>;<br><br>     <span class="hljs-comment">//1.显示彩色圈圈组的圆环</span><br>     color_hover_circle<br>         .attr(<span class="hljs-string">&quot;cx&quot;</span>, rad_color * <span class="hljs-built_in">Math</span>.cos(d.centerAngle - pi1_2))<br>         .attr(<span class="hljs-string">&quot;cy&quot;</span>, rad_color * <span class="hljs-built_in">Math</span>.sin(d.centerAngle - pi1_2))<br>         .style(<span class="hljs-string">&quot;opacity&quot;</span>, <span class="hljs-number">1</span>);<br><br>     <span class="hljs-comment">//2.章节编号边框变色，突出显示章节甜甜圈切片</span><br>     chapter_hover_slice.filter(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">c, j</span>) </span>&#123; <span class="hljs-keyword">return</span> i === j; &#125;)<br>         .style(<span class="hljs-string">&quot;stroke-width&quot;</span>, chapter_dot_rad * <span class="hljs-number">0.5</span> * <span class="hljs-number">1.5</span>)<br>         .style(<span class="hljs-string">&quot;stroke&quot;</span>, color_sakura);<br>     chapter_dot.filter(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">c, j</span>) </span>&#123; <span class="hljs-keyword">return</span> i === j; &#125;)<br>         .attr(<span class="hljs-string">&quot;r&quot;</span>, chapter_dot_rad * <span class="hljs-number">1.5</span>)<br>         .style(<span class="hljs-string">&quot;stroke-width&quot;</span>, chapter_dot_rad * <span class="hljs-number">0.5</span> * <span class="hljs-number">1.5</span>)<br>         .style(<span class="hljs-string">&quot;fill&quot;</span>, color_sakura);<br>     <br>     <span class="hljs-comment">//3.突出对应的连线</span><br>     ctx.clearRect(-width / <span class="hljs-number">2</span>, -height / <span class="hljs-number">2</span>, width, height);<br>     ctx.lineWidth = <span class="hljs-number">4</span> * size_factor;<br>     ctx.globalAlpha = <span class="hljs-number">1</span>;<br>     create_lines(<span class="hljs-string">&quot;character&quot;</span>, cover_data.filter(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">c</span>) </span>&#123; <span class="hljs-keyword">return</span> c.chapter === i+<span class="hljs-number">1</span>; &#125;));<br><br>     <span class="hljs-comment">//4.突出显示本章中出现的人物</span><br>     <span class="hljs-keyword">var</span> char_chapters = cover_data<br>         .filter(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">c</span>) </span>&#123; <span class="hljs-keyword">return</span> c.chapter === i+<span class="hljs-number">1</span>; &#125;)<br>         .map(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">c</span>) </span>&#123; <span class="hljs-keyword">return</span> c.character; &#125;);<br><br>     names.filter(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">c</span>) </span>&#123; <span class="hljs-keyword">return</span> char_chapters.indexOf(c.character) &lt; <span class="hljs-number">0</span>; &#125;)<br>         .style(<span class="hljs-string">&quot;opacity&quot;</span>, <span class="hljs-number">0.2</span>);<br>     name_dot.filter(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">c</span>) </span>&#123; <span class="hljs-keyword">return</span> char_chapters.indexOf(c.character) &lt; <span class="hljs-number">0</span>; &#125;)<br>         .style(<span class="hljs-string">&quot;opacity&quot;</span>, <span class="hljs-number">0.2</span>);<br><br>     <span class="hljs-comment">//5.在中心显示封面图像</span><br>     cover_image.attr(<span class="hljs-string">&quot;xlink:href&quot;</span>, <span class="hljs-string">&quot;../img/ccs-chapter-&quot;</span> + (i+<span class="hljs-number">1</span>) + <span class="hljs-string">&quot;.jpg&quot;</span>)<br>     cover_circle.style(<span class="hljs-string">&quot;fill&quot;</span>, <span class="hljs-string">&quot;url(#cover-image)&quot;</span>);<br><br> &#125;<span class="hljs-comment">//function mouse_over_cover</span><br><br></code></pre></td></tr></table></figure><h4 id="鼠标移出-5"><a href="#鼠标移出-5" class="headerlink" title="鼠标移出"></a>鼠标移出</h4><p><code>mouse_out</code>增加</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//8.隐藏彩色圈圈组的圆环</span><br>color_hover_circle.style(<span class="hljs-string">&quot;opacity&quot;</span>, <span class="hljs-number">0</span>);<br><br></code></pre></td></tr></table></figure><h3 id="交互mouse-out总结"><a href="#交互mouse-out总结" class="headerlink" title="交互mouse_out总结"></a>交互mouse_out总结</h3><p>总结所有的移出事件，每次移出调用<code>mouse_out</code>函数，整理的到的函数如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">///////////////////////////////////////////////////////////////////////////</span><br><span class="hljs-comment">///////////////////////// 通用的 mouse out 函数 //////////////////////</span><br><span class="hljs-comment">///////////////////////////////////////////////////////////////////////////</span><br><br>container.on(<span class="hljs-string">&quot;mouseout&quot;</span>, mouse_out);<br><br><span class="hljs-comment">//当鼠标触发移出事件时的函数</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">mouse_out</span>(<span class="hljs-params"></span>) </span>&#123;            <br>    <span class="hljs-comment">//只有当之前有鼠标移入之后的移出时，才会运行此功能</span><br>    <span class="hljs-keyword">if</span>(!mouse_over_in_action) <span class="hljs-keyword">return</span>;<br>    mouse_over_in_action = <span class="hljs-literal">false</span>;<br>    <span class="hljs-comment">//1.还原所有的关系</span><br>    relation_lines.style(<span class="hljs-string">&quot;opacity&quot;</span>, <span class="hljs-number">0.7</span>);<br>    <span class="hljs-comment">//2.移除所有的注释</span><br>    annotation_relation_group.selectAll(<span class="hljs-string">&quot;.annotation&quot;</span>).remove();<br>    <span class="hljs-comment">//3.隐藏悬停圆圈</span><br>    hover_circle.style(<span class="hljs-string">&quot;opacity&quot;</span>, <span class="hljs-number">0</span>);<br>    <span class="hljs-comment">//4.移除中心人物的图像</span><br>    cover_circle.style(<span class="hljs-string">&quot;fill&quot;</span>, <span class="hljs-string">&quot;none&quot;</span>);<br>    cover_image.attr(<span class="hljs-string">&quot;xlink:href&quot;</span>, <span class="hljs-string">&quot;../img/white-square.jpg&quot;</span>);<br>    <span class="hljs-comment">//5.恢复章节&amp;人物连线</span><br>    ctx.clearRect(-width / <span class="hljs-number">2</span>, -height / <span class="hljs-number">2</span>, width, height);<br>    ctx.globalAlpha = cover_alpha;<br>    create_lines(<span class="hljs-string">&quot;character&quot;</span>, cover_data);<br>    <span class="hljs-comment">//6.人物名称恢复正常</span><br>    names.style(<span class="hljs-string">&quot;opacity&quot;</span>, <span class="hljs-literal">null</span>);<br>    name_dot.style(<span class="hljs-string">&quot;opacity&quot;</span>, <span class="hljs-literal">null</span>);<br>    <span class="hljs-comment">//7.恢复章节标签</span><br>    chapter_hover_slice.style(<span class="hljs-string">&quot;fill&quot;</span>, <span class="hljs-string">&quot;none&quot;</span>).style(<span class="hljs-string">&quot;stroke&quot;</span>, <span class="hljs-string">&quot;none&quot;</span>);<br>    chapter_number.style(<span class="hljs-string">&quot;fill&quot;</span>, <span class="hljs-literal">null</span>);<br>    chapter_dot<br>        .attr(<span class="hljs-string">&quot;r&quot;</span>, chapter_dot_rad)<br>        .style(<span class="hljs-string">&quot;stroke-width&quot;</span>, chapter_dot_rad * <span class="hljs-number">0.5</span>)<br>        .style(<span class="hljs-string">&quot;fill&quot;</span>, <span class="hljs-string">&quot;#c4c4c4&quot;</span>);<br>    <span class="hljs-comment">//8.隐藏彩色圈圈组的圆环</span><br>    color_hover_circle.style(<span class="hljs-string">&quot;opacity&quot;</span>, <span class="hljs-number">0</span>);<br>&#125;<span class="hljs-comment">//function mouse_out</span><br></code></pre></td></tr></table></figure><h2 id="7-增加注释和一点点细节"><a href="#7-增加注释和一点点细节" class="headerlink" title="7.增加注释和一点点细节"></a>7.增加注释和一点点细节</h2><h3 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h3><p><img src="19.png" alt="image-20210810113705552"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">///////////////////////////////////////////////////////////////////////////</span><br><span class="hljs-comment">//////////////////////// Create captured card labels //////////////////////</span><br><span class="hljs-comment">///////////////////////////////////////////////////////////////////////////</span><br><br><span class="hljs-keyword">var</span> card_group = chart.append(<span class="hljs-string">&quot;g&quot;</span>).attr(<span class="hljs-string">&quot;class&quot;</span>, <span class="hljs-string">&quot;card-group&quot;</span>);<br><br><span class="hljs-comment">//Create a group per character</span><br><span class="hljs-keyword">var</span> card_label = card_group.selectAll(<span class="hljs-string">&quot;.card-label&quot;</span>)<br>    .data(chapter_total_data)<br>    .enter().append(<span class="hljs-string">&quot;text&quot;</span>)<br>    .attr(<span class="hljs-string">&quot;class&quot;</span>, <span class="hljs-string">&quot;card-label&quot;</span>)<br>    .attr(<span class="hljs-string">&quot;dy&quot;</span>, <span class="hljs-string">&quot;.35em&quot;</span>)<br>    .each(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">d,i</span>) </span>&#123;<br>        d.centerAngle = chapter_location_data[d.chapter-<span class="hljs-number">1</span>].centerAngle;<br>    &#125;)<br>    .attr(<span class="hljs-string">&quot;transform&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">d, i</span>) </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;rotate(&quot;</span> + (d.centerAngle * <span class="hljs-number">180</span> / <span class="hljs-built_in">Math</span>.PI - <span class="hljs-number">90</span>) + <span class="hljs-string">&quot;)&quot;</span><br>            + <span class="hljs-string">&quot;translate(&quot;</span> + rad_card_label + <span class="hljs-string">&quot;)&quot;</span><br>            + (d.centerAngle &gt; <span class="hljs-number">0</span> &amp; d.centerAngle &lt; <span class="hljs-built_in">Math</span>.PI ? <span class="hljs-string">&quot;&quot;</span> : <span class="hljs-string">&quot;rotate(180)&quot;</span>);<br>    &#125;)<br>    .style(<span class="hljs-string">&quot;text-anchor&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">d</span>) </span>&#123; <span class="hljs-keyword">return</span> d.centerAngle &gt; <span class="hljs-number">0</span> &amp; d.centerAngle &lt; <span class="hljs-built_in">Math</span>.PI ? <span class="hljs-string">&quot;start&quot;</span> : <span class="hljs-string">&quot;end&quot;</span>; &#125;)<br>    .style(<span class="hljs-string">&quot;font-size&quot;</span>, (<span class="hljs-number">10</span> * size_factor) + <span class="hljs-string">&quot;px&quot;</span>)<br>    .text(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">d, i</span>) </span>&#123; <span class="hljs-keyword">return</span> d.card_captured; &#125;);<br></code></pre></td></tr></table></figure><h3 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h3><p><img src="20.png" alt="image-20210810114145820"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//////////////////////////////////////////////////////////////</span><br>  <span class="hljs-comment">///////////////// Create annotation gradients ////////////////</span><br>  <span class="hljs-comment">//////////////////////////////////////////////////////////////</span><br><br>  <span class="hljs-comment">//Gradient for the titles of the annotations</span><br>  <span class="hljs-keyword">var</span> grad = defs.append(<span class="hljs-string">&quot;linearGradient&quot;</span>)<br>      .attr(<span class="hljs-string">&quot;id&quot;</span>, <span class="hljs-string">&quot;gradient-title&quot;</span>)<br>      .attr(<span class="hljs-string">&quot;x1&quot;</span>, <span class="hljs-string">&quot;0%&quot;</span>).attr(<span class="hljs-string">&quot;y1&quot;</span>, <span class="hljs-string">&quot;0%&quot;</span>)<br>      .attr(<span class="hljs-string">&quot;x2&quot;</span>, <span class="hljs-string">&quot;100%&quot;</span>).attr(<span class="hljs-string">&quot;y2&quot;</span>, <span class="hljs-string">&quot;0%&quot;</span>);<br>  grad.append(<span class="hljs-string">&quot;stop&quot;</span>)<br>      .attr(<span class="hljs-string">&quot;offset&quot;</span>, <span class="hljs-string">&quot;50%&quot;</span>)   <br>      .attr(<span class="hljs-string">&quot;stop-color&quot;</span>, color_sakura);<br>  grad.append(<span class="hljs-string">&quot;stop&quot;</span>)<br>      .attr(<span class="hljs-string">&quot;offset&quot;</span>, <span class="hljs-string">&quot;200%&quot;</span>)   <br>      .attr(<span class="hljs-string">&quot;stop-color&quot;</span>, <span class="hljs-string">&quot;#ED8B6A&quot;</span>);<br><br>  <span class="hljs-comment">//Gradient for the titles of the annotations</span><br>  <span class="hljs-keyword">var</span> grad = defs.append(<span class="hljs-string">&quot;linearGradient&quot;</span>)<br>      .attr(<span class="hljs-string">&quot;id&quot;</span>, <span class="hljs-string">&quot;gradient-title-legend&quot;</span>)<br>      .attr(<span class="hljs-string">&quot;x1&quot;</span>, <span class="hljs-string">&quot;0%&quot;</span>).attr(<span class="hljs-string">&quot;y1&quot;</span>, <span class="hljs-string">&quot;0%&quot;</span>)<br>      .attr(<span class="hljs-string">&quot;x2&quot;</span>, <span class="hljs-string">&quot;100%&quot;</span>).attr(<span class="hljs-string">&quot;y2&quot;</span>, <span class="hljs-string">&quot;0%&quot;</span>);<br>  grad.append(<span class="hljs-string">&quot;stop&quot;</span>)<br>      .attr(<span class="hljs-string">&quot;offset&quot;</span>, <span class="hljs-string">&quot;50%&quot;</span>)   <br>      .attr(<span class="hljs-string">&quot;stop-color&quot;</span>, color_syaoran);<br>  grad.append(<span class="hljs-string">&quot;stop&quot;</span>)<br>      .attr(<span class="hljs-string">&quot;offset&quot;</span>, <span class="hljs-string">&quot;200%&quot;</span>)   <br>      .attr(<span class="hljs-string">&quot;stop-color&quot;</span>, <span class="hljs-string">&quot;#9ABF2B&quot;</span>);<br> <span class="hljs-comment">///////////////////////////////////////////////////////////////////////////</span><br>  <span class="hljs-comment">///////////////////////////// Create annotations //////////////////////////</span><br>  <span class="hljs-comment">///////////////////////////////////////////////////////////////////////////</span><br><br>  <span class="hljs-comment">//Only create annotations when the screen is big enough</span><br>  <span class="hljs-keyword">if</span>(!width_too_small) &#123;<br><br>      <span class="hljs-keyword">var</span> annotations = [<br>          &#123;<br>              <span class="hljs-attr">note</span>: &#123;<br>                  <span class="hljs-attr">label</span>: <span class="hljs-string">&quot;Around the right half of the large circle you can see in which chapter the Clow cards were captured. Sakura was already in possession of Windy and Wood at the start of chapter 1&quot;</span>,<br>                  <span class="hljs-attr">title</span>: <span class="hljs-string">&quot;Clow Cards&quot;</span>,<br>                  <span class="hljs-attr">wrap</span>: <span class="hljs-number">270</span>*size_factor,<br>              &#125;,<br>              <span class="hljs-attr">chapter</span>: <span class="hljs-number">1</span>,<br>              <span class="hljs-attr">extra_rad</span>: <span class="hljs-number">24</span> * size_factor,<br>              <span class="hljs-attr">className</span>: <span class="hljs-string">&quot;note-right note-legend&quot;</span>,<br>              <span class="hljs-attr">x</span>: <span class="hljs-number">151</span> * size_factor,<br>              <span class="hljs-attr">y</span>: -<span class="hljs-number">705</span> * size_factor,<br>              <span class="hljs-attr">cx</span>: <span class="hljs-number">55</span> * size_factor,<br>              <span class="hljs-attr">cy</span>: -<span class="hljs-number">686</span> * size_factor,<br>              <span class="hljs-attr">dx</span>: <span class="hljs-number">5</span> * size_factor,<br>              <span class="hljs-attr">dy</span>: -<span class="hljs-number">5</span> * size_factor<br>          &#125;,&#123;<br>              <span class="hljs-attr">note</span>: &#123;<br>                  <span class="hljs-attr">label</span>: <span class="hljs-string">&quot;These circles reveal the main colors present in each chapter&#x27;s cover art. The size of each circle represents the percentage of the cover image that is captured in that color. All circles from one chapter add up to 100%&quot;</span>,<br>                  <span class="hljs-attr">title</span>: <span class="hljs-string">&quot;Cover art&quot;</span>,<br>                  <span class="hljs-attr">wrap</span>: <span class="hljs-number">270</span>*size_factor,<br>              &#125;,<br>              <span class="hljs-attr">chapter</span>: <span class="hljs-number">1</span>,<br>              <span class="hljs-attr">extra_rad</span>: <span class="hljs-number">55</span> * size_factor,<br>              <span class="hljs-attr">className</span>: <span class="hljs-string">&quot;note-right note-legend&quot;</span>,<br>              <span class="hljs-attr">x</span>: <span class="hljs-number">532</span> * size_factor,<br>              <span class="hljs-attr">y</span>: -<span class="hljs-number">532</span> * size_factor,<br>              <span class="hljs-attr">cx</span>: <span class="hljs-number">412</span> * size_factor,<br>              <span class="hljs-attr">cy</span>: -<span class="hljs-number">493</span> * size_factor,<br>              <span class="hljs-attr">dx</span>: <span class="hljs-number">5</span> * size_factor,<br>              <span class="hljs-attr">dy</span>: -<span class="hljs-number">5</span> * size_factor<br>          &#125;,&#123;<br>              <span class="hljs-attr">note</span>: &#123;<br>                  <span class="hljs-attr">label</span>: <span class="hljs-string">&quot;With the 10 captured cards, Kero teaches Sakura how to do a fortune-telling to get insight into which card is running around town looking like Sakura&quot;</span>,<br>                  <span class="hljs-attr">title</span>: <span class="hljs-string">&quot;Fortune-telling&quot;</span>,<br>                  <span class="hljs-attr">wrap</span>: <span class="hljs-number">205</span>*size_factor,<br>              &#125;,<br>              <span class="hljs-attr">chapter</span>: <span class="hljs-number">11</span>,<br>              <span class="hljs-attr">extra_rad</span>: <span class="hljs-number">30</span> * size_factor,<br>              <span class="hljs-attr">className</span>: <span class="hljs-string">&quot;note-right note-story&quot;</span>,<br>              <span class="hljs-attr">x</span>: <span class="hljs-number">745</span> * size_factor,<br>              <span class="hljs-attr">y</span>: -<span class="hljs-number">115</span> * size_factor,<br>              <span class="hljs-attr">cx</span>: <span class="hljs-number">612</span> * size_factor,<br>              <span class="hljs-attr">cy</span>: -<span class="hljs-number">161</span> * size_factor,<br>              <span class="hljs-attr">dx</span>: <span class="hljs-number">5</span> * size_factor,<br>              <span class="hljs-attr">dy</span>: -<span class="hljs-number">5</span> * size_factor<br>          &#125;,&#123;<br>              <span class="hljs-attr">note</span>: &#123;<br>                  <span class="hljs-attr">label</span>: <span class="hljs-string">&quot;Sakura, Tomoyo and Syaoran are stuck in a maze, when Kaho appears and breaks the walls with her &#x27;Moon Bell&#x27;, guiding the group to the exit&quot;</span>,<br>                  <span class="hljs-attr">title</span>: <span class="hljs-string">&quot;Kaho&#x27;s Bell&quot;</span>,<br>                  <span class="hljs-attr">wrap</span>: <span class="hljs-number">190</span>*size_factor,<br>                  <span class="hljs-attr">padding</span>: <span class="hljs-number">10</span>*size_factor<br>              &#125;,<br>              <span class="hljs-attr">chapter</span>: <span class="hljs-number">15</span>,<br>              <span class="hljs-attr">extra_rad</span>: <span class="hljs-number">22</span> * size_factor,<br>              <span class="hljs-attr">className</span>: <span class="hljs-string">&quot;note-right note-story&quot;</span>,<br>              <span class="hljs-attr">x</span>: <span class="hljs-number">774</span> * size_factor,<br>              <span class="hljs-attr">y</span>: <span class="hljs-number">240</span> * size_factor,<br>              <span class="hljs-attr">cx</span>: <span class="hljs-number">657</span> * size_factor,<br>              <span class="hljs-attr">cy</span>: <span class="hljs-number">170</span> * size_factor,<br>              <span class="hljs-attr">dx</span>: <span class="hljs-number">5</span> * size_factor,<br>              <span class="hljs-attr">dy</span>: -<span class="hljs-number">5</span> * size_factor<br>          &#125;,&#123;<br>              <span class="hljs-attr">note</span>: &#123;<br>                  <span class="hljs-attr">label</span>: <span class="hljs-string">&quot;This chapter is mostly Sakura and Syaoran during their school trip at the beach. While on an evening event in a cave everybody else starts to disappear&quot;</span>,<br>                  <span class="hljs-attr">title</span>: <span class="hljs-string">&quot;Ghost stories&quot;</span>,<br>                  <span class="hljs-attr">wrap</span>: <span class="hljs-number">200</span>*size_factor,<br>                  <span class="hljs-attr">padding</span>: <span class="hljs-number">10</span>*size_factor<br>              &#125;,<br>              <span class="hljs-attr">chapter</span>: <span class="hljs-number">17</span>,<br>              <span class="hljs-attr">extra_rad</span>: <span class="hljs-number">30</span> * size_factor,<br>              <span class="hljs-attr">className</span>: <span class="hljs-string">&quot;note-right note-story&quot;</span>,<br>              <span class="hljs-attr">x</span>: <span class="hljs-number">736</span> * size_factor,<br>              <span class="hljs-attr">y</span>: <span class="hljs-number">407</span> * size_factor,<br>              <span class="hljs-attr">cx</span>: <span class="hljs-number">607</span> * size_factor,<br>              <span class="hljs-attr">cy</span>: <span class="hljs-number">323</span> * size_factor,<br>              <span class="hljs-attr">dx</span>: <span class="hljs-number">5</span> * size_factor,<br>              <span class="hljs-attr">dy</span>: -<span class="hljs-number">5</span> * size_factor<br>          &#125;,&#123;<br>              <span class="hljs-attr">note</span>: &#123;<br>                  <span class="hljs-attr">label</span>: <span class="hljs-string">&quot;Kero can finally return to his full form after Sakura catches the Firey card&quot;</span>,<br>                  <span class="hljs-attr">title</span>: <span class="hljs-string">&quot;Cerberus&quot;</span>,<br>                  <span class="hljs-attr">wrap</span>: <span class="hljs-number">180</span>*size_factor,<br>                  <span class="hljs-attr">padding</span>: <span class="hljs-number">10</span>*size_factor<br>              &#125;,<br>              <span class="hljs-attr">chapter</span>: <span class="hljs-number">23</span>,<br>              <span class="hljs-attr">extra_rad</span>: <span class="hljs-number">30</span> * size_factor,<br>              <span class="hljs-attr">className</span>: <span class="hljs-string">&quot;note-right note-story&quot;</span>,<br>              <span class="hljs-attr">x</span>: <span class="hljs-number">256</span> * size_factor,<br>              <span class="hljs-attr">y</span>: <span class="hljs-number">780</span> * size_factor,<br>              <span class="hljs-attr">cx</span>: <span class="hljs-number">210</span> * size_factor,<br>              <span class="hljs-attr">cy</span>: <span class="hljs-number">650</span> * size_factor,<br>              <span class="hljs-attr">dx</span>: <span class="hljs-number">5</span> * size_factor,<br>              <span class="hljs-attr">dy</span>: -<span class="hljs-number">5</span> * size_factor<br>          &#125;,&#123;<br>              <span class="hljs-attr">note</span>: &#123;<br>                  <span class="hljs-attr">label</span>: <span class="hljs-string">&quot;After the capture of all 19 cards, Yue holds &#x27;the final trial&#x27;. Eventually, he accepts Sakura as the new mistress of the Clow Cards&quot;</span>,<br>                  <span class="hljs-attr">title</span>: <span class="hljs-string">&quot;The final judge&quot;</span>,<br>                  <span class="hljs-attr">wrap</span>: <span class="hljs-number">220</span>*size_factor,<br>                  <span class="hljs-attr">padding</span>: <span class="hljs-number">10</span>*size_factor<br>              &#125;,<br>              <span class="hljs-attr">chapter</span>: <span class="hljs-number">26</span>,<br>              <span class="hljs-attr">extra_rad</span>: <span class="hljs-number">60</span> * size_factor,<br>              <span class="hljs-attr">className</span>: <span class="hljs-string">&quot;note-right note-story&quot;</span>,<br>              <span class="hljs-attr">x</span>: -<span class="hljs-number">10</span> * size_factor,<br>              <span class="hljs-attr">y</span>: <span class="hljs-number">812</span> * size_factor,<br>              <span class="hljs-attr">cx</span>: -<span class="hljs-number">26</span> * size_factor,<br>              <span class="hljs-attr">cy</span>: <span class="hljs-number">634</span> * size_factor,<br>              <span class="hljs-attr">dx</span>: <span class="hljs-number">5</span> * size_factor,<br>              <span class="hljs-attr">dy</span>: -<span class="hljs-number">5</span> * size_factor<br>          &#125;,&#123;<br>              <span class="hljs-attr">note</span>: &#123;<br>                  <span class="hljs-attr">label</span>: <span class="hljs-string">&quot;Around the left half of the large circle you can see in which chapter the Clow cards were converted to Sakura cards&quot;</span>,<br>                  <span class="hljs-attr">title</span>: <span class="hljs-string">&quot;Sakura Cards&quot;</span>,<br>                  <span class="hljs-attr">wrap</span>: <span class="hljs-number">200</span>*size_factor,<br>                  <span class="hljs-attr">padding</span>: <span class="hljs-number">10</span>*size_factor<br>              &#125;,<br>              <span class="hljs-attr">chapter</span>: <span class="hljs-number">29</span>,<br>              <span class="hljs-attr">extra_rad</span>: <span class="hljs-number">25</span> * size_factor,<br>              <span class="hljs-attr">className</span>: <span class="hljs-string">&quot;note-left note-legend&quot;</span>,<br>              <span class="hljs-attr">x</span>: -<span class="hljs-number">291</span> * size_factor,<br>              <span class="hljs-attr">y</span>: <span class="hljs-number">764</span> * size_factor,<br>              <span class="hljs-attr">cx</span>: -<span class="hljs-number">287</span> * size_factor,<br>              <span class="hljs-attr">cy</span>: <span class="hljs-number">624</span> * size_factor,<br>              <span class="hljs-attr">dx</span>: <span class="hljs-number">5</span> * size_factor,<br>              <span class="hljs-attr">dy</span>: -<span class="hljs-number">5</span> * size_factor<br>          &#125;,&#123;<br>              <span class="hljs-attr">note</span>: &#123;<br>                  <span class="hljs-attr">label</span>: <span class="hljs-string">&quot;Syaoran finally understands that it&#x27;s Sakura that he loves, not Yukito&quot;</span>,<br>                  <span class="hljs-attr">title</span>: <span class="hljs-string">&quot;First love&quot;</span>,<br>                  <span class="hljs-attr">wrap</span>: <span class="hljs-number">170</span>*size_factor,<br>                  <span class="hljs-attr">padding</span>: <span class="hljs-number">10</span>*size_factor<br>              &#125;,<br>              <span class="hljs-attr">chapter</span>: <span class="hljs-number">31</span>,<br>              <span class="hljs-attr">extra_rad</span>: <span class="hljs-number">92</span> * size_factor,<br>              <span class="hljs-attr">className</span>: <span class="hljs-string">&quot;note-left note-story&quot;</span>,<br>              <span class="hljs-attr">x</span>: -<span class="hljs-number">460</span> * size_factor,<br>              <span class="hljs-attr">y</span>: <span class="hljs-number">655</span> * size_factor,<br>              <span class="hljs-attr">cx</span>: -<span class="hljs-number">406</span> * size_factor,<br>              <span class="hljs-attr">cy</span>: <span class="hljs-number">485</span> * size_factor,<br>              <span class="hljs-attr">dx</span>: <span class="hljs-number">5</span> * size_factor,<br>              <span class="hljs-attr">dy</span>: -<span class="hljs-number">5</span> * size_factor<br>          &#125;,&#123;<br>              <span class="hljs-attr">note</span>: &#123;<br>                  <span class="hljs-attr">label</span>: <span class="hljs-string">&quot;The Fly transforms to give Sakura herself wings to fly, instead of her staff&quot;</span>,<br>                  <span class="hljs-attr">title</span>: <span class="hljs-string">&quot;Fly&quot;</span>,<br>                  <span class="hljs-attr">wrap</span>: <span class="hljs-number">230</span>*size_factor,<br>              &#125;,<br>              <span class="hljs-attr">chapter</span>: <span class="hljs-number">32</span>,<br>              <span class="hljs-attr">extra_rad</span>: <span class="hljs-number">27</span> * size_factor,<br>              <span class="hljs-attr">className</span>: <span class="hljs-string">&quot;note-left note-story&quot;</span>,<br>              <span class="hljs-attr">x</span>: -<span class="hljs-number">598</span> * size_factor,<br>              <span class="hljs-attr">y</span>: <span class="hljs-number">556</span> * size_factor,<br>              <span class="hljs-attr">cx</span>: -<span class="hljs-number">515</span> * size_factor,<br>              <span class="hljs-attr">cy</span>: <span class="hljs-number">485</span> * size_factor,<br>              <span class="hljs-attr">dx</span>: <span class="hljs-number">5</span> * size_factor,<br>              <span class="hljs-attr">dy</span>: -<span class="hljs-number">5</span> * size_factor<br>          &#125;,&#123;<br>              <span class="hljs-attr">note</span>: &#123;<br>                  <span class="hljs-attr">label</span>: <span class="hljs-string">&quot;Toya gives his magical powers to Yue (and thus also Yukito) to keep them from disappearing because Sakura doesn&#x27;t yet have enough magic herself to sustain them&quot;</span>,<br>                  <span class="hljs-attr">title</span>: <span class="hljs-string">&quot;Toya&#x27;s gift&quot;</span>,<br>                  <span class="hljs-attr">wrap</span>: <span class="hljs-number">180</span>*size_factor,<br>                  <span class="hljs-attr">padding</span>: <span class="hljs-number">10</span>*size_factor<br>              &#125;,<br>              <span class="hljs-attr">chapter</span>: <span class="hljs-number">38</span>,<br>              <span class="hljs-attr">extra_rad</span>: <span class="hljs-number">50</span> * size_factor,<br>              <span class="hljs-attr">className</span>: <span class="hljs-string">&quot;note-left note-story&quot;</span>,<br>              <span class="hljs-attr">x</span>: -<span class="hljs-number">785</span> * size_factor,<br>              <span class="hljs-attr">y</span>: <span class="hljs-number">148</span> * size_factor,<br>              <span class="hljs-attr">cx</span>: -<span class="hljs-number">700</span> * size_factor,<br>              <span class="hljs-attr">cy</span>: <span class="hljs-number">12</span> * size_factor,<br>              <span class="hljs-attr">dx</span>: <span class="hljs-number">5</span> * size_factor,<br>              <span class="hljs-attr">dy</span>: -<span class="hljs-number">5</span> * size_factor<br>          &#125;,&#123;<br>              <span class="hljs-attr">note</span>: &#123;<br>                  <span class="hljs-attr">label</span>: <span class="hljs-string">&quot;Sakura and Syaoran use their magic together to defeat Eriol&#x27;s bronze horse&quot;</span>,<br>                  <span class="hljs-attr">title</span>: <span class="hljs-string">&quot;Teamwork&quot;</span>,<br>                  <span class="hljs-attr">wrap</span>: <span class="hljs-number">200</span>*size_factor,<br>              &#125;,<br>              <span class="hljs-attr">chapter</span>: <span class="hljs-number">42</span>,<br>              <span class="hljs-attr">extra_rad</span>: <span class="hljs-number">30</span> * size_factor,<br>              <span class="hljs-attr">className</span>: <span class="hljs-string">&quot;note-left note-story&quot;</span>,<br>              <span class="hljs-attr">x</span>: -<span class="hljs-number">735</span> * size_factor,<br>              <span class="hljs-attr">y</span>: -<span class="hljs-number">366</span> * size_factor,<br>              <span class="hljs-attr">cx</span>: -<span class="hljs-number">695</span> * size_factor,<br>              <span class="hljs-attr">cy</span>: -<span class="hljs-number">370</span> * size_factor,<br>              <span class="hljs-attr">dx</span>: <span class="hljs-number">5</span> * size_factor,<br>              <span class="hljs-attr">dy</span>: -<span class="hljs-number">5</span> * size_factor<br>          &#125;,&#123;<br>              <span class="hljs-attr">note</span>: &#123;<br>                  <span class="hljs-attr">label</span>: <span class="hljs-string">&quot;Sakura &#x27;defeats&#x27; Eriol and has now transformed all the Clow cards into Sakura cards&quot;</span>,<br>                  <span class="hljs-attr">title</span>: <span class="hljs-string">&quot;The strongest magician&quot;</span>,<br>                  <span class="hljs-attr">wrap</span>: <span class="hljs-number">270</span>*size_factor,<br>              &#125;,<br>              <span class="hljs-attr">chapter</span>: <span class="hljs-number">44</span>,<br>              <span class="hljs-attr">extra_rad</span>: <span class="hljs-number">30</span> * size_factor,<br>              <span class="hljs-attr">className</span>: <span class="hljs-string">&quot;note-left note-story&quot;</span>,<br>              <span class="hljs-attr">x</span>: -<span class="hljs-number">596</span> * size_factor,<br>              <span class="hljs-attr">y</span>: -<span class="hljs-number">577</span> * size_factor,<br>              <span class="hljs-attr">cx</span>: -<span class="hljs-number">593</span> * size_factor,<br>              <span class="hljs-attr">cy</span>: -<span class="hljs-number">560</span> * size_factor,<br>              <span class="hljs-attr">dx</span>: <span class="hljs-number">5</span> * size_factor,<br>              <span class="hljs-attr">dy</span>: -<span class="hljs-number">5</span> * size_factor<br>          &#125;,&#123;<br>              <span class="hljs-attr">note</span>: &#123;<br>                  <span class="hljs-attr">label</span>: <span class="hljs-string">&quot;Sakura realizes she loves Syaoran the most, right before he leaves for the airport to move back home to Hong Kong&quot;</span>,<br>                  <span class="hljs-attr">title</span>: <span class="hljs-string">&quot;True love&quot;</span>,<br>                  <span class="hljs-attr">wrap</span>: <span class="hljs-number">240</span>*size_factor,<br>              &#125;,<br>              <span class="hljs-attr">chapter</span>: <span class="hljs-number">50</span>,<br>              <span class="hljs-attr">extra_rad</span>: <span class="hljs-number">30</span> * size_factor,<br>              <span class="hljs-attr">className</span>: <span class="hljs-string">&quot;note-left note-story&quot;</span>,<br>              <span class="hljs-attr">x</span>: -<span class="hljs-number">125</span> * size_factor,<br>              <span class="hljs-attr">y</span>: -<span class="hljs-number">660</span> * size_factor,<br>              <span class="hljs-attr">cx</span>: -<span class="hljs-number">48</span> * size_factor,<br>              <span class="hljs-attr">cy</span>: -<span class="hljs-number">633</span> * size_factor,<br>              <span class="hljs-attr">dx</span>: <span class="hljs-number">5</span> * size_factor,<br>              <span class="hljs-attr">dy</span>: -<span class="hljs-number">5</span> * size_factor<br>          &#125;<br>      ];<br><br>      <span class="hljs-comment">//Set-up the annotation maker</span><br>      <span class="hljs-keyword">var</span> makeAnnotations = d3.annotation()<br>          <span class="hljs-comment">//.editMode(true)</span><br>          .type(d3.annotationLabel)<br>          .annotations(annotations);<br><br>      <span class="hljs-comment">//Call and create the textual part of the annotations</span><br>      <span class="hljs-keyword">var</span> annotation_group = chart.append(<span class="hljs-string">&quot;g&quot;</span>).attr(<span class="hljs-string">&quot;class&quot;</span>, <span class="hljs-string">&quot;annotation-group&quot;</span>);<br>      annotation_group.call(makeAnnotations);<br>  <br>      <span class="hljs-comment">//Update a few stylings</span><br>      annotation_group.selectAll(<span class="hljs-string">&quot;.note-line, .connector&quot;</span>)<br>          .style(<span class="hljs-string">&quot;stroke&quot;</span>, <span class="hljs-string">&quot;none&quot;</span>);<br>      annotation_group.selectAll(<span class="hljs-string">&quot;.annotation-note-title&quot;</span>)<br>          .style(<span class="hljs-string">&quot;fill&quot;</span>, <span class="hljs-string">&quot;url(#gradient-title)&quot;</span>);<br><br>      <span class="hljs-comment">//Create my own radially pointing connector lines</span><br>      <span class="hljs-keyword">var</span> annotation_connector_group = annotation_group.append(<span class="hljs-string">&quot;g&quot;</span>, <span class="hljs-string">&quot;annotation-connectors&quot;</span>);<br>      annotations.forEach(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">d,i</span>) </span>&#123;<br>          <span class="hljs-keyword">var</span> angle = <span class="hljs-built_in">Math</span>.atan(d.cy/d.cx);<br>          <span class="hljs-keyword">if</span>(d.cx &lt; <span class="hljs-number">0</span>) angle = -<span class="hljs-built_in">Math</span>.atan(d.cy/-d.cx) + <span class="hljs-built_in">Math</span>.PI;<br>          annotation_connector_group.append(<span class="hljs-string">&quot;line&quot;</span>)<br>              .attr(<span class="hljs-string">&quot;class&quot;</span>, <span class="hljs-string">&quot;connector-manual &quot;</span> + d.className)<br>              .attr(<span class="hljs-string">&quot;x1&quot;</span>, d.cx)<br>              .attr(<span class="hljs-string">&quot;y1&quot;</span>, d.cy)<br>              .attr(<span class="hljs-string">&quot;x2&quot;</span>, d.cx + d.extra_rad * <span class="hljs-built_in">Math</span>.cos(angle) )<br>              .attr(<span class="hljs-string">&quot;y2&quot;</span>, d.cy + d.extra_rad * <span class="hljs-built_in">Math</span>.sin(angle) )<br>              .style(<span class="hljs-string">&quot;stroke-width&quot;</span>, <span class="hljs-number">2</span> * size_factor)<br>              .style(<span class="hljs-string">&quot;stroke-linecap&quot;</span>, <span class="hljs-string">&quot;round&quot;</span>)<br>              .style(<span class="hljs-string">&quot;stroke&quot;</span>, color_sakura);<br>      &#125;);<br><br>      <span class="hljs-comment">//Turn the legend based annotations green</span><br>      annotation_group.selectAll(<span class="hljs-string">&quot;.note-legend .annotation-note-title&quot;</span>)<br>          .style(<span class="hljs-string">&quot;fill&quot;</span>, <span class="hljs-string">&quot;url(#gradient-title-legend)&quot;</span>);<br>      annotation_connector_group.selectAll(<span class="hljs-string">&quot;.note-legend&quot;</span>)<br>          .style(<span class="hljs-string">&quot;stroke&quot;</span>, color_syaoran);<br><br>      <span class="hljs-comment">//Add circles to the legend annotations</span><br>      <span class="hljs-keyword">var</span> annotation_circle_group = annotation_group.append(<span class="hljs-string">&quot;g&quot;</span>, <span class="hljs-string">&quot;annotation-circles&quot;</span>);<br>      <span class="hljs-comment">//Add circle to first clow card                       </span><br>      annotation_circle_group.append(<span class="hljs-string">&quot;circle&quot;</span>)<br>          .attr(<span class="hljs-string">&quot;class&quot;</span>, <span class="hljs-string">&quot;annotation-circle&quot;</span>)<br>          .attr(<span class="hljs-string">&quot;cx&quot;</span>, <span class="hljs-number">50</span> * size_factor)<br>          .attr(<span class="hljs-string">&quot;cy&quot;</span>, -<span class="hljs-number">655</span> * size_factor)<br>          .attr(<span class="hljs-string">&quot;r&quot;</span>, <span class="hljs-number">25</span> * size_factor);<br><br>      <span class="hljs-comment">//Add circle to cover art annotation</span><br>      annotation_circle_group.append(<span class="hljs-string">&quot;circle&quot;</span>)<br>          .attr(<span class="hljs-string">&quot;class&quot;</span>, <span class="hljs-string">&quot;annotation-circle&quot;</span>)<br>          .attr(<span class="hljs-string">&quot;cx&quot;</span>, rad_color * <span class="hljs-built_in">Math</span>.cos(chapter_location_data[<span class="hljs-number">5</span>].centerAngle - pi1_2))<br>          .attr(<span class="hljs-string">&quot;cy&quot;</span>, rad_color * <span class="hljs-built_in">Math</span>.sin(chapter_location_data[<span class="hljs-number">5</span>].centerAngle - pi1_2))<br>          .attr(<span class="hljs-string">&quot;r&quot;</span>, <span class="hljs-number">38</span> * size_factor);<br>      <br>      <span class="hljs-comment">//Add circle to first sakura card                       </span><br>      annotation_circle_group.append(<span class="hljs-string">&quot;circle&quot;</span>)<br>          .attr(<span class="hljs-string">&quot;class&quot;</span>, <span class="hljs-string">&quot;annotation-circle&quot;</span>)<br>          .attr(<span class="hljs-string">&quot;cx&quot;</span>, -<span class="hljs-number">273</span> * size_factor)<br>          .attr(<span class="hljs-string">&quot;cy&quot;</span>, <span class="hljs-number">596</span> * size_factor)<br>          .attr(<span class="hljs-string">&quot;r&quot;</span>, <span class="hljs-number">25</span> * size_factor);<br><br>      annotation_circle_group.selectAll(<span class="hljs-string">&quot;.annotation-circle&quot;</span>)<br>          .style(<span class="hljs-string">&quot;stroke-dasharray&quot;</span>, <span class="hljs-string">&quot;0,&quot;</span> + (<span class="hljs-number">6</span> * size_factor))<br>          .style(<span class="hljs-string">&quot;stroke-width&quot;</span>, <span class="hljs-number">2.5</span> * size_factor)<br>          .style(<span class="hljs-string">&quot;stroke&quot;</span>, color_syaoran);<br><br>      <span class="hljs-comment">//Make it possible to show/hide the annotations</span><br>      <span class="hljs-keyword">var</span> show_annotations = <span class="hljs-literal">true</span>;<br>      d3.select(<span class="hljs-string">&quot;#story-annotation&quot;</span>)<br>          .style(<span class="hljs-string">&quot;opacity&quot;</span>, <span class="hljs-number">1</span>)<br>          .on(<span class="hljs-string">&quot;click&quot;</span>, spoiler_click);<br><br>      <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">spoiler_click</span>(<span class="hljs-params"></span>) </span>&#123;<br>          show_annotations = !show_annotations;<br>          annotation_group.selectAll(<span class="hljs-string">&quot;.note-story&quot;</span>)<br>              .style(<span class="hljs-string">&quot;opacity&quot;</span>, show_annotations ? <span class="hljs-number">1</span> : <span class="hljs-number">0</span>);<br>          d3.select(<span class="hljs-string">&quot;#hide-show&quot;</span>).html(show_annotations ? <span class="hljs-string">&quot;hide&quot;</span> : <span class="hljs-string">&quot;show&quot;</span>);<br>      &#125;<span class="hljs-comment">//function spoiler_click</span><br><br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-comment">//Hide the annotation mentions in the intro</span><br>      d3.select(<span class="hljs-string">&quot;#annotation-explanation&quot;</span>).style(<span class="hljs-string">&quot;display&quot;</span>,<span class="hljs-string">&quot;none&quot;</span>);<br>  &#125;<span class="hljs-comment">//else</span><br></code></pre></td></tr></table></figure><p><img src="21.png" alt="image-20210810114503061"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">///////////////////////////////////////////////////////////////////////////</span><br> <span class="hljs-comment">///////////////////////// Create line title label /////////////////////////</span><br> <span class="hljs-comment">/////////////////////////////////////////////////////////////////////////// </span><br><br> <span class="hljs-keyword">var</span> line_label_group = chart.append(<span class="hljs-string">&quot;g&quot;</span>).attr(<span class="hljs-string">&quot;class&quot;</span>, <span class="hljs-string">&quot;line-label-group&quot;</span>);<br><br> <span class="hljs-comment">//Define the arc on which to draw the label text</span><br> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">label_arc</span>(<span class="hljs-params">angle</span>) </span>&#123;<br>     <span class="hljs-keyword">var</span> x1 = rad_line_label * <span class="hljs-built_in">Math</span>.cos(angle + <span class="hljs-number">0.01</span> - pi1_2),<br>         y1 = rad_line_label * <span class="hljs-built_in">Math</span>.sin(angle + <span class="hljs-number">0.01</span> - pi1_2);<br>     <span class="hljs-keyword">var</span> x2 = rad_line_label * <span class="hljs-built_in">Math</span>.cos(angle - <span class="hljs-number">0.01</span> - pi1_2),<br>         y2 = rad_line_label * <span class="hljs-built_in">Math</span>.sin(angle - <span class="hljs-number">0.01</span> - pi1_2);<br>     <span class="hljs-keyword">if</span> (angle / <span class="hljs-built_in">Math</span>.PI &gt; <span class="hljs-number">0.5</span> &amp;&amp; angle / <span class="hljs-built_in">Math</span>.PI &lt; <span class="hljs-number">1.5</span>) &#123;<br>         <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;M&quot;</span> + x1 + <span class="hljs-string">&quot;,&quot;</span> + y1 + <span class="hljs-string">&quot; A&quot;</span> + rad_line_label + <span class="hljs-string">&quot;,&quot;</span> + rad_line_label + <span class="hljs-string">&quot; 0 1 1 &quot;</span> + x2 + <span class="hljs-string">&quot;,&quot;</span> + y2;<br>     &#125; <span class="hljs-keyword">else</span> &#123;<br>         <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;M&quot;</span> + x2 + <span class="hljs-string">&quot;,&quot;</span> + y2 + <span class="hljs-string">&quot; A&quot;</span> + rad_line_label + <span class="hljs-string">&quot;,&quot;</span> + rad_line_label + <span class="hljs-string">&quot; 0 1 0 &quot;</span> + x1 + <span class="hljs-string">&quot;,&quot;</span> + y1;<br>     &#125;<span class="hljs-comment">//else</span><br> &#125;<span class="hljs-comment">//function label_arc</span><br><br> <span class="hljs-comment">//Create the paths along which the pillar labels will run</span><br> <span class="hljs-keyword">var</span> line_label_path = line_label_group.append(<span class="hljs-string">&quot;path&quot;</span>)<br>     .attr(<span class="hljs-string">&quot;class&quot;</span>, <span class="hljs-string">&quot;line-label-path&quot;</span>)<br>     .attr(<span class="hljs-string">&quot;id&quot;</span>, <span class="hljs-string">&quot;line-label-path&quot;</span>)<br>     .attr(<span class="hljs-string">&quot;d&quot;</span>, label_arc(characterByName[<span class="hljs-string">&quot;Sakura&quot;</span>].name_angle))<br>     .style(<span class="hljs-string">&quot;fill&quot;</span>, <span class="hljs-string">&quot;none&quot;</span>)<br>     .style(<span class="hljs-string">&quot;display&quot;</span>, <span class="hljs-string">&quot;none&quot;</span>);<br><br> <span class="hljs-comment">//Create the label text</span><br> <span class="hljs-keyword">var</span> default_label_text = <span class="hljs-string">&quot;currently, these lines show which characters appear on the chapter&#x27;s cover art&quot;</span>;<br> <span class="hljs-keyword">var</span> line_label = line_label_group.append(<span class="hljs-string">&quot;text&quot;</span>)<br>     .attr(<span class="hljs-string">&quot;class&quot;</span>, <span class="hljs-string">&quot;line-label&quot;</span>)<br>     .attr(<span class="hljs-string">&quot;dy&quot;</span>, <span class="hljs-string">&quot;0.35em&quot;</span>)<br>     .style(<span class="hljs-string">&quot;text-anchor&quot;</span>, <span class="hljs-string">&quot;middle&quot;</span>)<br>     .style(<span class="hljs-string">&quot;font-size&quot;</span>, (<span class="hljs-number">14</span> * size_factor) + <span class="hljs-string">&quot;px&quot;</span>)<br>     .append(<span class="hljs-string">&quot;textPath&quot;</span>)<br>     .attr(<span class="hljs-string">&quot;xlink:href&quot;</span>, <span class="hljs-string">&quot;#line-label-path&quot;</span>)<br>     .attr(<span class="hljs-string">&quot;startOffset&quot;</span>, <span class="hljs-string">&quot;50%&quot;</span>)<br>     .text(default_label_text);<br></code></pre></td></tr></table></figure><h3 id="帮助函数"><a href="#帮助函数" class="headerlink" title="帮助函数"></a>帮助函数</h3><p>使用到的一些帮助函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//////////////////////////////////////////////////////////////</span><br><span class="hljs-comment">////////////////////// 帮助函数  //////////////////////</span><br><span class="hljs-comment">//////////////////////////////////////////////////////////////</span><br><br><span class="hljs-comment">// RGB 到 CMYK颜色转换 &quot;circle radii&quot;</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">rgbToCMYK</span>(<span class="hljs-params">rgb</span>) </span>&#123;<br>    <span class="hljs-keyword">var</span> r = rgb.r / <span class="hljs-number">255</span>,<br>        g = rgb.g / <span class="hljs-number">255</span>,<br>        b = rgb.b / <span class="hljs-number">255</span>,<br>        k = <span class="hljs-number">1</span> - <span class="hljs-built_in">Math</span>.max(r, g, b);<br><br>    <span class="hljs-keyword">return</span> &#123;<br>        <span class="hljs-attr">cyan</span>: (<span class="hljs-number">1</span> - r - k) / (<span class="hljs-number">1</span> - k),<br>        <span class="hljs-attr">magenta</span>: (<span class="hljs-number">1</span> - g - k) / (<span class="hljs-number">1</span> - k),<br>        <span class="hljs-attr">yellow</span>: (<span class="hljs-number">1</span> - b - k) / (<span class="hljs-number">1</span> - k),<br>        <span class="hljs-attr">black</span>: k<br>    &#125;;<br>&#125;<span class="hljs-comment">//function rgbToCMYK</span><br><span class="hljs-comment">//生成随机数</span><br><span class="hljs-keyword">var</span> seed = <span class="hljs-number">4</span>;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">random</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-keyword">var</span> x = <span class="hljs-built_in">Math</span>.sin(seed++) * <span class="hljs-number">10000</span>;<br>    <span class="hljs-keyword">return</span> x - <span class="hljs-built_in">Math</span>.floor(x);<br>&#125;<span class="hljs-comment">//function random</span><br><span class="hljs-comment">//首字母大写函数</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">capitalizeFirstLetter</span>(<span class="hljs-params">string</span>) </span>&#123;<br>    <span class="hljs-keyword">return</span> string.charAt(<span class="hljs-number">0</span>).toUpperCase() + string.slice(<span class="hljs-number">1</span>);<br>&#125;<span class="hljs-comment">//function capitalizeFirstLetter</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>D3</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>百变小樱一——相关API介绍</title>
    <link href="/2021/08/06/%E7%99%BE%E5%8F%98%E5%B0%8F%E6%A8%B1%E4%B8%80%E2%80%94%E2%80%94%E7%9B%B8%E5%85%B3API%E4%BB%8B%E7%BB%8D/"/>
    <url>/2021/08/06/%E7%99%BE%E5%8F%98%E5%B0%8F%E6%A8%B1%E4%B8%80%E2%80%94%E2%80%94%E7%9B%B8%E5%85%B3API%E4%BB%8B%E7%BB%8D/</url>
    
    <content type="html"><![CDATA[<h1 id="百变小樱一——相关API介绍"><a href="#百变小樱一——相关API介绍" class="headerlink" title="百变小樱一——相关API介绍"></a>百变小樱一——相关API介绍</h1><h2 id="Windows-API"><a href="#Windows-API" class="headerlink" title="Windows API"></a>Windows API</h2><h3 id="window-scroll-X-Y-："><a href="#window-scroll-X-Y-：" class="headerlink" title="window.scroll(X,Y)："></a>window.scroll(X,Y)：</h3><p>X代表着X轴滚动多少px，Y代表着Y轴滚动多少</p><h3 id="window-pageYOffset："><a href="#window-pageYOffset：" class="headerlink" title="window.pageYOffset："></a>window.pageYOffset：</h3><p>返回文档在垂直方向已滚动的像素值。</p><h3 id="window-innerWidth"><a href="#window-innerWidth" class="headerlink" title="window.innerWidth"></a>window.innerWidth</h3><p>只读的 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Window"><code>Window</code></a> 属性 <code>**innerWidth**</code> 返回以像素为单位的窗口的内部宽度。如果垂直滚动条存在，则这个属性将包括它的宽度</p><h3 id="document-body-style-width"><a href="#document-body-style-width" class="headerlink" title="document.body.style.width"></a>document.body.style.width</h3><p>body标签的宽度</p><h2 id="D3-API"><a href="#D3-API" class="headerlink" title="D3 API"></a>D3 API</h2><h3 id="selection-node"><a href="#selection-node" class="headerlink" title="selection.node"></a><a href="https://d3-wiki.readthedocs.io/zh_CN/master/%E9%80%89%E6%8B%A9%E5%99%A8#node">selection.node</a></h3><p>返回选择中的第一个节点。</p><h3 id="d3-queue"><a href="#d3-queue" class="headerlink" title="d3.queue()"></a>d3.queue()</h3><p>函数用于创建指定大小的队列。</p><h3 id="d3-queue-defer-task-arguments…"><a href="#d3-queue-defer-task-arguments…" class="headerlink" title="d3.queue.defer(task[, arguments…])"></a>d3.queue.defer(task[, arguments…])</h3><p>**task:**这是要执行以执行特定任务的功能。</p><h3 id="d3-queue-await-error-…"><a href="#d3-queue-await-error-…" class="headerlink" title="d3.queue.await(error,…)"></a>d3.queue.await(error,…)</h3><p>执行完所有的task之后执行的回调函数，第一个参数是error，后面是任务（task）的结果</p><h3 id="d3-json"><a href="#d3-json" class="headerlink" title="d3.json"></a><a href="https://d3-wiki.readthedocs.io/zh_CN/master/%E8%AF%B7%E6%B1%82#d3_json">d3.json</a></h3><p>请求一个JSON对象。</p><h3 id="d3-stratify"><a href="#d3-stratify" class="headerlink" title="d3.stratify()"></a>d3.stratify()</h3><p>转为层次结构数据</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> root = d3.stratify()<br>    .id(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">d</span>) </span>&#123; <span class="hljs-keyword">return</span> d.name; &#125;)<br>    .parentId(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">d</span>) </span>&#123; <span class="hljs-keyword">return</span> d.parent; &#125;)<br>    (table);<br></code></pre></td></tr></table></figure><h3 id="d3-cluster-lt-源码-gt-opens-new-window"><a href="#d3-cluster-lt-源码-gt-opens-new-window" class="headerlink" title="#d3.cluster() &lt;源码&gt;(opens new window)"></a><a href="https://d3js.org.cn/document/d3-hierarchy/#cluster">#</a>d3.<strong>cluster</strong>() <a href="https://github.com/d3/d3-hierarchy/blob/master/src/cluster.js">&lt;源码&gt;(opens new window)</a></h3><p>使用默认的配置创建一个新的系统树布局</p><p>如果要生成一个 <a href="http://bl.ocks.org/mbostock/4739610f6d96aaad2fb1e78a72b385ab">radial layout(径向布局) (opens new window)</a>则可以将其设置为 [360, <em>radius</em>] 用以表示角度范围为 <code>360°</code> 并且半径为 <em>radius</em>。</p><h3 id="cluster-separation-separation-lt-源码-gt-opens-new-window"><a href="#cluster-separation-separation-lt-源码-gt-opens-new-window" class="headerlink" title="cluster.separation([separation]) &lt;源码&gt;(opens new window)"></a><em>cluster</em>.<strong>separation</strong>([<em>separation</em>]) <a href="https://github.com/d3/d3-hierarchy/blob/master/src/cluster.js#L71">&lt;源码&gt;(opens new window)</a></h3><p>如果指定了 <em>seperation</em>, 则设置间隔访问器为指定的函数并返回当前系统树布局。</p><h3 id="node-leaves-lt-源码-gt-opens-new-window"><a href="#node-leaves-lt-源码-gt-opens-new-window" class="headerlink" title="# node.leaves() &lt;源码&gt;(opens new window)"></a><a href="https://d3js.org.cn/document/d3-hierarchy/#node_leaves">#</a> <em>node</em>.<strong>leaves</strong>() <a href="https://github.com/d3/d3-hierarchy/blob/master/src/hierarchy/leaves.js">&lt;源码&gt;(opens new window)</a></h3><p>返回叶节点数组，叶节点是没有孩子节点的节点。</p><h3 id="d3-forceSimulation-nodes-lt-gt-opens-new-window"><a href="#d3-forceSimulation-nodes-lt-gt-opens-new-window" class="headerlink" title="# d3.forceSimulation([nodes]) &lt;&gt;(opens new window)"></a><a href="https://d3js.org.cn/document/d3-force/#forceSimulation">#</a> d3.<strong>forceSimulation</strong>([<em>nodes</em>]) <a href="https://github.com/d3/d3-force/blob/master/src/simulation.js">&lt;&gt;(opens new window)</a></h3><p>使用指定的 <a href="https://d3js.org.cn/document/d3-force/#simulation_nodes"><em>nodes</em></a> 创建一个新的没有任何 <a href="https://d3js.org.cn/document/d3-force/#simulation_force">forces(力模型)</a> 的仿真。如果没有指定 <em>nodes</em> 则默认为空数组。仿真会自动 <a href="https://d3js.org.cn/document/d3-force/#simulation_restart">starts(启动)</a>；使用 <a href="https://d3js.org.cn/document/d3-force/#simulation_on"><em>simulation</em>.on</a> 来监听仿真运行过程中的 <code>tick</code> 事件。如果你想手动运行仿真，则需要调用 <a href="https://d3js.org.cn/document/d3-force/#simulation_stop"><em>simulation</em>.stop</a> 然后根据需求调用 <a href="https://d3js.org.cn/document/d3-force/#simulation_tick"><em>simulation</em>.tick</a>。</p><h3 id="simulation-force-name-force-lt-gt-opens-new-window"><a href="#simulation-force-name-force-lt-gt-opens-new-window" class="headerlink" title="# simulation.force(name[, force]) &lt;&gt;(opens new window)"></a><a href="https://d3js.org.cn/document/d3-force/#simulation_force">#</a> <em>simulation</em>.<strong>force</strong>(<em>name</em>[, <em>force</em>]) <a href="https://github.com/d3/d3-force/blob/master/src/simulation.js#L112">&lt;&gt;(opens new window)</a></h3><p>如果指定了 <em>force</em> 则表示为仿真添加指定 <em>name</em> 的 <a href="https://d3js.org.cn/document/d3-force/#forces">力模型</a> 并返回仿真。如果没有指定 <em>force</em> 则返回当前仿真的对应 <em>name</em> 的力模型，如果没有对应的 <em>name</em> 则返回 <code>undefined</code>。 (默认情况下仿真没有任何力模型，需要手动添加)。例如创建一个用来对图进行布局的仿真，可以如下</p><h3 id="d3-forceX-x-lt-gt-opens-new-window"><a href="#d3-forceX-x-lt-gt-opens-new-window" class="headerlink" title="# d3.forceX([x]) &lt;&gt;(opens new window)"></a><a href="https://d3js.org.cn/document/d3-force/#forceX">#</a> d3.<strong>forceX</strong>([<em>x</em>]) <a href="https://github.com/d3/d3-force/blob/master/src/x.js">&lt;&gt;(opens new window)</a></h3><p>根据指定的 <a href="https://d3js.org.cn/document/d3-force/#x_x"><em>x</em></a> 创建一个沿着 <em>x</em>-轴 方向的新的定位力模型。如果 <em>x</em> 没有指定则默认为 0.</p><h3 id="x-strength-strength-lt-gt-opens-new-window"><a href="#x-strength-strength-lt-gt-opens-new-window" class="headerlink" title="# x.strength([strength]) &lt;&gt;(opens new window)"></a><a href="https://d3js.org.cn/document/d3-force/#x_strength">#</a> <em>x</em>.<strong>strength</strong>([<em>strength</em>]) <a href="https://github.com/d3/d3-force/blob/master/src/x.js#L32">&lt;&gt;(opens new window)</a></h3><p>如果指定了 <em>strength</em> 则将强度访问器设置为指定的数值或者方法，强度访问器会为每个节点进行调用，并返回当前力模型。<em>strength</em> 决定了节点 <em>x</em>-速度的增量: (<a href="https://d3js.org.cn/document/d3-force/#x_x"><em>x</em></a> - <em>node</em>.x) × <em>strength</em>. 例如值为 0.1 时表示节点在每次应用时应该从当前 <em>x</em>-位置向目标 <em>x</em>-位置移动十分之一。值越大则移动的越快，但是会牺牲其他力模型或者约束。不建议使用 [0, 1] 之外的值。</p><h3 id="d3-forceCollide-radius-lt-gt-opens-new-window"><a href="#d3-forceCollide-radius-lt-gt-opens-new-window" class="headerlink" title="# d3.forceCollide([radius]) &lt;&gt;(opens new window)"></a><a href="https://d3js.org.cn/document/d3-force/#forceCollide">#</a> d3.<strong>forceCollide</strong>([<em>radius</em>]) <a href="https://github.com/d3/d3-force/blob/master/src/collide.js">&lt;&gt;(opens new window)</a></h3><p>根据指定的 <a href="https://d3js.org.cn/document/d3-force/#collide_radius"><em>radius</em></a> 创建一个新的圆形区域的碰撞检测。如果没有指定 <em>radius</em> 则默认所有的节点半径都为 1.</p><h3 id="simulation-on-typenames-listener-lt-gt-opens-new-window"><a href="#simulation-on-typenames-listener-lt-gt-opens-new-window" class="headerlink" title="# simulation.on(typenames, [listener]) &lt;&gt;(opens new window)"></a><a href="https://d3js.org.cn/document/d3-force/#simulation_on">#</a> <em>simulation</em>.<strong>on</strong>(<em>typenames</em>, [<em>listener</em>]) <a href="https://github.com/d3/d3-force/blob/master/src/simulation.js#L139">&lt;&gt;(opens new window)</a></h3><p>如果指定了 <em>listener</em> 则将其指定的 <em>typenames</em> 的回调。如果对应的 <em>typenames</em> 已经存在事件监听器，则将其替换。如果 <em>listener</em> 为 <code>null</code> 则表示移除对应 <em>typenames</em> 的事件监听器。如果没有指定 <em>listener</em> 则返回第一个符合条件的 <em>typenames</em> 对应的事件监听器，当指定的事件触发时，每个回调都会被调用，回调中 <code>this</code> 指向仿真本身。</p><p><em>typenames</em> 可以由多个由空格隔开的 <em>typename</em>。每个 <em>typename</em> 都由 <em>type</em> 和可选的 <em>name</em> 组成，用 (<code>.</code>) 连接。比如 <code>tick.foo</code> 和 <code>tick.bar</code>。也就是可以为同一种事件类型注册多个事件监听器。其中 <em>type</em> 必须为以下几种:</p><ul><li><code>tick</code> - 仿真内部定时器每次 <code>tick</code> 之后。</li><li><code>end</code> - 当 <em>alpha</em> &lt; <a href="https://d3js.org.cn/document/d3-force/#simulation_alphaMin"><em>alphaMin</em></a> 时仿真内部定时器停止。</li></ul><h3 id="d3-timer-callback-delay-time-lt-gt-opens-new-window"><a href="#d3-timer-callback-delay-time-lt-gt-opens-new-window" class="headerlink" title="d3.timer(callback[, delay[, time]]) &lt;&gt;(opens new window)"></a>d3.<strong>timer</strong>(<em>callback</em>[, <em>delay</em>[, <em>time</em>]]) <a href="https://github.com/d3/d3-timer/blob/master/src/timer.js#L52">&lt;&gt;(opens new window)</a></h3><p>定义一个新的定时器，然后重复执行指定的 <em>callback</em> 直到定时器被 <a href="https://d3js.org.cn/document/d3-timer/#timer_stop">stopped</a>。可选的数值类型 <em>delay</em> 单位为毫秒可以用来指定调用 <em>callback</em> 的延迟时间，如果没有指定 <em>delay</em> 则默认为 0。延迟时间相对于指定的 <em>time</em> (ms)，如果没有指定 <em>time</em> 则默认为 <a href="https://d3js.org.cn/document/d3-timer/#now">now</a>.</p><p><em>callback</em> 参数为 <em>elapsed</em> 以表示自从定时器被激活后过去的时间(表面上的)。例如:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> t = d3.timer(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">elapsed</span>) </span>&#123;<br>  <span class="hljs-built_in">console</span>.log(elapsed);<br>  <span class="hljs-keyword">if</span> (elapsed &gt; <span class="hljs-number">200</span>) t.stop();<br>&#125;, <span class="hljs-number">150</span>);<br></code></pre></td></tr></table></figure><h2 id="Canvas-API"><a href="#Canvas-API" class="headerlink" title="Canvas API"></a>Canvas API</h2><h3 id="getContext"><a href="#getContext" class="headerlink" title="getContext"></a>getContext</h3><p>canvas.getContext(‘2d’); </p><p><code>canvas.getContext(&#39;2d&#39;)</code>方法让我们拿到一个<code>CanvasRenderingContext2D</code>对象，所有的绘图操作都需要通过这个对象完成。</p><p>如果需要绘制3D怎么办？HTML5还有一个WebGL规范，允许在Canvas中绘制3D图形：<code> canvas.getContext(&quot;webgl&quot;);</code></p><h3 id="CanvasRenderingContext2D-globalCompositeOperation"><a href="#CanvasRenderingContext2D-globalCompositeOperation" class="headerlink" title="CanvasRenderingContext2D.globalCompositeOperation"></a>CanvasRenderingContext2D.globalCompositeOperation</h3><p>绘制新形状时应用的合成操作的类型，将顶层像素与底层相应像素相乘，结果是一幅更黑暗的图片</p><p><img src="C:\Users\liyu\AppData\Roaming\Typora\typora-user-images\image-20210808153439384.png" alt="image-20210808153439384"></p><h3 id="CanvasRenderingContext2D-lineCap"><a href="#CanvasRenderingContext2D-lineCap" class="headerlink" title="CanvasRenderingContext2D.lineCap"></a>CanvasRenderingContext2D.lineCap</h3><p>是 Canvas 2D API 指定如何绘制每一条线段末端的属性。有3个可能的值，分别是：<code>butt</code>, <code>round</code> and <code>square</code>。默认值是 `butt。</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">ctx.lineCap</span> = <span class="hljs-string">&quot;round&quot;</span><span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><p><code>round</code>线段末端以圆形结束。</p><h3 id="CanvasRenderingContext2D-lineWidth"><a href="#CanvasRenderingContext2D-lineWidth" class="headerlink" title="CanvasRenderingContext2D.lineWidth"></a>CanvasRenderingContext2D.lineWidth</h3><p>是 Canvas 2D API 设置线段厚度的属性（即线段的宽度）。</p><h2 id="SVG-API"><a href="#SVG-API" class="headerlink" title="SVG API"></a>SVG API</h2><h3 id="lt-pattern-gt-元素"><a href="#lt-pattern-gt-元素" class="headerlink" title="&lt;pattern&gt;元素"></a><code>&lt;pattern&gt;</code>元素</h3><p>SVG使用<code>&lt;pattern&gt;</code>元素来定义模式。 用于以平铺方式填充图形元素。</p><p>​    属性：<code>patternUnits</code></p><p>​    用来定义图案效果区域的单位。 它为模式内的各种长度值以及定义模式子区域的属性指定坐标系。 如果<code>patternUnits =“userSpaceOnUse”</code>，则值表示使用<code>&#39;pattern&#39;</code>元素时当前用户坐标系中的值。 如果<code>patternUnits =“objectBoundingBox”</code>，则值表示在使用<code>&#39;pattern&#39;</code>元素时就地引用元素上的边界框的分数或百分比的值。 默认是<code>userSpaceOnUse</code>。//原文出自【易百教程】，商业转载请联系作者获得授权，非商业转载请保留原文链接：<a href="https://www.yiibai.com/svg/svg_patterns.html">https://www.yiibai.com/svg/svg_patterns.html</a> </p>]]></content>
    
    
    
    <tags>
      
      <tag>D3</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【Vue】响应式二——Prox代理与源码分析</title>
    <link href="/2021/07/24/%E3%80%90Vue%E3%80%91%E5%93%8D%E5%BA%94%E5%BC%8F%E4%BA%8C%E2%80%94%E2%80%94Prox%E4%BB%A3%E7%90%86%E4%B8%8E%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    <url>/2021/07/24/%E3%80%90Vue%E3%80%91%E5%93%8D%E5%BA%94%E5%BC%8F%E4%BA%8C%E2%80%94%E2%80%94Prox%E4%BB%A3%E7%90%86%E4%B8%8E%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</url>
    
    <content type="html"><![CDATA[<h1 id="【Vue】响应式二——代理（Proxy）模式实现与源码分析"><a href="#【Vue】响应式二——代理（Proxy）模式实现与源码分析" class="headerlink" title="【Vue】响应式二——代理（Proxy）模式实现与源码分析"></a>【Vue】响应式二——代理（<a href="https://es6.ruanyifeng.com/#docs/proxy">Proxy</a>）模式实现与源码分析</h1><p>在上一篇文章中谈到了使用<code>Object.defineProperty() getters/setters</code>实现响应式（Vue 2.6），这部分会从上一部分扩展到另一种响应式的实现方式Proxy 实现（Vue 2.X-next ）。</p><p>”Proxy 用于修改某些操作的默认行为，等同于在语言层面做出修改，所以属于一种“元编程”（meta programming），即对编程语言进行编程。</p><p>Proxy 可以理解成，在目标对象之前架设一层“拦截”，外界对该对象的访问，都必须先通过这层拦截，因此提供了一种机制，可以对外界的访问进行过滤和改写。Proxy 这个词的原意是代理，用在这里表示由它来“代理”某些操作，可以译为“代理器”。“——《ECMAScript6入门》</p><h2 id="Proxy相比Object-defineProperty-有什么优势呢？"><a href="#Proxy相比Object-defineProperty-有什么优势呢？" class="headerlink" title="Proxy相比Object.defineProperty 有什么优势呢？"></a><code>Proxy</code>相比<code>Object.defineProperty</code> 有什么优势呢？</h2><p>1.<strong>Object.definedProperty</strong>的作用是劫持一个对象的属性，在对象的属性发生变化时进行特定的操作。而   Proxy劫持的是整个对象。可以使我们摆脱<code>set()</code> <code>get()</code> <code>deleteProperty()</code>的限制。</p><p>2.Proxy可以支持数组的各种API，<strong>Object.definedProperty</strong>不支持数组，更准确的说是不支持数组的各种API。</p><p>上一篇文章中我们实现的<code>Object.defineProperty</code> 代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> data = &#123; <span class="hljs-attr">price</span>: <span class="hljs-number">5</span>, <span class="hljs-attr">quantity</span>: <span class="hljs-number">2</span> &#125;;<br>   <span class="hljs-keyword">let</span> target = <span class="hljs-literal">null</span>;<br>   <br>   <span class="hljs-comment">// Our simple Dep class</span><br>   <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Dep</span> </span>&#123;<br>     <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params"></span>)</span> &#123;<br>       <span class="hljs-built_in">this</span>.subscribers = [];<br>     &#125;<br>     <span class="hljs-function"><span class="hljs-title">depend</span>(<span class="hljs-params"></span>)</span> &#123;<br>       <span class="hljs-keyword">if</span> (target &amp;&amp; !<span class="hljs-built_in">this</span>.subscribers.includes(target)) &#123;<br>         <span class="hljs-comment">// Only if there is a target &amp; it&#x27;s not already subscribed</span><br>         <span class="hljs-built_in">this</span>.subscribers.push(target);<br>       &#125;<br>     &#125;<br>     <span class="hljs-function"><span class="hljs-title">notify</span>(<span class="hljs-params"></span>)</span> &#123;<br>       <span class="hljs-built_in">this</span>.subscribers.forEach(<span class="hljs-function"><span class="hljs-params">sub</span> =&gt;</span> sub());<br>     &#125;<br>   &#125;<br>   <br>   <span class="hljs-comment">// Go through each of our data properties</span><br>   <span class="hljs-built_in">Object</span>.keys(data).forEach(<span class="hljs-function"><span class="hljs-params">key</span> =&gt;</span> &#123;<br>     <span class="hljs-keyword">let</span> internalValue = data[key];<br>   <br>     <span class="hljs-comment">// Each property gets a dependency instance</span><br>     <span class="hljs-keyword">const</span> dep = <span class="hljs-keyword">new</span> Dep();<br>   <br>     <span class="hljs-built_in">Object</span>.defineProperty(data, key, &#123;<br>       <span class="hljs-function"><span class="hljs-title">get</span>(<span class="hljs-params"></span>)</span> &#123;<br>         dep.depend(); <span class="hljs-comment">// &lt;-- Remember the target we&#x27;re running</span><br>         <span class="hljs-keyword">return</span> internalValue;<br>       &#125;,<br>       <span class="hljs-function"><span class="hljs-title">set</span>(<span class="hljs-params">newVal</span>)</span> &#123;<br>         internalValue = newVal;<br>         dep.notify(); <span class="hljs-comment">// &lt;-- Re-run stored functions</span><br>       &#125;<br>     &#125;);<br>   &#125;);<br>   <br>   <span class="hljs-comment">// The code to watch to listen for reactive properties</span><br>   <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">watcher</span>(<span class="hljs-params">myFunc</span>) </span>&#123;<br>     target = myFunc;<br>     target();<br>     target = <span class="hljs-literal">null</span>;<br>   &#125;<br>   <br>   watcher(<span class="hljs-function">() =&gt;</span> &#123;<br>     data.total = data.price * data.quantity;<br>   &#125;);<br>   <br>   <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;total = &quot;</span> + data.total)<br>   data.price = <span class="hljs-number">20</span><br>   <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;total = &quot;</span> + data.total)<br>   data.quantity = <span class="hljs-number">10</span><br>   <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;total = &quot;</span> + data.total)<br></code></pre></td></tr></table></figure><h2 id="Proxy响应系统的实现"><a href="#Proxy响应系统的实现" class="headerlink" title="Proxy响应系统的实现"></a>Proxy响应系统的实现</h2><h3 id="我也要试一试！"><a href="#我也要试一试！" class="headerlink" title="我也要试一试！"></a><strong><a href="https://codepen.io/GreggPollack/pen/gKogaE?editors=0010">我也要试一试！</a></strong></h3><h3 id="代理的定义声明："><a href="#代理的定义声明：" class="headerlink" title="代理的定义声明："></a>代理的定义声明：</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//data is our source object being observed</span><br> <span class="hljs-keyword">const</span> observedData = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Proxy</span>(data, &#123; <br>   <span class="hljs-function"><span class="hljs-title">get</span>(<span class="hljs-params"></span>)</span> &#123;<br>     <span class="hljs-comment">//invoked when property from source data object is accessed</span><br>   &#125;,<br>   <span class="hljs-function"><span class="hljs-title">set</span>(<span class="hljs-params"></span>)</span> &#123;<br>     <span class="hljs-comment">//invoked when property from source data object is modified</span><br>   &#125;,<br>   <span class="hljs-function"><span class="hljs-title">deleteProperty</span>(<span class="hljs-params"></span>)</span> &#123;<br>     <span class="hljs-comment">//invoked when property from source data object is deleted</span><br>   &#125;<br> &#125;);<br></code></pre></td></tr></table></figure><h3 id="为每一个需要响应的属性创建Dep类，需要增加的代码："><a href="#为每一个需要响应的属性创建Dep类，需要增加的代码：" class="headerlink" title="为每一个需要响应的属性创建Dep类，需要增加的代码："></a>为每一个需要响应的属性创建<code>Dep</code>类，需要增加的代码：</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> deps = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Map</span>(); <span class="hljs-comment">// Let&#x27;s store all of our data&#x27;s deps in a map</span><br> <span class="hljs-built_in">Object</span>.keys(data).forEach(<span class="hljs-function"><span class="hljs-params">key</span> =&gt;</span> &#123;<br>   <span class="hljs-comment">// Each property gets a dependency instance</span><br>   deps.set(key, <span class="hljs-keyword">new</span> Dep());<br> &#125;);<br></code></pre></td></tr></table></figure><h3 id="代理实现："><a href="#代理实现：" class="headerlink" title="代理实现："></a>代理实现：</h3><p>我们使用代理替换 ：<code>Dep</code> <code>Object.defineProperty</code></p><p><strong>get(obj, key)</strong> 访问属性时调用，</p><p>参数：<code>obj</code> 对象  <code>key</code> 关键字    </p><p>返回值 ：对象属性的值</p><p><strong>set(obj, key, newVal)</strong> 修改属性时调用</p><p>参数：<code>obj</code> 对象  <code>key</code> 关键字    <code>newVal</code>属性新值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> data_without_proxy = data; <span class="hljs-comment">// Save old data object</span><br>  data = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Proxy</span>(data_without_proxy, &#123;<br>    <span class="hljs-comment">// Override data to have a proxy in the middle</span><br>    <span class="hljs-function"><span class="hljs-title">get</span>(<span class="hljs-params">obj, key</span>)</span> &#123;<br>      deps.get(key).depend(); <span class="hljs-comment">// &lt;-- Remember the target we&#x27;re running</span><br>      <span class="hljs-keyword">return</span> obj[key]; <span class="hljs-comment">// call original data</span><br>    &#125;,<br>    <span class="hljs-function"><span class="hljs-title">set</span>(<span class="hljs-params">obj, key, newVal</span>)</span> &#123;<br>      obj[key] = newVal; <span class="hljs-comment">// Set original data to new value</span><br>      deps.get(key).notify(); <span class="hljs-comment">// &lt;-- Re-run stored functions</span><br>      <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>  &#125;);<br></code></pre></td></tr></table></figure><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>测试输出：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> total = <span class="hljs-number">0</span>;<br>watcher(<span class="hljs-function">() =&gt;</span> &#123;<br>  total = data.price * data.quantity;<br>&#125;);<br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;total = &quot;</span> + total);<br>data.price = <span class="hljs-number">20</span>;<br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;total = &quot;</span> + total);<br>data.quantity = <span class="hljs-number">10</span>;<br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;total = &quot;</span> + total);<br></code></pre></td></tr></table></figure><p>尝试添加属性：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript">deps.set(<span class="hljs-string">&quot;discount&quot;</span>, <span class="hljs-keyword">new</span> Dep());  <span class="hljs-comment">// Need a new dep for our property</span><br>data[<span class="hljs-string">&quot;discount&quot;</span>] = <span class="hljs-number">5</span>; <span class="hljs-comment">// Add our new property</span><br><br><span class="hljs-keyword">let</span> salePrice = <span class="hljs-number">0</span>; <br><br>watcher(<span class="hljs-function">() =&gt;</span> &#123;  <span class="hljs-comment">// New code to watch which includes our reactive property</span><br>  salePrice = data.price - data.discount;<br>&#125;);<br><br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;salePrice = &quot;</span> + salePrice);<br>data.discount = <span class="hljs-number">7.5</span>;  <span class="hljs-comment">// This should be reactive, and rerun the watcher.</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;salePrice = &quot;</span> + salePrice);<br></code></pre></td></tr></table></figure><h3 id="完整的Proxy代码："><a href="#完整的Proxy代码：" class="headerlink" title="完整的Proxy代码："></a>完整的<code>Proxy</code>代码：</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> data = &#123; <span class="hljs-attr">price</span>: <span class="hljs-number">5</span>, <span class="hljs-attr">quantity</span>: <span class="hljs-number">2</span> &#125;;<br><span class="hljs-keyword">let</span> target = <span class="hljs-literal">null</span>;<br><br><span class="hljs-comment">// Our simple Dep class</span><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Dep</span> </span>&#123;<br>  <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params"></span>)</span> &#123;<br>    <span class="hljs-built_in">this</span>.subscribers = [];<br>  &#125;<br>  <span class="hljs-function"><span class="hljs-title">depend</span>(<span class="hljs-params"></span>)</span> &#123;<br>    <span class="hljs-keyword">if</span> (target &amp;&amp; !<span class="hljs-built_in">this</span>.subscribers.includes(target)) &#123;<br>      <span class="hljs-comment">// Only if there is a target &amp; it&#x27;s not already subscribed</span><br>      <span class="hljs-built_in">this</span>.subscribers.push(target);<br>    &#125;<br>  &#125;<br>  <span class="hljs-function"><span class="hljs-title">notify</span>(<span class="hljs-params"></span>)</span> &#123;<br>    <span class="hljs-built_in">this</span>.subscribers.forEach(<span class="hljs-function"><span class="hljs-params">sub</span> =&gt;</span> sub());<br>  &#125; <br>&#125;<br><br><span class="hljs-keyword">let</span> deps = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Map</span>(); <span class="hljs-comment">// Let&#x27;s store all of our data&#x27;s deps in a map</span><br><br><span class="hljs-built_in">Object</span>.keys(data).forEach(<span class="hljs-function"><span class="hljs-params">key</span> =&gt;</span> &#123;<br>  <span class="hljs-comment">// Each property gets a dependency instance</span><br>  deps.set(key, <span class="hljs-keyword">new</span> Dep());<br>&#125;);<br><br><span class="hljs-keyword">let</span> data_without_proxy = data <span class="hljs-comment">// Save old data object</span><br><br>data = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Proxy</span>(data_without_proxy, &#123;  <span class="hljs-comment">// Override data to have a proxy in the middle</span><br>  <span class="hljs-function"><span class="hljs-title">get</span>(<span class="hljs-params">obj, key</span>)</span> &#123;<br>    deps.get(key).depend(); <span class="hljs-comment">// &lt;-- Remember the target we&#x27;re running</span><br>    <span class="hljs-keyword">return</span> obj[key]; <span class="hljs-comment">// call original data</span><br>  &#125;,<br><br>  <span class="hljs-function"><span class="hljs-title">set</span>(<span class="hljs-params">obj, key, newVal</span>)</span> &#123;<br>    obj[key] = newVal; <span class="hljs-comment">// Set original data to new value</span><br>    deps.get(key).notify(); <span class="hljs-comment">// &lt;-- Re-run stored functions</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>  &#125;<br>&#125;);<br><br><br><span class="hljs-comment">// The code to watch to listen for reactive properties</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">watcher</span>(<span class="hljs-params">myFunc</span>) </span>&#123;<br>  target = myFunc;<br>  target();<br>  target = <span class="hljs-literal">null</span>;<br>&#125;<br><br><span class="hljs-keyword">let</span> total = <span class="hljs-number">0</span><br><br>watcher(<span class="hljs-function">() =&gt;</span> &#123;<br>  total = data.price * data.quantity;<br>&#125;);<br><br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;total = &quot;</span> + total); <br>data.price = <span class="hljs-number">20</span>;<br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;total = &quot;</span> + total);<br>data.quantity = <span class="hljs-number">10</span>;<br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;total = &quot;</span> + total);<br><br>deps.set(<span class="hljs-string">&#x27;discount&#x27;</span>, <span class="hljs-keyword">new</span> Dep())<br>data[<span class="hljs-string">&#x27;discount&#x27;</span>] = <span class="hljs-number">5</span>;<br><br><span class="hljs-keyword">let</span> salePrice = <span class="hljs-number">0</span>;<br><br>watcher(<span class="hljs-function">() =&gt;</span> &#123;<br>  salePrice = data.price - data.discount;<br>&#125;);<br><br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;salePrice = &quot;</span> + salePrice); <br>data.discount = <span class="hljs-number">7.5</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;salePrice = &quot;</span> + salePrice); <br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【纯js+vue】两种方式实现markdown编辑器</title>
    <link href="/2021/07/20/%E3%80%90%E7%BA%AFjs-vue%E3%80%91%E4%B8%A4%E7%A7%8D%E6%96%B9%E5%BC%8F%E5%AE%9E%E7%8E%B0markdown%E7%BC%96%E8%BE%91%E5%99%A8/"/>
    <url>/2021/07/20/%E3%80%90%E7%BA%AFjs-vue%E3%80%91%E4%B8%A4%E7%A7%8D%E6%96%B9%E5%BC%8F%E5%AE%9E%E7%8E%B0markdown%E7%BC%96%E8%BE%91%E5%99%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="【纯js-vue】两种方式实现markdown编辑器"><a href="#【纯js-vue】两种方式实现markdown编辑器" class="headerlink" title="【纯js+vue】两种方式实现markdown编辑器"></a>【纯js+vue】两种方式实现markdown编辑器</h1><h3 id="点我尝试"><a href="#点我尝试" class="headerlink" title="点我尝试!"></a><u><strong><a href="https://potatomother.github.io/MyPage/potatomd/">点我尝试!</a></strong></u></h3><h2 id="纯js实现"><a href="#纯js实现" class="headerlink" title="纯js实现"></a>纯js实现</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;utf-8&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;https://cdnjs.cloudflare.com/ajax/libs/highlight.js/9.15.10/styles/default.min.css&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdnjs.cloudflare.com/ajax/libs/highlight.js/9.15.10/highlight.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.bootcdn.net/ajax/libs/marked/2.1.3/marked.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="css"></span><br><span class="css"><span class="hljs-selector-tag">html</span>,</span><br><span class="css"><span class="hljs-selector-tag">body</span>,</span><br><span class="css"><span class="hljs-selector-id">#editor</span> &#123;</span><br><span class="css">  <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span>;</span><br><span class="css">  <span class="hljs-attribute">height</span>: <span class="hljs-number">100%</span>;</span><br><span class="css">  <span class="hljs-attribute">font-family</span>: <span class="hljs-string">&quot;Helvetica Neue&quot;</span>,Arial,sans-serif;</span><br><span class="css">  <span class="hljs-attribute">color</span>:<span class="hljs-number">#333</span>;</span><br><span class="css">&#125;</span><br><span class="css"><span class="hljs-selector-tag">textarea</span>,</span><br><span class="css"><span class="hljs-selector-id">#editor</span> <span class="hljs-selector-tag">div</span>&#123;</span><br><span class="css">  <span class="hljs-attribute">display</span> :inline-block;</span><br><span class="css">  <span class="hljs-attribute">width</span>:<span class="hljs-number">49%</span>;</span><br><span class="css">  <span class="hljs-attribute">height</span>: <span class="hljs-number">100%</span>;</span><br><span class="css">  <span class="hljs-attribute">vertical-align</span>: top;</span><br><span class="css">  <span class="hljs-attribute">box-sizing</span>: border-box;</span><br><span class="css">  <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span> <span class="hljs-number">20px</span>;</span><br><span class="css">&#125;</span><br><span class="css"><span class="hljs-selector-tag">textarea</span>&#123;</span><br><span class="css">  <span class="hljs-attribute">border</span>: none;</span><br><span class="css">  <span class="hljs-attribute">border-right</span>: <span class="hljs-number">1px</span> solid <span class="hljs-number">#ccc</span>;</span><br><span class="css">  <span class="hljs-attribute">resize</span>: none;</span><br><span class="css">  <span class="hljs-attribute">outline</span>: none;</span><br><span class="css">  <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#f6f6f6</span>;</span><br><span class="css">  <span class="hljs-attribute">font-size</span>:<span class="hljs-number">14px</span>;</span><br><span class="css">  <span class="hljs-attribute">font-family</span>: <span class="hljs-string">&quot;Monaco&quot;</span>,courier,monospace;</span><br><span class="css">  <span class="hljs-attribute">padding</span>: <span class="hljs-number">20px</span>;</span><br><span class="css">&#125;</span><br><span class="css"><span class="hljs-selector-tag">code</span>&#123;</span><br><span class="css">  <span class="hljs-attribute">color</span>:<span class="hljs-number">#f66</span>;</span><br><span class="css">&#125;</span><br><span class="css"></span><br><span class="css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;editor&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">textarea</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;in&quot;</span> <span class="hljs-attr">onkeydown</span>=<span class="hljs-string">&quot;update(this)&quot;</span>&gt;</span># Hello<br>```<br>let a =&#x27;代码框测试&#x27;<br>请在这里输入代码<br>```<br>  <span class="hljs-tag">&lt;/<span class="hljs-name">textarea</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;out&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript"><span class="hljs-keyword">let</span> input=<span class="hljs-string">&#x27;&#x27;</span>;<span class="hljs-comment">//输入</span></span><br><span class="javascript"> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">compiledMarkdown</span>(<span class="hljs-params">input</span>) </span>&#123;</span><br><span class="javascript">hljs.initHighlightingOnLoad();</span><br><span class="javascript"><span class="hljs-built_in">console</span>.log(input);</span><br><span class="javascript">  <span class="hljs-comment">// hljs.registerLanguage(&#x27;javascript&#x27;,javascript);</span></span><br><span class="javascript">  <span class="hljs-keyword">return</span> marked(input,&#123;</span><br><span class="javascript">    <span class="hljs-function"><span class="hljs-title">highlight</span>(<span class="hljs-params">code</span>)</span>&#123;</span><br><span class="javascript">      <span class="hljs-keyword">return</span> hljs.highlightAuto(code).value;</span><br><span class="javascript">    &#125;</span><br><span class="javascript">  &#125;).replace(<span class="hljs-regexp">/&lt;pre&gt;/g</span>, <span class="hljs-string">&quot;&lt;pre class=&#x27;hljs&#x27;&gt;&quot;</span>);</span><br><span class="javascript">&#125;</span><br><span class="javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">update</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">input=<span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&#x27;in&#x27;</span>).value;</span><br><span class="javascript"><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&#x27;in&#x27;</span>).value)</span><br><span class="javascript"><span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&#x27;out&#x27;</span>).innerHTML=compiledMarkdown(input);  </span><br><span class="javascript">&#125;</span><br><span class="javascript">update();</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br><br></code></pre></td></tr></table></figure><h2 id="vue实现"><a href="#vue实现" class="headerlink" title="vue实现"></a>vue实现</h2><p>1.html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;editor&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">textarea</span> <span class="hljs-attr">:value</span>=<span class="hljs-string">&quot;input&quot;</span> @<span class="hljs-attr">input</span>=<span class="hljs-string">&quot;update&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">textarea</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-html</span>=<span class="hljs-string">&quot;compiledMarkdown&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><p>2.css</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">html</span>,<br><span class="hljs-selector-tag">body</span>,<br><span class="hljs-selector-id">#editor</span> &#123;<br>  <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">100%</span>;<br>  <span class="hljs-attribute">font-family</span>: <span class="hljs-string">&quot;Helvetica Neue&quot;</span>,Arial,sans-serif;<br>  <span class="hljs-attribute">color</span>:<span class="hljs-number">#333</span>;<br>&#125;<br><span class="hljs-selector-tag">textarea</span>,<br><span class="hljs-selector-id">#editor</span> <span class="hljs-selector-tag">div</span>&#123;<br>  <span class="hljs-attribute">display</span> :inline-block;<br>  <span class="hljs-attribute">width</span>:<span class="hljs-number">49%</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">100%</span>;<br>  <span class="hljs-attribute">vertical-align</span>: top;<br>  <span class="hljs-attribute">box-sizing</span>: border-box;<br>  <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span> <span class="hljs-number">20px</span>;<br>&#125;<br><span class="hljs-selector-tag">textarea</span>&#123;<br>  <span class="hljs-attribute">border</span>: none;<br>  <span class="hljs-attribute">border-right</span>: <span class="hljs-number">1px</span> solid <span class="hljs-number">#ccc</span>;<br>  <span class="hljs-attribute">resize</span>: none;<br>  <span class="hljs-attribute">outline</span>: none;<br>  <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#f6f6f6</span>;<br>  <span class="hljs-attribute">font-size</span>:<span class="hljs-number">14px</span>;<br>  <span class="hljs-attribute">font-family</span>: <span class="hljs-string">&quot;Monaco&quot;</span>,courier,monospace;<br>  <span class="hljs-attribute">padding</span>: <span class="hljs-number">20px</span>;<br>&#125;<br><span class="hljs-selector-tag">code</span>&#123;<br>  <span class="hljs-attribute">color</span>:<span class="hljs-number">#f66</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>3.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> _ <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;lodash&quot;</span><br><span class="hljs-keyword">import</span> marked <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;marked&quot;</span><br><span class="hljs-keyword">import</span> highlight <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;highlight.js&quot;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;highlight.js/styles/stackoverflow-dark.css&#x27;</span>;<br><span class="hljs-keyword">import</span> javascript <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;highlight.js/lib/languages/javascript&quot;</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;App&#x27;</span>,<br>  <span class="hljs-function"><span class="hljs-title">data</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-keyword">return</span>&#123;<br>      <span class="hljs-attr">input</span>: <span class="hljs-string">&#x27;# hello&#x27;</span><br>    &#125;<br>  &#125;,<br>  <span class="hljs-attr">computed</span>: &#123;<br>    <span class="hljs-attr">compiledMarkdown</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>      highlight.registerLanguage(<span class="hljs-string">&#x27;javascript&#x27;</span>,javascript);<br>      <span class="hljs-keyword">return</span> marked(<span class="hljs-built_in">this</span>.input,&#123;<br>        <span class="hljs-function"><span class="hljs-title">highlight</span>(<span class="hljs-params">code</span>)</span>&#123;<br>          <span class="hljs-keyword">return</span> highlight.highlightAuto(code).value;<br>        &#125;,<br>        <span class="hljs-attr">sanitize</span>:<span class="hljs-literal">true</span><br>      &#125;).replace(<span class="hljs-regexp">/&lt;pre&gt;/g</span>, <span class="hljs-string">&quot;&lt;pre class=&#x27;hljs&#x27;&gt;&quot;</span>);<br>    &#125;<br>  &#125;,<br>  <span class="hljs-attr">methods</span>: &#123;<br>    <span class="hljs-attr">update</span>: _.debounce(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">e</span>) </span>&#123;<br>      <span class="hljs-built_in">this</span>.input = e.target.value<br>    &#125;,<span class="hljs-number">300</span>)<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="小tips"><a href="#小tips" class="headerlink" title="小tips"></a>小tips</h2><h3 id="1-代码没有高亮"><a href="#1-代码没有高亮" class="headerlink" title="1.代码没有高亮"></a>1.代码没有高亮</h3><p>纯js实现中使用官网的方法引用</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;https://cdnjs.cloudflare.com/ajax/libs/highlight.js/9.15.10/styles/default.min.css&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdnjs.cloudflare.com/ajax/libs/highlight.js/9.15.10/highlight.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="2-代码块没有背景"><a href="#2-代码块没有背景" class="headerlink" title="2.代码块没有背景"></a>2.代码块没有背景</h3><p>翻阅了一些资料，给出一个可以用的方法</p><p>highlight.js 会给代码块标记上hljs 类，进行处理，但是我这里他并没有自动标记<code>&lt;pre&gt;</code>标签中的class，所以使用字符串替换的方式，进行标注，代码块背景就可以显示了</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript">marked(input,&#123;<br>    <span class="hljs-function"><span class="hljs-title">highlight</span>(<span class="hljs-params">code</span>)</span>&#123;<br>      <span class="hljs-keyword">return</span> hljs.highlightAuto(code).value;<br>    &#125;<br>  &#125;).replace(<span class="hljs-regexp">/&lt;pre&gt;/g</span>, <span class="hljs-string">&quot;&lt;pre class=&#x27;hljs&#x27;&gt;&quot;</span>)<br></code></pre></td></tr></table></figure><h3 id="3-总结"><a href="#3-总结" class="headerlink" title="3.总结"></a>3.总结</h3><p>marked.js用于处理      marked文本到页面html的转义</p><p>highlight.js用于处理    代码块的高亮问题</p><h3 id="4-小问题"><a href="#4-小问题" class="headerlink" title="4.小问题"></a>4.小问题</h3><p>会有xss的危险，marked.js被没有相关处理，需要增加这个功能。</p>]]></content>
    
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【Vue】响应式 双向数据绑定</title>
    <link href="/2021/07/15/%E3%80%90vue%E3%80%91%E5%93%8D%E5%BA%94%E5%BC%8F-%E5%8F%8C%E5%90%91%E6%95%B0%E6%8D%AE%E7%BB%91%E5%AE%9A/"/>
    <url>/2021/07/15/%E3%80%90vue%E3%80%91%E5%93%8D%E5%BA%94%E5%BC%8F-%E5%8F%8C%E5%90%91%E6%95%B0%E6%8D%AE%E7%BB%91%E5%AE%9A/</url>
    
    <content type="html"><![CDATA[<h1 id="vue响应式-双向数据绑定"><a href="#vue响应式-双向数据绑定" class="headerlink" title="vue响应式 双向数据绑定"></a>vue响应式 双向数据绑定</h1><p>vue程序中，当值发生改变，它会做三件事：</p><ol><li><p>更新网页上的值<code>price</code></p></li><li><p>计算新的表达式，更新页面<code>price*code</code></p></li><li><p>再次调用功能并更新页面<code>totalPriWithTax</code></p><p>通过声明一个class完成以上需求简易的实现，这个class需要有几个功能，一个功能是记录需要更新的表达式，另一个功能是运行所记录的表达式（更新数据）。</p></li></ol><h3 id="1-通过声明Dep-class以完成类似操作："><a href="#1-通过声明Dep-class以完成类似操作：" class="headerlink" title="1.通过声明Dep class以完成类似操作："></a>1.通过声明Dep class以完成类似操作：</h3><p><u>Dep class   用于收集依赖函数（Dependency）</u></p><ul><li>depend：用于存储需要运行的target</li><li>notify：重新执行所有存储的target function</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Dep</span> </span>&#123;<br>  <span class="hljs-title">constructor</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-built_in">this</span>.subscribers = [] <br>  &#125;<br>  <span class="hljs-function"><span class="hljs-title">depend</span>(<span class="hljs-params"></span>)</span> &#123;  <br>    <span class="hljs-keyword">if</span> (target &amp;&amp; !<span class="hljs-built_in">this</span>.subscribers.includes(target)) &#123;<br>      <span class="hljs-comment">// Only if there is a target &amp; it&#x27;s not already subscribed</span><br>      <span class="hljs-built_in">this</span>.subscribers.push(target)<br>    &#125; <br>  &#125;<br>  <span class="hljs-function"><span class="hljs-title">notify</span>(<span class="hljs-params"></span>)</span> &#123;<br>    <span class="hljs-built_in">this</span>.subscribers.forEach(<span class="hljs-function"><span class="hljs-params">sub</span> =&gt;</span> sub())<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>在完成以上功能之后，需要考虑 Dep class什么时候更新数据呢？</p><p>在JavaScript中对象有一个方法**Object.defineProperty()**其中有两个属性叫做get和set，get在对象被访问的时候会调用，set在对象的数据被修改的时候调用。通过这两个属性可以监听数据的使用以及修改，当数据修改的时候使用notify()方法，重新运行表达式更新数据。</p><h3 id="2-object对象-Object-defineProperty-中的get和set属性："><a href="#2-object对象-Object-defineProperty-中的get和set属性：" class="headerlink" title="2.object对象 Object.defineProperty()中的get和set属性："></a>2.object对象 Object.defineProperty()中的get和set属性：</h3><p><code>Object.defineProperty(data, key, descriptor)</code></p><p><strong>参数</strong></p><p><code>data</code>要定义属性的对象。</p><p><code>key</code>要定义或修改的属性的名称或 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Symbol"><code>Symbol</code></a> 。</p><p><code>descriptor</code>要定义或修改的属性描述符。</p><p><code>get</code> <strong>指读取属性时调用的函数</strong>当访问数据的时候，调用depend()方法，存储相应函数</p><p><code>set</code> <strong>指写入属性时调用的函数</strong>当修改数据的时候，将调用notify()方法，将存储的函数重新运行，达到更新数据的目的</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-built_in">Object</span>.defineProperty(data, key, &#123;<br>  <span class="hljs-function"><span class="hljs-title">get</span>(<span class="hljs-params"></span>)</span> &#123;<br>    dep.depend() <span class="hljs-comment">// &lt;-- Remember the target we&#x27;re running</span><br>    <span class="hljs-keyword">return</span> internalValue<br>  &#125;,<br>  <span class="hljs-function"><span class="hljs-title">set</span>(<span class="hljs-params">newVal</span>)</span> &#123;<br>    internalValue = newVal<br>    dep.notify() <span class="hljs-comment">// &lt;-- Re-run stored functions</span><br>  &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><p>最后需要设置一个监听器，监听器控制depend()方法中 表达式的记录，监听器输入表达式。</p><p>调用流程如下：</p><pre><code>表达式相关变量被访问——调用get()——调用depend()——若target表达式没有记录，则记录表达式表达式相关变量被修改——调用set()——调用notify()——重新运行记录的表达式，修改数据</code></pre><h3 id="3-设置监听Watcher："><a href="#3-设置监听Watcher：" class="headerlink" title="3.设置监听Watcher："></a>3.设置监听Watcher：</h3><p>这里定义需要监听响应的方法或者函数<code>target</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">watcher</span>(<span class="hljs-params">myFunc</span>) </span>&#123;<br>  target = myFunc<br>  target()<br>  target = <span class="hljs-literal">null</span><br>&#125;<br><br>watcher(<span class="hljs-function">() =&gt;</span> &#123;<br>  data.total = data.price * data.quantity<br>&#125;)<br></code></pre></td></tr></table></figure><h3 id="4-响应程序"><a href="#4-响应程序" class="headerlink" title="4.响应程序"></a>4.响应程序</h3><p><img src="https://z3.ax1x.com/2021/08/05/fVy74S.png" alt="vue响应程序"></p><h2 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> data = &#123; <span class="hljs-attr">price</span>: <span class="hljs-number">5</span>, <span class="hljs-attr">quantity</span>: <span class="hljs-number">2</span> &#125;<br>   <span class="hljs-keyword">let</span> target = <span class="hljs-literal">null</span><br>   <br>   <span class="hljs-comment">// This is exactly the same Dep class</span><br>   <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Dep</span> </span>&#123;<br>     <span class="hljs-title">constructor</span> (<span class="hljs-params"></span>) &#123;<br>       <span class="hljs-built_in">this</span>.subscribers = [] <br>     &#125;<br>     <span class="hljs-function"><span class="hljs-title">depend</span>(<span class="hljs-params"></span>)</span> &#123;  <br>       <span class="hljs-keyword">if</span> (target &amp;&amp; !<span class="hljs-built_in">this</span>.subscribers.includes(target)) &#123;<br>         <span class="hljs-comment">// Only if there is a target &amp; it&#x27;s not already subscribed</span><br>         <span class="hljs-built_in">this</span>.subscribers.push(target)<br>       &#125; <br>     &#125;<br>     <span class="hljs-function"><span class="hljs-title">notify</span>(<span class="hljs-params"></span>)</span> &#123;<br>       <span class="hljs-built_in">this</span>.subscribers.forEach(<span class="hljs-function"><span class="hljs-params">sub</span> =&gt;</span> sub())<br>     &#125;<br>   &#125;<br>   <br>   <span class="hljs-comment">// Go through each of our data properties</span><br>   <span class="hljs-built_in">Object</span>.keys(data).forEach(<span class="hljs-function"><span class="hljs-params">key</span> =&gt;</span> &#123;<br>     <span class="hljs-keyword">let</span> internalValue = data[key]<br>     <br>     <span class="hljs-comment">// Each property gets a dependency instance</span><br>     <span class="hljs-keyword">const</span> dep = <span class="hljs-keyword">new</span> Dep()<br>     <br>     <span class="hljs-built_in">Object</span>.defineProperty(data, key, &#123;<br>       <span class="hljs-function"><span class="hljs-title">get</span>(<span class="hljs-params"></span>)</span> &#123;<br>         dep.depend() <span class="hljs-comment">// &lt;-- Remember the target we&#x27;re running</span><br>         <span class="hljs-keyword">return</span> internalValue<br>       &#125;,<br>       <span class="hljs-function"><span class="hljs-title">set</span>(<span class="hljs-params">newVal</span>)</span> &#123;<br>         internalValue = newVal<br>         dep.notify() <span class="hljs-comment">// &lt;-- Re-run stored functions</span><br>       &#125;<br>     &#125;)<br>   &#125;)<br>   <br>   <span class="hljs-comment">// My watcher no longer calls dep.depend,</span><br>   <span class="hljs-comment">// since that gets called from inside our get method.</span><br>   <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">watcher</span>(<span class="hljs-params">myFunc</span>) </span>&#123;<br>     target = myFunc<br>     target()<br>     target = <span class="hljs-literal">null</span><br>   &#125;<br>   <br>   watcher(<span class="hljs-function">() =&gt;</span> &#123;<br>     data.total = data.price * data.quantity<br>   &#125;)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【Vue】源码剖析虚拟dom</title>
    <link href="/2021/07/08/%E3%80%90vue%E3%80%91%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90%E8%99%9A%E6%8B%9Fdom/"/>
    <url>/2021/07/08/%E3%80%90vue%E3%80%91%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90%E8%99%9A%E6%8B%9Fdom/</url>
    
    <content type="html"><![CDATA[<h1 id="【vue】源码剖析虚拟dom"><a href="#【vue】源码剖析虚拟dom" class="headerlink" title="【vue】源码剖析虚拟dom"></a>【vue】源码剖析虚拟dom</h1><p>从URL到展示页面，整个过程<img src="C:\Users\Administrator\Desktop\网页URL.png" alt="网页URL"></p><h2 id="为什么JS操作DOM会慢呢？"><a href="#为什么JS操作DOM会慢呢？" class="headerlink" title="为什么JS操作DOM会慢呢？"></a>为什么JS操作DOM会慢呢？</h2><p>DOM是渲染引擎的一部分，JS是JS引擎中的，两个模块进行沟通的开销是不可忽略的。JS本身是很快的，但使用JS操作DOM时是两个模块之间的操作，两个模块进行沟通是具有一定开销的，同时这是不可忽略的开销。</p><h2 id="虚拟DOM有什么好处？"><a href="#虚拟DOM有什么好处？" class="headerlink" title="虚拟DOM有什么好处？"></a>虚拟DOM有什么好处？</h2><p>若一次操作中有 10 次更新 <code>DOM</code> 的动作，虚拟 <code>DOM</code> 不会立即操作 <code>DOM</code>，而是将这 10 次更新的 <code>diff</code> 内容保存到本地一个 <code>JS</code> 对象中，最终将这个 <code>JS</code> 对象一次性 <code>attch</code> 到 <code>DOM</code> 树上，再进行后续操作，避免大量无谓的计算量。用 <code>JS</code> 对象模拟 <code>DOM</code> 节点的好处是，页面的更新可以先全部反映在 <code>JS</code> 对象(虚拟 <code>DOM</code> )上，操作内存中的 <code>JS</code> 对象的速度显然要更快，等更新完成后，再将最终的 <code>JS</code> 对象映射成真实的 <code>DOM</code>，交由浏览器去绘制。通过这样对的方式可以减少两个模块之间的沟通开销。</p><p>算法实现</p><h4 id="用-JS-对象模拟-DOM-树"><a href="#用-JS-对象模拟-DOM-树" class="headerlink" title="用 JS 对象模拟 DOM 树"></a>用 <code>JS</code> 对象模拟 <code>DOM</code> 树</h4><p>真实的 <code>DOM</code> 节点如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;virtual-dom&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>Virtual DOM<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;list&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;item&quot;</span>&gt;</span>Item 1<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;item&quot;</span>&gt;</span>Item 2<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;item&quot;</span>&gt;</span>Item 3<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>Hello World<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span> <br></code></pre></td></tr></table></figure><p>用 <code>JavaScript</code> 对象来表示 <code>DOM</code> 节点：</p><p>使用对象的属性记录节点的类型、属性、子节点等。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Element virdual-dom 对象定义</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-type">&#123;String&#125;</span> <span class="hljs-variable">tagName</span></span> - dom 元素名称</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-type">&#123;Object&#125;</span> <span class="hljs-variable">props</span></span> - dom 属性</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-type">&#123;Array&lt;Element|String&gt;&#125;</span> </span>- 子节点</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Element</span>(<span class="hljs-params">tagName, props, children</span>) </span>&#123;<br>    <span class="hljs-built_in">this</span>.tagName = tagName<br>    <span class="hljs-built_in">this</span>.props = props<br>    <span class="hljs-built_in">this</span>.children = children<br>    <span class="hljs-comment">// dom 元素的 key 值，用作唯一标识符</span><br>    <span class="hljs-keyword">if</span>(props.key)&#123;<br>       <span class="hljs-built_in">this</span>.key = props.key<br>    &#125;<br>    <span class="hljs-keyword">var</span> count = <span class="hljs-number">0</span><br>    children.forEach(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">child, i</span>) </span>&#123;<br>        <span class="hljs-keyword">if</span> (child <span class="hljs-keyword">instanceof</span> Element) &#123;<br>            count += child.count<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            children[i] = <span class="hljs-string">&#x27;&#x27;</span> + child<br>        &#125;<br>        count++<br>    &#125;)<br>    <span class="hljs-comment">// 子元素个数</span><br>    <span class="hljs-built_in">this</span>.count = count<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">createElement</span>(<span class="hljs-params">tagName, props, children</span>)</span>&#123;<br> <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Element(tagName, props, children);<br>&#125;<br><span class="hljs-built_in">module</span>.exports = createElement;<br></code></pre></td></tr></table></figure><p>根据 <code>element</code> 对象的设定，则上面的 <code>DOM</code> 结构就可以简单表示为：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> el = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;./element.js&quot;</span>);<br><span class="hljs-keyword">var</span> ul = el(<span class="hljs-string">&#x27;div&#x27;</span>,&#123;<span class="hljs-attr">id</span>:<span class="hljs-string">&#x27;virtual-dom&#x27;</span>&#125;,[<br>  el(<span class="hljs-string">&#x27;p&#x27;</span>,&#123;&#125;,[<span class="hljs-string">&#x27;Virtual DOM&#x27;</span>]),<br>  el(<span class="hljs-string">&#x27;ul&#x27;</span>, &#123; <span class="hljs-attr">id</span>: <span class="hljs-string">&#x27;list&#x27;</span> &#125;, [<br>el(<span class="hljs-string">&#x27;li&#x27;</span>, &#123; <span class="hljs-attr">class</span>: <span class="hljs-string">&#x27;item&#x27;</span> &#125;, [<span class="hljs-string">&#x27;Item 1&#x27;</span>]),<br>el(<span class="hljs-string">&#x27;li&#x27;</span>, &#123; <span class="hljs-attr">class</span>: <span class="hljs-string">&#x27;item&#x27;</span> &#125;, [<span class="hljs-string">&#x27;Item 2&#x27;</span>]),<br>el(<span class="hljs-string">&#x27;li&#x27;</span>, &#123; <span class="hljs-attr">class</span>: <span class="hljs-string">&#x27;item&#x27;</span> &#125;, [<span class="hljs-string">&#x27;Item 3&#x27;</span>])<br>  ]),<br>  el(<span class="hljs-string">&#x27;div&#x27;</span>,&#123;&#125;,[<span class="hljs-string">&#x27;Hello World&#x27;</span>])<br>]) <br></code></pre></td></tr></table></figure><p>现在 <code>ul</code> 就是我们用 <code>JavaScript</code> 对象表示的 <code>DOM</code> 结构</p><p><strong>渲染用 <code>JS</code> 表示的 <code>DOM</code> 对象</strong></p><p>将 <code>ul</code> 渲染成页面上真实的 <code>DOM</code> 结构，相关渲染函数如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * render 将virdual-dom 对象渲染为实际 DOM 元素</span><br><span class="hljs-comment"> */</span><br>Element.prototype.render = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-keyword">var</span> el = <span class="hljs-built_in">document</span>.createElement(<span class="hljs-built_in">this</span>.tagName)<br>    <span class="hljs-keyword">var</span> props = <span class="hljs-built_in">this</span>.props<br>    <span class="hljs-comment">// 设置节点的DOM属性</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> propName <span class="hljs-keyword">in</span> props) &#123;<br>        <span class="hljs-keyword">var</span> propValue = props[propName]<br>        el.setAttribute(propName, propValue)<br>    &#125;<br><br>    <span class="hljs-keyword">var</span> children = <span class="hljs-built_in">this</span>.children || []<br>    children.forEach(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">child</span>) </span>&#123;<br>        <span class="hljs-keyword">var</span> childEl = (child <span class="hljs-keyword">instanceof</span> Element)<br>            ? child.render() <span class="hljs-comment">// 如果子节点也是虚拟DOM，递归构建DOM节点</span><br>            : <span class="hljs-built_in">document</span>.createTextNode(child) <span class="hljs-comment">// 如果字符串，只构建文本节点</span><br>        el.appendChild(childEl)<br>    &#125;)<br>    <span class="hljs-keyword">return</span> el<br>&#125; <br><br></code></pre></td></tr></table></figure><p>通过查看以上 <code>render</code> 方法，会根据 <code>tagName</code> 构建一个真正的 <code>DOM</code> 节点，然后设置这个节点的属性，最后递归地把自己的子节点也构建起来。</p><p>我们将构建好的 <code>DOM</code> 结构添加到页面 <code>body</code> 上面，如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript">ulRoot = ul.render();<br><span class="hljs-built_in">document</span>.body.appendChild(ulRoot); <br><br></code></pre></td></tr></table></figure><p>这样，页面 <code>body</code> 里面就有真正的 <code>DOM</code> 结构</p><h4 id="比较两棵虚拟-DOM-树的差异-—-diff-算法"><a href="#比较两棵虚拟-DOM-树的差异-—-diff-算法" class="headerlink" title="比较两棵虚拟 DOM 树的差异 — diff 算法"></a>比较两棵虚拟 <code>DOM</code> 树的差异 — <code>diff</code> 算法</h4><p>diff 算法用来比较两棵 Virtual DOM 树的差异，如果需要两棵树的完全比较，那么 diff 算法的时间复杂度为O(n^3)。但是在前端当中，你很少会跨越层级地移动 DOM 元素，所以 Virtual DOM 只会对同一个层级的元素进行对比，如下图所示， div 只会和同一层级的 div 对比，第二层级的只会跟第二层级对比，这样算法复杂度就可以达到 O(n)。</p><p>在实际的代码中，会对新旧两棵树进行一个深度优先的遍历，这样每个节点都会有一个唯一的标记：</p><p><strong>DOM中都会出现什么样的不同呢？</strong></p><p>节点中的文本内容改变</p><p>节点属性更改</p><p>节点替换</p><p>节点顺序互换</p><p>声明差异：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> REPLACE = <span class="hljs-number">0</span> <span class="hljs-comment">// 替换原先的节点</span><br><span class="hljs-keyword">var</span> REORDER = <span class="hljs-number">1</span> <span class="hljs-comment">// 重新排序</span><br><span class="hljs-keyword">var</span> PROPS = <span class="hljs-number">2</span> <span class="hljs-comment">// 修改了节点的属性</span><br><span class="hljs-keyword">var</span> TEXT = <span class="hljs-number">3</span> <span class="hljs-comment">// 文本内容改变 </span><br></code></pre></td></tr></table></figure><p><strong>深度优先遍历，记录差异</strong></p><p>在实际的代码中，会对新旧两棵树进行一个深度优先的遍历，这样每个节点都会有一个唯一的标记（<code>index</code>）：在深度优先遍历的时候，每遍历到一个节点就把该节点和新的的树进行对比。如果有差异的话就记录到一个对象里面。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// diff 函数，对比两棵树</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">diff</span>(<span class="hljs-params">oldTree, newTree</span>) </span>&#123;<br>  <span class="hljs-keyword">var</span> index = <span class="hljs-number">0</span> <span class="hljs-comment">// 当前节点的标志</span><br>  <span class="hljs-keyword">var</span> patches = &#123;&#125; <span class="hljs-comment">// 用来记录每个节点差异的对象</span><br>  dfsWalk(oldTree, newTree, index, patches)<br>  <span class="hljs-keyword">return</span> patches<br>&#125;<br><br><span class="hljs-comment">// 对两棵树进行深度优先遍历</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">dfsWalk</span>(<span class="hljs-params">oldNode, newNode, index, patches</span>) </span>&#123;<br>  <span class="hljs-keyword">var</span> currentPatch = []<br>  <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> (oldNode) === <span class="hljs-string">&quot;string&quot;</span> &amp;&amp; <span class="hljs-keyword">typeof</span> (newNode) === <span class="hljs-string">&quot;string&quot;</span>) &#123;<br>    <span class="hljs-comment">// 文本内容改变</span><br>    <span class="hljs-keyword">if</span> (newNode !== oldNode) &#123;<br>      currentPatch.push(&#123; <span class="hljs-attr">type</span>: patch.TEXT, <span class="hljs-attr">content</span>: newNode &#125;)<br>    &#125;<br>  &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (newNode!=<span class="hljs-literal">null</span> &amp;&amp; oldNode.tagName === newNode.tagName &amp;&amp; oldNode.key === newNode.key) &#123;<br>    <span class="hljs-comment">// 节点相同，比较属性</span><br>    <span class="hljs-keyword">var</span> propsPatches = diffProps(oldNode, newNode)<br>    <span class="hljs-comment">//属性不同，记录在currentPatch中</span><br>    <span class="hljs-keyword">if</span> (propsPatches) &#123;<br>      currentPatch.push(&#123; <span class="hljs-attr">type</span>: patch.PROPS, <span class="hljs-attr">props</span>: propsPatches &#125;)<br>    &#125;<br>    <span class="hljs-comment">// 比较子节点，如果子节点有&#x27;ignore&#x27;属性，则不需要比较</span><br>    <span class="hljs-keyword">if</span> (!isIgnoreChildren(newNode)) &#123;<br>      diffChildren(<br>        oldNode.children,<br>        newNode.children,<br>        index,<br>        patches,<br>        currentPatch<br>      )<br>    &#125;<br>  &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(newNode !== <span class="hljs-literal">null</span>)&#123;<br>    <span class="hljs-comment">// 新节点和旧节点不同，用 replace 替换</span><br>    currentPatch.push(&#123; <span class="hljs-attr">type</span>: patch.REPLACE, <span class="hljs-attr">node</span>: newNode &#125;)<br>  &#125;<br><span class="hljs-comment">//如果当前节点存在差异，存入patches中</span><br>  <span class="hljs-keyword">if</span> (currentPatch.length) &#123;<br>    patches[index] = currentPatch<br>  &#125;<br>&#125; <br><br></code></pre></td></tr></table></figure><p>实例查看输出：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> ul1 = el(<span class="hljs-string">&#x27;div&#x27;</span>,&#123;<span class="hljs-attr">id</span>:<span class="hljs-string">&#x27;virtual-dom&#x27;</span>&#125;,[<br>  el(<span class="hljs-string">&#x27;p&#x27;</span>,&#123;&#125;,[<span class="hljs-string">&#x27;Virtual DOM&#x27;</span>]),<br>  el(<span class="hljs-string">&#x27;ul&#x27;</span>, &#123; <span class="hljs-attr">id</span>: <span class="hljs-string">&#x27;list&#x27;</span> &#125;, [<br>el(<span class="hljs-string">&#x27;li&#x27;</span>, &#123; <span class="hljs-attr">class</span>: <span class="hljs-string">&#x27;item&#x27;</span> &#125;, [<span class="hljs-string">&#x27;Item 1&#x27;</span>]),<br>el(<span class="hljs-string">&#x27;li&#x27;</span>, &#123; <span class="hljs-attr">class</span>: <span class="hljs-string">&#x27;item&#x27;</span> &#125;, [<span class="hljs-string">&#x27;Item 2&#x27;</span>]),<br>el(<span class="hljs-string">&#x27;li&#x27;</span>, &#123; <span class="hljs-attr">class</span>: <span class="hljs-string">&#x27;item&#x27;</span> &#125;, [<span class="hljs-string">&#x27;Item 3&#x27;</span>])<br>  ]),<br>  el(<span class="hljs-string">&#x27;div&#x27;</span>,&#123;&#125;,[<span class="hljs-string">&#x27;Hello World&#x27;</span>])<br>]) <br><span class="hljs-keyword">var</span> ul2 = el(<span class="hljs-string">&#x27;div&#x27;</span>,&#123;<span class="hljs-attr">id</span>:<span class="hljs-string">&#x27;virtual-dom&#x27;</span>&#125;,[<br>  el(<span class="hljs-string">&#x27;p&#x27;</span>,&#123;&#125;,[<span class="hljs-string">&#x27;Virtual DOM&#x27;</span>]),<br>  el(<span class="hljs-string">&#x27;ul&#x27;</span>, &#123; <span class="hljs-attr">id</span>: <span class="hljs-string">&#x27;list&#x27;</span> &#125;, [<br>el(<span class="hljs-string">&#x27;li&#x27;</span>, &#123; <span class="hljs-attr">class</span>: <span class="hljs-string">&#x27;item&#x27;</span> &#125;, [<span class="hljs-string">&#x27;Item 21&#x27;</span>]),<br>el(<span class="hljs-string">&#x27;li&#x27;</span>, &#123; <span class="hljs-attr">class</span>: <span class="hljs-string">&#x27;item&#x27;</span> &#125;, [<span class="hljs-string">&#x27;Item 23&#x27;</span>])<br>  ]),<br>  el(<span class="hljs-string">&#x27;p&#x27;</span>,&#123;&#125;,[<span class="hljs-string">&#x27;Hello World&#x27;</span>])<br>]) <br><span class="hljs-keyword">var</span> patches = diff(ul1,ul2);<br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;patches:&#x27;</span>,patches);<br></code></pre></td></tr></table></figure><p>将patches比对真实DOM</p><p>对真实的DOM树进行深搜遍历，找到有差异的节点</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">patch</span> (<span class="hljs-params">node, patches</span>) </span>&#123;<br>  <span class="hljs-keyword">var</span> walker = &#123;<span class="hljs-attr">index</span>: <span class="hljs-number">0</span>&#125;<br>  dfsWalk(node, walker, patches)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">dfsWalk</span> (<span class="hljs-params">node, walker, patches</span>) </span>&#123;<br>  <span class="hljs-comment">// 从patches拿出当前节点的差异</span><br>  <span class="hljs-keyword">var</span> currentPatches = patches[walker.index]<br><br>  <span class="hljs-keyword">var</span> len = node.childNodes<br>    ? node.childNodes.length<br>    : <span class="hljs-number">0</span><br>  <span class="hljs-comment">// 深度遍历子节点</span><br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; len; i++) &#123;<br>    <span class="hljs-keyword">var</span> child = node.childNodes[i]<br>    walker.index++<br>    dfsWalk(child, walker, patches)<br>  &#125;<br>  <span class="hljs-comment">// 节点存在差异，对当前节点进行DOM操作</span><br>  <span class="hljs-keyword">if</span> (currentPatches) &#123;<br>    applyPatches(node, currentPatches)<br>  &#125;<br>&#125; <br><br></code></pre></td></tr></table></figure><p><code>applyPatches</code>对有差异的节点进行处理</p><p>节点替换<code>REPLACE</code>，就进行节点替换 <code>DOM</code> 操作</p><p>以及子节点重排<code>REORDER</code></p><p>属性改变<code>PROPS</code>的 <code>DOM</code> 操作</p><p>如果节点文本发生了改变<code>TEXT</code>，则进行文本替换的 <code>DOM</code> 操作</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">applyPatches</span> (<span class="hljs-params">node, currentPatches</span>) </span>&#123;<br>  currentPatches.forEach(<span class="hljs-function"><span class="hljs-params">currentPatch</span> =&gt;</span> &#123;<br>    <span class="hljs-keyword">switch</span> (currentPatch.type) &#123;<br>      <span class="hljs-keyword">case</span> REPLACE:<br>        <span class="hljs-keyword">var</span> newNode = (<span class="hljs-keyword">typeof</span> currentPatch.node === <span class="hljs-string">&#x27;string&#x27;</span>)<br>          ? <span class="hljs-built_in">document</span>.createTextNode(currentPatch.node)<br>          : currentPatch.node.render()<br>        node.parentNode.replaceChild(newNode, node)<br>        <span class="hljs-keyword">break</span><br>      <span class="hljs-keyword">case</span> REORDER:<br>        reorderChildren(node, currentPatch.moves)<br>        <span class="hljs-keyword">break</span><br>      <span class="hljs-keyword">case</span> PROPS:<br>        setProps(node, currentPatch.props)<br>        <span class="hljs-keyword">break</span><br>      <span class="hljs-keyword">case</span> TEXT:<br>        node.textContent = currentPatch.content<br>        <span class="hljs-keyword">break</span><br>      <span class="hljs-attr">default</span>:<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Error</span>(<span class="hljs-string">&#x27;Unknown patch type &#x27;</span> + currentPatch.type)<br>    &#125;<br>  &#125;)<br>&#125; <br><br></code></pre></td></tr></table></figure><p>总结：</p><p>github地址为：<a href="https://link.juejin.cn/?target=https://github.com/fengshi123/virtual-dom-example%E3%80%82">github.com/fengshi123/…</a></p><p>虚拟DOM主要由三个步骤进行实现：</p><ol><li>使用JS对象模拟DOM树</li><li>记录模拟DOM树与真实DOM树的差异</li><li>把两个DOM的差异更新到真实的DOM中</li></ol><h2 id="Vue-源码-Virtual-DOM-简析"><a href="#Vue-源码-Virtual-DOM-简析" class="headerlink" title="Vue 源码 Virtual-DOM 简析"></a><code>Vue</code> 源码 <code>Virtual-DOM</code> 简析</h2><p>我们从第二章节（<code>Virtual-DOM</code> 基础）中已经掌握 <code>Virtual DOM</code> 渲染成真实的 <code>DOM</code> 实际上要经历 <code>VNode</code> 的定义、<code>diff</code>、<code>patch</code> 等过程，所以本章节 <code>Vue</code> 源码的解析也按这几个过程来简析。</p><h3 id="3-1、VNode-模拟-DOM-树"><a href="#3-1、VNode-模拟-DOM-树" class="headerlink" title="3.1、VNode 模拟 DOM 树"></a>3.1、<code>VNode</code> 模拟 <code>DOM</code> 树</h3><h4 id="3-1-1、VNode-类简析"><a href="#3-1-1、VNode-类简析" class="headerlink" title="3.1.1、VNode 类简析"></a><strong>3.1.1、<code>VNode</code> 类简析</strong></h4><p>在 <code>Vue.js</code> 中，<code>Virtual DOM</code> 是用 <code>VNode</code> 这个 <code>Class</code> 去描述，它定义在 <code>src/core/vdom/vnode.js</code> 中 ，从以下代码块中可以看到 <code>Vue.js</code> 中的 <code>Virtual DOM</code> 的定义较为复杂一些，因为它这里包含了很多 <code>Vue.js</code> 的特性。实际上 <code>Vue.js</code> 中 <code>Virtual DOM</code> 是借鉴了一个开源库  <a href="https://link.juejin.cn/?target=https://github.com/snabbdom/snabbdom">snabbdom</a> 的实现，然后加入了一些 <code>Vue.js</code> 的一些特性。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">VNode</span> </span>&#123;<br>  <span class="hljs-attr">tag</span>: string | <span class="hljs-keyword">void</span>;<br>  data: VNodeData | <span class="hljs-keyword">void</span>;<br>  children: ?<span class="hljs-built_in">Array</span>&lt;VNode&gt;;<br>  text: string | <span class="hljs-keyword">void</span>;<br>...<br><br>  <span class="hljs-title">constructor</span> (<span class="hljs-params"></span><br><span class="hljs-params">    tag?: string,</span><br><span class="hljs-params">    data?: VNodeData,</span><br><span class="hljs-params">    children?: ?<span class="hljs-built_in">Array</span>&lt;VNode&gt;,</span><br><span class="hljs-params">    text?: string,</span><br><span class="hljs-params">    elm?: Node,</span><br><span class="hljs-params">    context?: Component,</span><br><span class="hljs-params">    componentOptions?: VNodeComponentOptions,</span><br><span class="hljs-params">    asyncFactory?: <span class="hljs-built_in">Function</span></span><br><span class="hljs-params">  </span>) &#123;<br>    <span class="hljs-built_in">this</span>.tag = tag<br>    <span class="hljs-built_in">this</span>.data = data<br>    <span class="hljs-built_in">this</span>.children = children<br>    <span class="hljs-built_in">this</span>.text = text<br>    <span class="hljs-built_in">this</span>.elm = elm<br>    <span class="hljs-built_in">this</span>.ns = <span class="hljs-literal">undefined</span><br>    <span class="hljs-built_in">this</span>.context = context<br>...<br></code></pre></td></tr></table></figure><p>这里千万不要因为 <code>VNode</code> 的这么属性而被吓到，或者咬紧牙去摸清楚每个属性的意义，其实，我们主要了解其几个核心的关键属性就差不多了，例如：</p><ul><li><code>tag</code> 属性即这个<code>vnode</code>的标签属性</li><li><code>data</code> 属性包含了最后渲染成真实<code>dom</code>节点后，节点上的<code>class</code>，<code>attribute</code>，<code>style</code>以及绑定的事件</li><li><code>children</code> 属性是<code>vnode</code>的子节点</li><li><code>text</code> 属性是文本属性</li><li><code>elm</code> 属性为这个<code>vnode</code>对应的真实<code>dom</code>节点</li><li><code>key</code> 属性是<code>vnode</code>的标记，在<code>diff</code>过程中可以提高<code>diff</code>的效率</li></ul><h4 id="3-1-2、源码创建-VNode-过程"><a href="#3-1-2、源码创建-VNode-过程" class="headerlink" title="3.1.2、源码创建 VNode 过程"></a>3.1.2、源码创建 <code>VNode</code> 过程</h4><p>（1）初始化vue</p><p>我们在实例化一个 <code>vue</code> 实例，也即 <code>new Vue( )</code> 时，实际上是执行 <code>src/core/instance/index.js</code>  中定义的 <code>Function</code> 函数。</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs actionscript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Vue</span> <span class="hljs-params">(options)</span> </span>&#123;<br>  <span class="hljs-keyword">if</span> (process.env.NODE_ENV !== <span class="hljs-string">&#x27;production&#x27;</span> &amp;&amp;<br>    !(<span class="hljs-keyword">this</span> <span class="hljs-keyword">instanceof</span> Vue)<br>  ) &#123;<br>    warn(<span class="hljs-string">&#x27;Vue is a constructor and should be called with the `new` keyword&#x27;</span>)<br>  &#125;<br>  <span class="hljs-keyword">this</span>._init(options)<br>&#125;<br></code></pre></td></tr></table></figure><p>通过查看 <code>Vue</code> 的 <code>function</code>，我们知道 <code>Vue</code> 只能通过 <code>new</code> 关键字初始化，然后调用 <code>this._init</code> 方法，该方法在 <code>src/core/instance/init.js</code> 中定义。</p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs gams">Vue.prototype._init = function (<span class="hljs-keyword">options</span>?: Object) &#123;<br>  const vm: Component = this<br>    <br>  <span class="hljs-comment">// 省略一系列其它初始化的代码</span><br>    <br>  <span class="hljs-keyword">if</span> (vm.<span class="hljs-symbol">$</span><span class="hljs-keyword">options</span>.el) &#123;<br>    console.<span class="hljs-built_in">log</span>(<span class="hljs-string">&#x27;vm.$options.el:&#x27;</span>,vm.<span class="hljs-symbol">$</span><span class="hljs-keyword">options</span>.el);<br>    vm.<span class="hljs-symbol">$</span>mount(vm.<span class="hljs-symbol">$</span><span class="hljs-keyword">options</span>.el)<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>（2）<code>Vue</code> 实例挂载</strong></p><p><code>Vue</code> 中是通过 <code>$mount</code> 实例方法去挂载 <code>dom</code> 的，下面我们通过分析 <code>compiler</code> 版本的 <code>mount</code> 实现，相关源码在目录 <code>src/platforms/web/entry-runtime-with-compiler.js</code> 文件中定义：。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">const</span> mount = Vue.prototype.<span class="hljs-variable">$mount</span><br>Vue.prototype.<span class="hljs-variable">$mount</span> = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span></span><br><span class="hljs-params"><span class="hljs-function">  el?: <span class="hljs-keyword">string</span> | Element,</span></span><br><span class="hljs-params"><span class="hljs-function">  hydrating?: <span class="hljs-keyword">boolean</span></span></span><br><span class="hljs-params"><span class="hljs-function"></span>): <span class="hljs-title">Component</span> </span>&#123;<br>  el = el &amp;&amp; query(el)<br>  <br>   <span class="hljs-comment">// 省略一系列初始化以及逻辑判断代码  </span><br> <br>  <span class="hljs-keyword">return</span> mount.call(this, el, hydrating)<br>&#125;<br></code></pre></td></tr></table></figure><p>我们发现最终还是调用用原先原型上的 <code>$mount</code> 方法挂载 ，原先原型上的 <code>$mount</code> 方法在 <code>src/platforms/web/runtime/index.js</code> 中定义 。</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Vue</span>.</span></span>prototype.$mount = <span class="hljs-keyword">function</span> (<br>  el?: <span class="hljs-built_in">string</span> <span class="hljs-pattern-match">| <span class="hljs-constructor">Element</span>,</span><br><span class="hljs-pattern-match">  hydrating?: boolean</span><br><span class="hljs-pattern-match">): <span class="hljs-constructor">Component</span> &#123;</span><br><span class="hljs-pattern-match">  el = el <span class="hljs-operator">&amp;&amp;</span> <span class="hljs-keyword">in</span><span class="hljs-constructor">Browser</span> ? query(el) : undefined</span><br><span class="hljs-pattern-match">  return mount<span class="hljs-constructor">Component(<span class="hljs-params">this</span>, <span class="hljs-params">el</span>, <span class="hljs-params">hydrating</span>)</span></span><br><span class="hljs-pattern-match">&#125;</span><br></code></pre></td></tr></table></figure><p>我们发现<code>$mount</code> 方法实际上会去调用 <code>mountComponent</code> 方法，这个方法定义在 <code>src/core/instance/lifecycle.js</code> 文件中</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">export</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">mountComponent</span> (<span class="hljs-params"></span></span><br><span class="hljs-params"><span class="hljs-function">  vm: Component,</span></span><br><span class="hljs-params"><span class="hljs-function">  el: ?Element,</span></span><br><span class="hljs-params"><span class="hljs-function">  hydrating?: <span class="hljs-built_in">boolean</span></span></span><br><span class="hljs-params"><span class="hljs-function"></span>): <span class="hljs-title">Component</span> </span>&#123;<br>  vm.$el = el<br>  <span class="hljs-comment">// 省略一系列其它代码</span><br>  <span class="hljs-keyword">let</span> updateComponent<br>  <span class="hljs-comment">/* istanbul ignore if */</span><br>  <span class="hljs-keyword">if</span> (process.env.NODE_ENV !== <span class="hljs-string">&#x27;production&#x27;</span> &amp;&amp; config.performance &amp;&amp; mark) &#123;<br>    updateComponent = <span class="hljs-function">() =&gt;</span> &#123;<br>      <span class="hljs-comment">// 生成虚拟 vnode   </span><br>      <span class="hljs-keyword">const</span> vnode = vm._render()<br>      <span class="hljs-comment">// 更新 DOM</span><br>      vm._update(vnode, hydrating)<br>     <br>    &#125;<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    updateComponent = <span class="hljs-function">() =&gt;</span> &#123;<br>      vm._update(vm._render(), hydrating)<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-comment">// 实例化一个渲染Watcher，在它的回调函数中会调用 updateComponent 方法  </span><br>  <span class="hljs-keyword">new</span> Watcher(vm, updateComponent, noop, &#123;<br>    before () &#123;<br>      <span class="hljs-keyword">if</span> (vm._isMounted &amp;&amp; !vm._isDestroyed) &#123;<br>        callHook(vm, <span class="hljs-string">&#x27;beforeUpdate&#x27;</span>)<br>      &#125;<br>    &#125;<br>  &#125;, <span class="hljs-literal">true</span> <span class="hljs-comment">/* isRenderWatcher */</span>)<br>  hydrating = <span class="hljs-literal">false</span><br><br>  <span class="hljs-keyword">return</span> vm<br>&#125;<br></code></pre></td></tr></table></figure><p>从上面的代码可以看到，<code>mountComponent</code> 核心就是先实例化一个渲染<code>Watcher</code>，在它的回调函数中会调用 <code>updateComponent</code> 方法，在此方法中调用 <code>vm._render</code> 方法先生成虚拟 Node，最终调用 <code>vm._update</code> 更新 <code>DOM</code>。</p><p><strong>（3）创建虚拟 Node</strong></p><p><code>Vue</code> 的 <code>_render</code> 方法是实例的一个私有方法，它用来把实例渲染成一个虚拟 <code>Node</code>。它的定义在 <code>src/core/instance/render.js</code> 文件中：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs javascript">Vue.prototype._render = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>): <span class="hljs-title">VNode</span> </span>&#123;<br>   <span class="hljs-keyword">const</span> vm: Component = <span class="hljs-built_in">this</span><br>   <span class="hljs-keyword">const</span> &#123; render, _parentVnode &#125; = vm.$options<br>   <span class="hljs-keyword">let</span> vnode<br>   <span class="hljs-keyword">try</span> &#123;<br>     <span class="hljs-comment">// 省略一系列代码  </span><br>     currentRenderingInstance = vm<br>     <span class="hljs-comment">// 调用 createElement 方法来返回 vnode</span><br>     vnode = render.call(vm._renderProxy, vm.$createElement)<br>   &#125; <span class="hljs-keyword">catch</span> (e) &#123;<br>     <span class="hljs-function"><span class="hljs-title">handleError</span>(<span class="hljs-params">e, vm, <span class="hljs-string">`render`</span></span>)</span>&#123;&#125;<br>   &#125;<br>   <span class="hljs-comment">// set parent</span><br>   vnode.parent = _parentVnode<br>   <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;vnode...:&quot;</span>,vnode);<br>   <span class="hljs-keyword">return</span> vnode<br> &#125;<br></code></pre></td></tr></table></figure><p><code>Vue.js</code> 利用 <code>_createElement</code> 方法创建 <code>VNode</code>，它定义在 <code>src/core/vdom/create-elemenet.js</code> 中：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">export</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">_createElement</span> (<span class="hljs-params"></span></span><br><span class="hljs-params"><span class="hljs-function">  context: Component,</span></span><br><span class="hljs-params"><span class="hljs-function">  tag?: string | Class&lt;Component&gt; | <span class="hljs-built_in">Function</span> | <span class="hljs-built_in">Object</span>,</span></span><br><span class="hljs-params"><span class="hljs-function">  data?: VNodeData,</span></span><br><span class="hljs-params"><span class="hljs-function">  children?: any,</span></span><br><span class="hljs-params"><span class="hljs-function">  normalizationType?: number</span></span><br><span class="hljs-params"><span class="hljs-function"></span>): <span class="hljs-title">VNode</span> | <span class="hljs-title">Array</span>&lt;<span class="hljs-title">VNode</span>&gt; </span>&#123;<br>    <br>  <span class="hljs-comment">// 省略一系列非主线代码</span><br>  <br>  <span class="hljs-keyword">if</span> (normalizationType === ALWAYS_NORMALIZE) &#123;<br>    <span class="hljs-comment">// 场景是 render 函数不是编译生成的</span><br>    children = normalizeChildren(children)<br>  &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (normalizationType === SIMPLE_NORMALIZE) &#123;<br>    <span class="hljs-comment">// 场景是 render 函数是编译生成的</span><br>    children = simpleNormalizeChildren(children)<br>  &#125;<br>  <span class="hljs-keyword">let</span> vnode, ns<br>  <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> tag === <span class="hljs-string">&#x27;string&#x27;</span>) &#123;<br>    <span class="hljs-keyword">let</span> Ctor<br>    ns = (context.$vnode &amp;&amp; context.$vnode.ns) || config.getTagNamespace(tag)<br>    <span class="hljs-keyword">if</span> (config.isReservedTag(tag)) &#123;<br>      <span class="hljs-comment">// 创建虚拟 vnode</span><br>      vnode = <span class="hljs-keyword">new</span> VNode(<br>        config.parsePlatformTagName(tag), data, children,<br>        <span class="hljs-literal">undefined</span>, <span class="hljs-literal">undefined</span>, context<br>      )<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> ((!data || !data.pre) &amp;&amp; isDef(Ctor = resolveAsset(context.$options, <span class="hljs-string">&#x27;components&#x27;</span>, tag))) &#123;<br>      <span class="hljs-comment">// component</span><br>      vnode = createComponent(Ctor, data, context, children, tag)<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      vnode = <span class="hljs-keyword">new</span> VNode(<br>        tag, data, children,<br>        <span class="hljs-literal">undefined</span>, <span class="hljs-literal">undefined</span>, context<br>      )<br>    &#125;<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    vnode = createComponent(tag, data, context, children)<br>  &#125;<br>  <span class="hljs-keyword">if</span> (<span class="hljs-built_in">Array</span>.isArray(vnode)) &#123;<br>    <span class="hljs-keyword">return</span> vnode<br>  &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (isDef(vnode)) &#123;<br>    <span class="hljs-keyword">if</span> (isDef(ns)) applyNS(vnode, ns)<br>    <span class="hljs-keyword">if</span> (isDef(data)) registerDeepBindings(data)<br>    <span class="hljs-keyword">return</span> vnode<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-keyword">return</span> createEmptyVNode()<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>_createElement</code> 方法有 5 个参数，<code>context</code> 表示 VNode 的上下文环境，它是 <code>Component</code> 类型；<code>tag</code>表示标签，它可以是一个字符串，也可以是一个 <code>Component</code>；<code>data</code> 表示 VNode 的数据，它是一个 <code>VNodeData</code> 类型，可以在 <code>flow/vnode.js</code> 中找到它的定义；<code>children</code> 表示当前 VNode 的子节点，它是任意类型的，需要被规范为标准的 <code>VNode</code> 数组；</p><h4 id="3-1-3、实例查看"><a href="#3-1-3、实例查看" class="headerlink" title="3.1.3、实例查看"></a><strong>3.1.3、实例查看</strong></h4><p>为了更直观查看我们平时写的 <code>Vue</code> 代码如何用 <code>VNode</code> 类来表示，我们通过一个实例的转换进行更深刻了解。</p><p>例如，实例化一个 <code>Vue</code> 实例：</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs vim">var app = <span class="hljs-keyword">new</span> Vue(&#123;<br>  <span class="hljs-keyword">e</span><span class="hljs-variable">l:</span> <span class="hljs-string">&#x27;#app&#x27;</span>,<br>  render: <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">(createElement)</span> &#123;</span><br>    <span class="hljs-keyword">return</span> createElement(<span class="hljs-string">&#x27;div&#x27;</span>, &#123;<br>      attr<span class="hljs-variable">s:</span> &#123;<br>        id: <span class="hljs-string">&#x27;app&#x27;</span>,<br>        clas<span class="hljs-variable">s:</span> <span class="hljs-string">&quot;class_box&quot;</span><br>      &#125;,<br>    &#125;, this.message)<br>  &#125;,<br>  dat<span class="hljs-variable">a:</span> &#123;<br>    message: <span class="hljs-string">&#x27;Hello Vue!&#x27;</span><br>  &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><p>我们打印出其对应的 <code>VNode</code> 表示：</p><p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/7/23/16c1e23b7481b16f~tplv-t2oaga2asx-zoom-in-crop-mark:815:0:0:0.awebp" alt="img"></p><h3 id="3-2、diff-过程"><a href="#3-2、diff-过程" class="headerlink" title="3.2、diff 过程"></a>3.2、<code>diff</code> 过程</h3><h4 id="3-2-1、Vue-js-源码的-diff-调用逻辑"><a href="#3-2-1、Vue-js-源码的-diff-调用逻辑" class="headerlink" title="3.2.1、Vue.js 源码的 diff 调用逻辑"></a>3.2.1、<code>Vue.js</code> 源码的 <code>diff</code> 调用逻辑</h4><p><code>Vue.js</code> 源码实例化了一个 <code>watcher</code>，这个 ~ 被添加到了在模板当中所绑定变量的依赖当中，一旦 <code>model</code> 中的响应式的数据发生了变化，这些响应式的数据所维护的 <code>dep</code> 数组便会调用 <code>dep.notify()</code> 方法完成所有依赖遍历执行的工作，这包括视图的更新，即 <code>updateComponent</code> 方法的调用。<code>watcher</code> 和 <code>updateComponent</code>方法定义在  <code>src/core/instance/lifecycle.js</code> 文件中 。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">export</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">mountComponent</span> (<span class="hljs-params"></span></span><br><span class="hljs-params"><span class="hljs-function">  vm: Component,</span></span><br><span class="hljs-params"><span class="hljs-function">  el: ?Element,</span></span><br><span class="hljs-params"><span class="hljs-function">  hydrating?: <span class="hljs-built_in">boolean</span></span></span><br><span class="hljs-params"><span class="hljs-function"></span>): <span class="hljs-title">Component</span> </span>&#123;<br>  vm.$el = el<br>  <span class="hljs-comment">// 省略一系列其它代码</span><br>  <span class="hljs-keyword">let</span> updateComponent<br>  <span class="hljs-comment">/* istanbul ignore if */</span><br>  <span class="hljs-keyword">if</span> (process.env.NODE_ENV !== <span class="hljs-string">&#x27;production&#x27;</span> &amp;&amp; config.performance &amp;&amp; mark) &#123;<br>    updateComponent = <span class="hljs-function">() =&gt;</span> &#123;<br>      <span class="hljs-comment">// 生成虚拟 vnode   </span><br>      <span class="hljs-keyword">const</span> vnode = vm._render()<br>      <span class="hljs-comment">// 更新 DOM</span><br>      vm._update(vnode, hydrating)<br>     <br>    &#125;<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    updateComponent = <span class="hljs-function">() =&gt;</span> &#123;<br>      vm._update(vm._render(), hydrating)<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-comment">// 实例化一个渲染Watcher，在它的回调函数中会调用 updateComponent 方法  </span><br>  <span class="hljs-keyword">new</span> Watcher(vm, updateComponent, noop, &#123;<br>    before () &#123;<br>      <span class="hljs-keyword">if</span> (vm._isMounted &amp;&amp; !vm._isDestroyed) &#123;<br>        callHook(vm, <span class="hljs-string">&#x27;beforeUpdate&#x27;</span>)<br>      &#125;<br>    &#125;<br>  &#125;, <span class="hljs-literal">true</span> <span class="hljs-comment">/* isRenderWatcher */</span>)<br>  hydrating = <span class="hljs-literal">false</span><br><br>  <span class="hljs-keyword">return</span> vm<br>&#125;<br></code></pre></td></tr></table></figure><p>完成视图的更新工作事实上就是调用了<code>vm._update</code>方法，这个方法接收的第一个参数是刚生成的<code>Vnode</code>，调用的<code>vm._update</code>方法定义在 <code>src/core/instance/lifecycle.js</code>中。</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs vim">Vue.prototype._update = <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">(vnode: VNode, hydrating?: boolean)</span> &#123;</span><br>  const <span class="hljs-keyword">vm</span>: Component = this<br>  const prevEl = <span class="hljs-keyword">vm</span>.$<span class="hljs-keyword">el</span><br>  const prevVnode = <span class="hljs-keyword">vm</span>._vnode<br>  const restoreActiveInstance = setActiveInstance(<span class="hljs-keyword">vm</span>)<br>  <span class="hljs-keyword">vm</span>._vnode = vnode<br>  <span class="hljs-keyword">if</span> (!prevVnode) &#123;<br>    // 第一个参数为真实的node节点，则为初始化<br>    <span class="hljs-keyword">vm</span>.$<span class="hljs-keyword">el</span> = <span class="hljs-keyword">vm</span>.__patch__(<span class="hljs-keyword">vm</span>.$<span class="hljs-keyword">el</span>, vnode, hydrating, false /* removeOnly */)<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    // 如果需要diff的prevVnode存在，那么对prevVnode和vnode进行diff<br>    <span class="hljs-keyword">vm</span>.$<span class="hljs-keyword">el</span> = <span class="hljs-keyword">vm</span>.__patch__(prevVnode, vnode)<br>  &#125;<br>  restoreActiveInstance()<br>  // <span class="hljs-keyword">update</span> __vue__ reference<br>  <span class="hljs-keyword">if</span> (prevEl) &#123;<br>    prevEl.__vue__ = null<br>  &#125;<br>  <span class="hljs-keyword">if</span> (<span class="hljs-keyword">vm</span>.$<span class="hljs-keyword">el</span>) &#123;<br>    <span class="hljs-keyword">vm</span>.$<span class="hljs-keyword">el</span>.__vue__ = <span class="hljs-keyword">vm</span><br>  &#125;<br>  // <span class="hljs-keyword">if</span> parent <span class="hljs-keyword">is</span> <span class="hljs-keyword">an</span> HOC, <span class="hljs-keyword">update</span> its $<span class="hljs-keyword">el</span> <span class="hljs-keyword">as</span> well<br>  <span class="hljs-keyword">if</span> (<span class="hljs-keyword">vm</span>.$vnode &amp;&amp; <span class="hljs-keyword">vm</span>.$parent &amp;&amp; <span class="hljs-keyword">vm</span>.$vnode === <span class="hljs-keyword">vm</span>.$parent._vnode) &#123;<br>    <span class="hljs-keyword">vm</span>.$parent.$<span class="hljs-keyword">el</span> = <span class="hljs-keyword">vm</span>.$<span class="hljs-keyword">el</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>在这个方法当中最为关键的就是 <code>vm.__patch__</code> 方法，这也是整个 <code>virtual-dom</code> 当中最为核心的方法，主要完成了<code>prevVnode</code> 和 <code>vnode</code> 的 <code>diff</code> 过程并根据需要操作的 <code>vdom</code> 节点打 <code>patch</code>，最后生成新的真实 <code>dom</code> 节点并完成视图的更新工作。</p><p>接下来，让我们看下 <code>vm.__patch__</code>的逻辑过程， <code>vm.__patch__</code> 方法定义在 <code>src/core/vdom/patch.js</code> 中。</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-keyword">function</span> patch (oldVnode, vnode, hydrating, removeOnly) &#123;<br>    ......<br>    <span class="hljs-keyword">if</span> (is<span class="hljs-constructor">Undef(<span class="hljs-params">oldVnode</span>)</span>) &#123;<br>      <span class="hljs-comment">// 当oldVnode不存在时，创建新的节点</span><br>      isInitialPatch = <span class="hljs-literal">true</span><br>      create<span class="hljs-constructor">Elm(<span class="hljs-params">vnode</span>, <span class="hljs-params">insertedVnodeQueue</span>)</span><br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-comment">// 对oldVnode和vnode进行diff，并对oldVnode打patch  </span><br>      const isRealElement = is<span class="hljs-constructor">Def(<span class="hljs-params">oldVnode</span>.<span class="hljs-params">nodeType</span>)</span><br>      <span class="hljs-keyword">if</span> (!isRealElement<span class="hljs-operator"> &amp;&amp; </span>same<span class="hljs-constructor">Vnode(<span class="hljs-params">oldVnode</span>, <span class="hljs-params">vnode</span>)</span>) &#123;<br>        <span class="hljs-comment">// patch existing root node</span><br>        patch<span class="hljs-constructor">Vnode(<span class="hljs-params">oldVnode</span>, <span class="hljs-params">vnode</span>, <span class="hljs-params">insertedVnodeQueue</span>, <span class="hljs-params">null</span>, <span class="hljs-params">null</span>, <span class="hljs-params">removeOnly</span>)</span><br>      &#125; <br>......<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>在 <code>patch</code> 方法中，我们看到会分为两种情况，一种是当 <code>oldVnode</code> 不存在时，会创建新的节点；另一种则是已经存在 <code>oldVnode</code> ，那么会对 <code>oldVnode</code> 和 <code>vnode</code> 进行 <code>diff</code> 及 <code>patch</code> 的过程。其中 <code>patch</code> 过程中会调用 <code>sameVnode</code> 方法来对对传入的2个 <code>vnode</code> 进行基本属性的比较，只有当基本属性相同的情况下才认为这个2个<code>vnode</code> 只是局部发生了更新，然后才会对这2个 <code>vnode</code> 进行 <code>diff</code>，如果2个 <code>vnode</code> 的基本属性存在不一致的情况，那么就会直接跳过 <code>diff</code> 的过程，进而依据 <code>vnode</code> 新建一个真实的 <code>dom</code>，同时删除老的 <code>dom</code>节点。</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-keyword">function</span> sameVnode (a, b) &#123;<br>  return (<br>    a.key<span class="hljs-operator"> === </span>b.key<span class="hljs-operator"> &amp;&amp;</span><br><span class="hljs-operator">    </span>a.tag<span class="hljs-operator"> === </span>b.tag<span class="hljs-operator"> &amp;&amp;</span><br><span class="hljs-operator">    </span>a.isComment<span class="hljs-operator"> === </span>b.isComment<span class="hljs-operator"> &amp;&amp;</span><br><span class="hljs-operator">    </span>is<span class="hljs-constructor">Def(<span class="hljs-params">a</span>.<span class="hljs-params">data</span>)</span><span class="hljs-operator"> === </span>is<span class="hljs-constructor">Def(<span class="hljs-params">b</span>.<span class="hljs-params">data</span>)</span><span class="hljs-operator"> &amp;&amp;</span><br><span class="hljs-operator">    </span>same<span class="hljs-constructor">InputType(<span class="hljs-params">a</span>, <span class="hljs-params">b</span>)</span><br>  )<br>&#125;<br></code></pre></td></tr></table></figure><p><code>diff</code> 过程中主要是通过调用 <code>patchVnode</code> 方法进行的:</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-keyword">function</span> patchVnode (oldVnode, vnode, insertedVnodeQueue, ownerArray, index, removeOnly) &#123;<br>  ...... <br>  const elm = vnode.elm = oldVnode.elm<br>  const oldCh = oldVnode.children<br>  const ch = vnode.children<br>  <span class="hljs-comment">// 如果vnode没有文本节点</span><br>  <span class="hljs-keyword">if</span> (is<span class="hljs-constructor">Undef(<span class="hljs-params">vnode</span>.<span class="hljs-params">text</span>)</span>) &#123;<br>    <span class="hljs-comment">// 如果oldVnode的children属性存在且vnode的children属性也存在  </span><br>    <span class="hljs-keyword">if</span> (is<span class="hljs-constructor">Def(<span class="hljs-params">oldCh</span>)</span><span class="hljs-operator"> &amp;&amp; </span>is<span class="hljs-constructor">Def(<span class="hljs-params">ch</span>)</span>) &#123;<br>      <span class="hljs-comment">// updateChildren，对子节点进行diff  </span><br>      <span class="hljs-keyword">if</span> (oldCh !== ch) update<span class="hljs-constructor">Children(<span class="hljs-params">elm</span>, <span class="hljs-params">oldCh</span>, <span class="hljs-params">ch</span>, <span class="hljs-params">insertedVnodeQueue</span>, <span class="hljs-params">removeOnly</span>)</span><br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (is<span class="hljs-constructor">Def(<span class="hljs-params">ch</span>)</span>) &#123;<br>      <span class="hljs-keyword">if</span> (process.env.NODE_ENV !== &#x27;production&#x27;) &#123;<br>        check<span class="hljs-constructor">DuplicateKeys(<span class="hljs-params">ch</span>)</span><br>      &#125;<br>      <span class="hljs-comment">// 如果oldVnode的text存在，那么首先清空text的内容,然后将vnode的children添加进去  </span><br>      <span class="hljs-keyword">if</span> (is<span class="hljs-constructor">Def(<span class="hljs-params">oldVnode</span>.<span class="hljs-params">text</span>)</span>) nodeOps.set<span class="hljs-constructor">TextContent(<span class="hljs-params">elm</span>, &#x27;&#x27;)</span><br>      add<span class="hljs-constructor">Vnodes(<span class="hljs-params">elm</span>, <span class="hljs-params">null</span>, <span class="hljs-params">ch</span>, 0, <span class="hljs-params">ch</span>.<span class="hljs-params">length</span> - 1, <span class="hljs-params">insertedVnodeQueue</span>)</span><br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (is<span class="hljs-constructor">Def(<span class="hljs-params">oldCh</span>)</span>) &#123;<br>      <span class="hljs-comment">// 删除elm下的oldchildren</span><br>      remove<span class="hljs-constructor">Vnodes(<span class="hljs-params">elm</span>, <span class="hljs-params">oldCh</span>, 0, <span class="hljs-params">oldCh</span>.<span class="hljs-params">length</span> - 1)</span><br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (is<span class="hljs-constructor">Def(<span class="hljs-params">oldVnode</span>.<span class="hljs-params">text</span>)</span>) &#123;<br>      <span class="hljs-comment">// oldVnode有子节点，而vnode没有，那么就清空这个节点  </span><br>      nodeOps.set<span class="hljs-constructor">TextContent(<span class="hljs-params">elm</span>, &#x27;&#x27;)</span><br>    &#125;<br>  &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (oldVnode.text !== vnode.text) &#123;<br>    <span class="hljs-comment">// 如果oldVnode和vnode文本属性不同，那么直接更新真是dom节点的文本元素</span><br>    nodeOps.set<span class="hljs-constructor">TextContent(<span class="hljs-params">elm</span>, <span class="hljs-params">vnode</span>.<span class="hljs-params">text</span>)</span><br>  &#125;<br>  ......<br>&#125;<br></code></pre></td></tr></table></figure><p>从以上代码得知，</p><p><code>diff</code> 过程中又分了好几种情况，<code>oldCh</code> 为 <code>oldVnode</code>的子节点，<code>ch</code> 为 <code>Vnode</code>的子节点：</p><ul><li>首先进行文本节点的判断，若 <code>oldVnode.text !== vnode.text</code>，那么就会直接进行文本节点的替换；</li><li>在<code>vnode</code>  没有文本节点的情况下，进入子节点的 <code>diff</code>；</li><li>当 <code>oldCh</code> 和 <code>ch</code> 都存在且不相同的情况下，调用 <code>updateChildren</code> 对子节点进行 <code>diff</code>；</li><li>若 <code>oldCh</code>不存在，<code>ch</code> 存在，首先清空 <code>oldVnode</code> 的文本节点，同时调用 <code>addVnodes</code> 方法将 <code>ch</code> 添加到<code>elm</code>真实 <code>dom</code> 节点当中；</li><li>若 <code>oldCh</code>存在，<code>ch</code>不存在，则删除 <code>elm</code> 真实节点下的 <code>oldCh</code> 子节点；</li><li>若 <code>oldVnode</code> 有文本节点，而 <code>vnode</code> 没有，那么就清空这个文本节点。</li></ul><h4 id="3-2-2、子节点-diff-流程分析"><a href="#3-2-2、子节点-diff-流程分析" class="headerlink" title="3.2.2、子节点 diff 流程分析"></a>3.2.2、子节点 <code>diff</code> 流程分析</h4><p><strong>（1）<code>Vue.js</code> 源码</strong></p><p>​    这里着重分析下<code>updateChildren</code>方法，它也是整个 <code>diff</code> 过程中最重要的环节，以下为 <code>Vue.js</code> 的源码过程，为了更形象理解 <code>diff</code> 过程，我们给出相关的示意图来讲解。</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><code class="hljs haxe"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">updateChildren</span> </span>(parentElm, oldCh, <span class="hljs-keyword">new</span><span class="hljs-type">Ch</span>, insertedVnodeQueue, removeOnly) &#123;<br>  <span class="hljs-comment">// 为oldCh和newCh分别建立索引，为之后遍历的依据</span><br>  let oldStartIdx = <span class="hljs-number">0</span><br>  let <span class="hljs-keyword">new</span><span class="hljs-type">StartIdx</span> = <span class="hljs-number">0</span><br>  let oldEndIdx = oldCh.length - <span class="hljs-number">1</span><br>  let oldStartVnode = oldCh[<span class="hljs-number">0</span>]<br>  let oldEndVnode = oldCh[oldEndIdx]<br>  let <span class="hljs-keyword">new</span><span class="hljs-type">EndIdx</span> = <span class="hljs-keyword">new</span><span class="hljs-type">Ch</span>.length - <span class="hljs-number">1</span><br>  let <span class="hljs-keyword">new</span><span class="hljs-type">StartVnode</span> = <span class="hljs-keyword">new</span><span class="hljs-type">Ch</span>[<span class="hljs-number">0</span>]<br>  let <span class="hljs-keyword">new</span><span class="hljs-type">EndVnode</span> = <span class="hljs-keyword">new</span><span class="hljs-type">Ch</span>[<span class="hljs-keyword">new</span><span class="hljs-type">EndIdx</span>]<br>  let oldKeyToIdx, idxInOld, vnodeToMove, refElm<br><br>  <span class="hljs-comment">// 直到oldCh或者newCh被遍历完后跳出循环</span><br>  <span class="hljs-keyword">while</span> (oldStartIdx &lt;= oldEndIdx &amp;&amp; <span class="hljs-keyword">new</span><span class="hljs-type">StartIdx</span> &lt;= <span class="hljs-keyword">new</span><span class="hljs-type">EndIdx</span>) &#123;<br>    <span class="hljs-keyword">if</span> (isUndef(oldStartVnode)) &#123;<br>      oldStartVnode = oldCh[++oldStartIdx] <span class="hljs-comment">// Vnode has been moved left</span><br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (isUndef(oldEndVnode)) &#123;<br>      oldEndVnode = oldCh[--oldEndIdx]<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (sameVnode(oldStartVnode, <span class="hljs-keyword">new</span><span class="hljs-type">StartVnode</span>)) &#123;<br>      patchVnode(oldStartVnode, <span class="hljs-keyword">new</span><span class="hljs-type">StartVnode</span>, insertedVnodeQueue, <span class="hljs-keyword">new</span><span class="hljs-type">Ch</span>, <span class="hljs-keyword">new</span><span class="hljs-type">StartIdx</span>)<br>      oldStartVnode = oldCh[++oldStartIdx]<br>      <span class="hljs-keyword">new</span><span class="hljs-type">StartVnode</span> = <span class="hljs-keyword">new</span><span class="hljs-type">Ch</span>[++<span class="hljs-keyword">new</span><span class="hljs-type">StartIdx</span>]<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (sameVnode(oldEndVnode, <span class="hljs-keyword">new</span><span class="hljs-type">EndVnode</span>)) &#123;<br>      patchVnode(oldEndVnode, <span class="hljs-keyword">new</span><span class="hljs-type">EndVnode</span>, insertedVnodeQueue, <span class="hljs-keyword">new</span><span class="hljs-type">Ch</span>, <span class="hljs-keyword">new</span><span class="hljs-type">EndIdx</span>)<br>      oldEndVnode = oldCh[--oldEndIdx]<br>      <span class="hljs-keyword">new</span><span class="hljs-type">EndVnode</span> = <span class="hljs-keyword">new</span><span class="hljs-type">Ch</span>[--<span class="hljs-keyword">new</span><span class="hljs-type">EndIdx</span>]<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (sameVnode(oldStartVnode, <span class="hljs-keyword">new</span><span class="hljs-type">EndVnode</span>)) &#123; <span class="hljs-comment">// Vnode moved right</span><br>      patchVnode(oldStartVnode, <span class="hljs-keyword">new</span><span class="hljs-type">EndVnode</span>, insertedVnodeQueue, <span class="hljs-keyword">new</span><span class="hljs-type">Ch</span>, <span class="hljs-keyword">new</span><span class="hljs-type">EndIdx</span>)<br>      canMove &amp;&amp; nodeOps.insertBefore(parentElm, oldStartVnode.elm, nodeOps.nextSibling(oldEndVnode.elm))<br>      oldStartVnode = oldCh[++oldStartIdx]<br>      <span class="hljs-keyword">new</span><span class="hljs-type">EndVnode</span> = <span class="hljs-keyword">new</span><span class="hljs-type">Ch</span>[--<span class="hljs-keyword">new</span><span class="hljs-type">EndIdx</span>]<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (sameVnode(oldEndVnode, <span class="hljs-keyword">new</span><span class="hljs-type">StartVnode</span>)) &#123; <span class="hljs-comment">// Vnode moved left</span><br>      patchVnode(oldEndVnode, <span class="hljs-keyword">new</span><span class="hljs-type">StartVnode</span>, insertedVnodeQueue, <span class="hljs-keyword">new</span><span class="hljs-type">Ch</span>, <span class="hljs-keyword">new</span><span class="hljs-type">StartIdx</span>)<br>      canMove &amp;&amp; nodeOps.insertBefore(parentElm, oldEndVnode.elm, oldStartVnode.elm)<br>      oldEndVnode = oldCh[--oldEndIdx]<br>      <span class="hljs-keyword">new</span><span class="hljs-type">StartVnode</span> = <span class="hljs-keyword">new</span><span class="hljs-type">Ch</span>[++<span class="hljs-keyword">new</span><span class="hljs-type">StartIdx</span>]<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-keyword">if</span> (isUndef(oldKeyToIdx)) oldKeyToIdx = createKeyToOldIdx(oldCh, oldStartIdx, oldEndIdx)<br>      idxInOld = isDef(<span class="hljs-keyword">new</span><span class="hljs-type">StartVnode</span>.key)<br>        ? oldKeyToIdx[<span class="hljs-keyword">new</span><span class="hljs-type">StartVnode</span>.key]<br>        : <span class="hljs-type">findIdxInOld</span>(<span class="hljs-keyword">new</span><span class="hljs-type">StartVnode</span>, oldCh, oldStartIdx, oldEndIdx)<br>      <span class="hljs-keyword">if</span> (isUndef(idxInOld)) &#123; <span class="hljs-comment">// New element</span><br>        createElm(<span class="hljs-keyword">new</span><span class="hljs-type">StartVnode</span>, insertedVnodeQueue, parentElm, oldStartVnode.elm, <span class="hljs-literal">false</span>, <span class="hljs-keyword">new</span><span class="hljs-type">Ch</span>, <span class="hljs-keyword">new</span><span class="hljs-type">StartIdx</span>)<br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>        vnodeToMove = oldCh[idxInOld]<br>        <span class="hljs-keyword">if</span> (sameVnode(vnodeToMove, <span class="hljs-keyword">new</span><span class="hljs-type">StartVnode</span>)) &#123;<br>          patchVnode(vnodeToMove, <span class="hljs-keyword">new</span><span class="hljs-type">StartVnode</span>, insertedVnodeQueue, <span class="hljs-keyword">new</span><span class="hljs-type">Ch</span>, <span class="hljs-keyword">new</span><span class="hljs-type">StartIdx</span>)<br>          oldCh[idxInOld] = undefined<br>          canMove &amp;&amp; nodeOps.insertBefore(parentElm, vnodeToMove.elm, oldStartVnode.elm)<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>          <span class="hljs-comment">// same key but different element. treat as new element</span><br>          createElm(<span class="hljs-keyword">new</span><span class="hljs-type">StartVnode</span>, insertedVnodeQueue, parentElm, oldStartVnode.elm, <span class="hljs-literal">false</span>, <span class="hljs-keyword">new</span><span class="hljs-type">Ch</span>, <span class="hljs-keyword">new</span><span class="hljs-type">StartIdx</span>)<br>        &#125;<br>      &#125;<br>      <span class="hljs-keyword">new</span><span class="hljs-type">StartVnode</span> = <span class="hljs-keyword">new</span><span class="hljs-type">Ch</span>[++<span class="hljs-keyword">new</span><span class="hljs-type">StartIdx</span>]<br>    &#125;<br>  &#125;<br>  <span class="hljs-keyword">if</span> (oldStartIdx &gt; oldEndIdx) &#123;<br>    refElm = isUndef(<span class="hljs-keyword">new</span><span class="hljs-type">Ch</span>[<span class="hljs-keyword">new</span><span class="hljs-type">EndIdx</span> + <span class="hljs-number">1</span>]) ? <span class="hljs-literal">null</span> : <span class="hljs-type">newCh</span>[<span class="hljs-keyword">new</span><span class="hljs-type">EndIdx</span> + <span class="hljs-number">1</span>].elm<br>    addVnodes(parentElm, refElm, <span class="hljs-keyword">new</span><span class="hljs-type">Ch</span>, <span class="hljs-keyword">new</span><span class="hljs-type">StartIdx</span>, <span class="hljs-keyword">new</span><span class="hljs-type">EndIdx</span>, insertedVnodeQueue)<br>  &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-keyword">new</span><span class="hljs-type">StartIdx</span> &gt; <span class="hljs-keyword">new</span><span class="hljs-type">EndIdx</span>) &#123;<br>    removeVnodes(parentElm, oldCh, oldStartIdx, oldEndIdx)<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>在开始遍历 <code>diff</code> 前，首先给 <code>oldCh</code>和 <code>newCh</code> 分别分配一个 <code>startIndex</code> 和 <code>endIndex</code> 来作为遍历的索引，当<code>oldCh</code> 或者 <code>newCh</code> 遍历完后(遍历完的条件就是 <code>oldCh</code> 或者 <code>newCh</code> 的 <code>startIndex &gt;= endIndex</code> )，就停止<code>oldCh</code> 和 <code>newCh</code> 的 <code>diff</code> 过程。接下来通过实例来看下整个 <code>diff</code> 的过程(节点属性中不带 <code>key</code> 的情况)。</p><p><strong>（2）无 <code>key</code> 的 <code>diff</code> 过程</strong></p><p>我们通过以下示意图对以上代码过程进行讲解：</p><p>（2.1）首先从第一个节点开始比较，不管是 <code>oldCh</code> 还是 <code>newCh</code> 的起始或者终止节点都不存在 <code>sameVnode</code> ，同时节点属性中是不带 <code>key</code>标记的，因此第一轮的 <code>diff</code> 完后，<code>newCh</code>的 <code>startVnode</code> 被添加到 <code>oldStartVnode</code>的前面，同时 <code>newStartIndex</code>前移一位；</p><p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/7/23/16c1e0e2878c44dc~tplv-t2oaga2asx-zoom-in-crop-mark:815:0:0:0.awebp" alt="å¾çæè¿°"></p><p>（2.2）第二轮的 <code>diff</code>中，满足 <code>sameVnode(oldStartVnode, newStartVnode)</code>，因此对这2个 <code>vnode</code> 进行<code>diff</code>，最后将 <code>patch</code> 打到 <code>oldStartVnode</code> 上，同时 <code>oldStartVnode</code>和 <code>newStartIndex</code> 都向前移动一位 ；</p><p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/7/23/16c1e0e28889eaff~tplv-t2oaga2asx-zoom-in-crop-mark:815:0:0:0.awebp" alt="å¾çæè¿°"></p><p>（2.3）第三轮的 <code>diff</code> 中，满足 <code>sameVnode(oldEndVnode, newStartVnode)</code>，那么首先对  <code>oldEndVnode</code>和<code>newStartVnode</code> 进行 <code>diff</code>，并对 <code>oldEndVnode</code>进行 <code>patch</code>，并完成  <code>oldEndVnode</code> 移位的操作，最后<code>newStartIndex</code>前移一位，<code>oldStartVnode</code> 后移一位；</p><p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/7/23/16c1e0e289a351b2~tplv-t2oaga2asx-zoom-in-crop-mark:815:0:0:0.awebp" alt="å¾çæè¿°"></p><p>（2.4）第四轮的 <code>diff</code>中，过程同步骤3；</p><p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/7/23/16c1e0e289f9213e~tplv-t2oaga2asx-zoom-in-crop-mark:815:0:0:0.awebp" alt="å¾çæè¿°"></p><p>（2.5）第五轮的 <code>diff</code> 中，同过程1；</p><p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/7/23/16c1e0e28aee99a1~tplv-t2oaga2asx-zoom-in-crop-mark:815:0:0:0.awebp" alt="å¾çæè¿°"></p><p>（2.6）遍历的过程结束后，<code>newStartIdx &gt; newEndIdx</code>，说明此时 <code>oldCh</code> 存在多余的节点，那么最后就需要将这些多余的节点删除。</p><p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/7/23/16c1e0e2ca893b49~tplv-t2oaga2asx-zoom-in-crop-mark:815:0:0:0.awebp" alt="å¾çæè¿°"></p><p><strong>（3）有 <code>key</code> 的 <code>diff</code> 流程</strong></p><p>在 <code>vnode</code> 不带 <code>key</code> 的情况下，每一轮的 <code>diff</code> 过程当中都是<code>起始</code>和<code>结束</code>节点进行比较，直到 <code>oldCh</code> 或者<code>newCh</code> 被遍历完。而当为 <code>vnode</code> 引入 <code>key</code> 属性后，在每一轮的 <code>diff</code> 过程中，当<code>起始</code>和<code>结束</code>节点都没有找到<code>sameVnode</code> 时，然后再判断在 <code>newStartVnode</code> 的属性中是否有 <code>key</code>，且是否在 <code>oldKeyToIndx</code> 中找到对应的节点 ：</p><ul><li>如果不存在这个 <code>key</code>，那么就将这个 <code>newStartVnode</code>作为新的节点创建且插入到原有的 <code>root</code> 的子节点中；</li><li>如果存在这个 <code>key</code>，那么就取出 <code>oldCh</code> 中的存在这个 <code>key</code> 的 <code>vnode</code>，然后再进行 <code>diff</code> 的过；</li></ul><p>通过以上分析，给<code>vdom</code>上添加 <code>key</code>属性后，遍历 <code>diff</code> 的过程中，当<strong>起始点</strong>，<strong>结束点</strong>的<strong>搜寻</strong>及 <code>diff</code> 出现还是无法匹配的情况下时，就会用 <code>key</code> 来作为唯一标识，来进行 <code>diff</code>，这样就可以提高 <code>diff</code> 效率。</p><p>带有 <code>Key</code>属性的 <code>vnode</code>的 <code>diff</code> 过程可见下图：</p><p>（3.1）首先从第一个节点开始比较，不管是 <code>oldCh</code> 还是 <code>newCh</code> 的起始或者终止节点都不存在 <code>sameVnode</code>，但节点属性中是带 <code>key</code> 标记的， 然后在 <code>oldKeyToIndx</code> 中找到对应的节点，这样第一轮 <code>diff</code> 过后 <code>oldCh</code> 上的<code>B节点</code>被删除了，但是 <code>newCh</code> 上的<code>B节点</code>上 <code>elm</code> 属性保持对 <code>oldCh</code> 上 <code>B节点</code> 的<code>elm</code>引用。</p><p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/7/23/16c1e0e2db1c4812~tplv-t2oaga2asx-zoom-in-crop-mark:815:0:0:0.awebp" alt="å¾çæè¿°"></p><p>（3.2）第二轮的 <code>diff</code> 中，满足 <code>sameVnode(oldStartVnode, newStartVnode)</code>，因此对这2个 <code>vnode</code> 进行<code>diff</code>，最后将 <code>patch</code> 打到 <code>oldStartVnode</code>上，同时 <code>oldStartVnode</code> 和 <code>newStartIndex</code> 都向前移动一位 ；</p><p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/7/23/16c1e0e2d7df4fbf~tplv-t2oaga2asx-zoom-in-crop-mark:815:0:0:0.awebp" alt="å¾çæè¿°"></p><p>（3.3）第三轮的 <code>diff</code>中，满足 <code>sameVnode(oldEndVnode, newStartVnode)</code>，那么首先对 <code>oldEndVnode</code> 和<code>newStartVnode</code> 进行 <code>diff</code>，并对 <code>oldEndVnode</code> 进行 <code>patch</code>，并完成 <code>oldEndVnode</code> 移位的操作，最后<code>newStartIndex</code> 前移一位，<code>oldStartVnode</code>后移一位；</p><p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/7/23/16c1e0e2e2a2835e~tplv-t2oaga2asx-zoom-in-crop-mark:815:0:0:0.awebp" alt="å¾çæè¿°"></p><p>（3.4）第四轮的<code>diff</code>中，过程同步骤2；</p><p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/7/23/16c1e0e2e507aec0~tplv-t2oaga2asx-zoom-in-crop-mark:815:0:0:0.awebp" alt="å¾çæè¿°"></p><p>（3.5）第五轮的<code>diff</code>中，因为此时 <code>oldStartIndex</code> 已经大于 <code>oldEndIndex</code>，所以将剩余的 <code>Vnode</code> 队列插入队列最后。</p><p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/7/23/16c1e0e3178398fc~tplv-t2oaga2asx-zoom-in-crop-mark:815:0:0:0.awebp" alt="å¾çæè¿°"></p><h3 id="3-3、patch-过程"><a href="#3-3、patch-过程" class="headerlink" title="3.3、patch 过程"></a>3.3、<code>patch</code> 过程</h3><p>通过3.2章节介绍的 <code>diff</code> 过程中，我们会看到 <code>nodeOps</code> 相关的方法对真实 <code>DOM</code> 结构进行操作，<code>nodeOps</code> 定义在 <code>src/platforms/web/runtime/node-ops.js</code> 中，其为基本 <code>DOM</code> 操作，这里就不在详细介绍。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">export</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">createElementNS</span> (<span class="hljs-params"><span class="hljs-keyword">namespace</span>: <span class="hljs-built_in">string</span>, tagName: <span class="hljs-built_in">string</span></span>): <span class="hljs-title">Element</span> </span>&#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-built_in">document</span>.createElementNS(namespaceMap[<span class="hljs-keyword">namespace</span>], tagName)<br>&#125;<br><br>export function createTextNode (text: string): Text &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-built_in">document</span>.createTextNode(text)<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">createComment</span> (<span class="hljs-params">text: <span class="hljs-built_in">string</span></span>): <span class="hljs-title">Comment</span> </span>&#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-built_in">document</span>.createComment(text)<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">insertBefore</span> (<span class="hljs-params">parentNode: Node, newNode: Node, referenceNode: Node</span>) </span>&#123;<br>  parentNode.insertBefore(newNode, referenceNode)<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">removeChild</span> (<span class="hljs-params">node: Node, child: Node</span>) </span>&#123;<br>  node.removeChild(child)<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-4、总结"><a href="#3-4、总结" class="headerlink" title="3.4、总结"></a>3.4、总结</h3><p>通过前三小节简析，我们从主线上把模板和数据如何渲染成最终的 <code>DOM</code> 的过程分析完毕了，我们可以通过下图更直观地看到从初始化 <code>Vue</code> 到最终渲染的整个过程。</p><p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/7/23/16c1e2486c7e0ed7~tplv-t2oaga2asx-zoom-in-crop-mark:815:0:0:0.awebp" alt="img"></p><h2 id="四、总结"><a href="#四、总结" class="headerlink" title="四、总结"></a>四、总结</h2><p>本文从通过介绍真实 <code>DOM</code> 结构其解析过程以及存在的问题，从而引出为什么需要虚拟 <code>DOM</code>；然后分析虚拟<code>DOM</code> 的好处，以及其一些理论基础和基础算法的实现；最后根据我们已经掌握的基础知识，再一步步去查看<code>Vue.js</code> 的源码如何实现的。从存在问题 —&gt; 理论基础 —&gt; 具体实践，一步步深入，帮助大家更好的了解什么是<code>Virtual DOM</code>、为什么需要 <code>Virtual DOM</code>、以及 <code>Virtual DOM</code>的具体实现，</p>]]></content>
    
    
    
    <tags>
      
      <tag>Vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>计算机网络知识点</title>
    <link href="/2021/06/27/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    <url>/2021/06/27/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E7%9F%A5%E8%AF%86%E7%82%B9/</url>
    
    <content type="html"><![CDATA[<h1 id="计算机网络"><a href="#计算机网络" class="headerlink" title="计算机网络"></a>计算机网络</h1><p>TCP/IP是一个在不同网络间实现信息传输的协议簇，包括FTP、SMTP、TCP、UDP、IP等协议。</p><h2 id="TCP与UDP"><a href="#TCP与UDP" class="headerlink" title="TCP与UDP"></a>TCP与UDP</h2><p>TCP 传输控制协议，UDP用户数据报协议，是传输层最终要的两种协议</p><p>TCP协议是一种可靠的、一对一的面向有连接的通信协议</p><p>可靠性</p><p>1.在数据传输的时候建立一个通道，并且这个通道只能够被客户端和服务端使用。因此TCP协议只能面向一对一的连接。</p><p>2.TCP协议会将传输的数据包分成若干部分，并且在首部添加一个检验字节，当数据的一个部分被接收完毕之后，服务端对这部分的数据进行校验</p><p>3.如果数据完整度和准确度为100%会要求下一部分的传输，如果完整性和准确性与原来不服，服务端会要求客户端再次传输。</p><p>4.通信前通过三次握手建立通道，完毕之后四次挥手关闭通道。</p><p>特点是：可靠性好，一对一通信</p><p>应用场景：文件传输</p><p>UDP协议是无连接的，可以实现多对一，一对多和一对一连接的通信协议。</p><p>1.UDP在数据传输之前不需要建立通道。</p><p>2.会一次性把所有数据发送出去，不会对数据的完整性检验，同时也不会对数据进行重新传输。</p><p>3.以恒定数据发送数据，可能会造成丢包</p><p>特点是：速度快 延迟低，实时性好</p><p>应用场景：直播、视频聊天语音聊天</p><h2 id="TCP"><a href="#TCP" class="headerlink" title="TCP"></a>TCP</h2><h3 id="TCP的头部结构"><a href="#TCP的头部结构" class="headerlink" title="TCP的头部结构"></a>TCP的头部结构</h3><p><img src="C:\Users\liyu\AppData\Roaming\Typora\typora-user-images\image-20210813145652792.png" alt="image-20210813145652792"></p><p>从应用层-&gt;传输层-&gt;网络层-&gt;链路层，每经过一次都会在报文中增加相应的首部。</p><p>TCP首部包括20个字节</p><p><img src="C:\Users\liyu\AppData\Roaming\Typora\typora-user-images\image-20210813150506333.png" alt="image-20210813150506333"></p><p>1-2：源端口号</p><p>3-4：目的端口号</p><p>5-8：32位序号</p><p>9-12：32位确认序号</p><p>13：首部长度</p><p>6bit保留</p><p>6bit 标识位</p><p>15-16 窗口大小</p><p>17-18 校验和</p><p>19-20紧急指针</p><h4 id="标识位"><a href="#标识位" class="headerlink" title="标识位"></a>标识位</h4><ul><li>URG：为1时，表示紧急指针有效</li><li>ACK：确认标识，连接建立成功后，总为1。为1时确认号有效</li><li>PSH：接收方应尽快把这个报文交给应用层</li><li>RST：复位标识，重建连接</li><li>SYN：建立新连接时，该位为0</li><li>FIN：关闭连接标识</li></ul><h3 id="TCP的三次握手"><a href="#TCP的三次握手" class="headerlink" title="TCP的三次握手"></a>TCP的三次握手</h3><p>客户端发送SYN，表示要建立连接，同时带上序列号ISN</p><p>服务端返回ASK（序号为客户端序号+1）作为确认。同时发送SYN应答（SYN序号为服务端唯一的序号）</p><p>客户端发送ACK收到确认恢复（序号为服务端序号+1）</p><p>第一次握手证明发送发可以发送数据</p><p>第二次握手ASK确保接收方能接收数据 ，SYN确保接收方能发送数据</p><p>第三次握手 确保了发送方能接收数据</p><h3 id="TCP的四次挥手"><a href="#TCP的四次挥手" class="headerlink" title="TCP的四次挥手"></a>TCP的四次挥手</h3><p>主动关闭的一方发送FIN，表示要单方面关闭数据传输</p><p>服务端接收到FIN后，发送ACK确认（序列号为收到的序号+1）</p><p>服务端数据传输完毕，发送FIN，表示关闭这个方向数据传输</p><p>客户端恢复ASK确认回复</p><h3 id="为什么是四次挥手而不是三次？"><a href="#为什么是四次挥手而不是三次？" class="headerlink" title="为什么是四次挥手而不是三次？"></a>为什么是四次挥手而不是三次？</h3><p>因为服务端收到FIN不会立刻返回FIN，而是先返回ACK确认收到。当服务端所有报文发送完毕，才会发送FIN确认。这一段时间研制造成了四次挥手</p><h3 id="TCP流量控制——滑动窗口"><a href="#TCP流量控制——滑动窗口" class="headerlink" title="TCP流量控制——滑动窗口"></a>TCP流量控制——滑动窗口</h3><p>当发送端发送的速度过快，接收端来不接接收，会造成数据丢失，流量控制让发送方发送速率不要太快，让接收方来的及接收。</p><p>发送端冲口：</p><p><img src="C:\Users\liyu\AppData\Roaming\Typora\typora-user-images\image-20210813153755234.png" alt="image-20210813153755234"></p><p><img src="C:\Users\liyu\AppData\Roaming\Typora\typora-user-images\image-20210813153804828.png" alt="image-20210813153804828"></p><h3 id="TCP拥塞控制"><a href="#TCP拥塞控制" class="headerlink" title="TCP拥塞控制"></a>TCP拥塞控制</h3><p>在某个时间内网络中对资源的需求超过了网络中的可用部分，导致网络性能下降。</p><p>在拥塞控制中，发送方维持一个拥塞窗口cwnd，他的大小取决于网络的拥塞程度，并且动态变化。他有两个算法：慢启动算法、拥塞避免算法</p><p>慢启动：每个传输轮之后CWND加倍。</p><p>拥塞避免：每个传输轮次CWND+1，如果发生网络拥塞，重新设置ssthresh=ssthrsh/2，cwnd=1执行慢启动。</p><p>其中：</p><p>慢启动门限（ssthresh）</p><ul><li>当cwnd &lt; ssthresh时，使用慢开始算法。</li><li>当cwnd &gt; ssthresh时，改用拥塞避免算法。</li><li>当cwnd = ssthresh时，慢开始与拥塞避免算法随机</li></ul><h3 id="TCP可靠性保证手段"><a href="#TCP可靠性保证手段" class="headerlink" title="TCP可靠性保证手段"></a>TCP可靠性保证手段</h3><p>客户端发送确认，服务端接收确认，服务端发送确认，客户端接收确认。</p><p>TCP的可靠传输的原理就是超时重传，重发的机制有两种：超市重传机 和快重传</p><p>超时重传：使用拥塞控制的方法发送数据后，如果在重发超时内没有收到接收方的ACK,重新设置ssthresh=ssthrsh/2，cwnd=1执行慢启动。重新发数据。</p><p>TCP快传：发送方收到连续三个重复的确认后执行，重新设置ssthresh=ssthrsh/2，cwnd=1执行慢启动。重新发数据。</p><h2 id="HTTP和HTTPS的区别"><a href="#HTTP和HTTPS的区别" class="headerlink" title="HTTP和HTTPS的区别"></a>HTTP和HTTPS的区别</h2>]]></content>
    
    
    
    <tags>
      
      <tag>计算机网络</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>最近积累的一些小知识点</title>
    <link href="/2021/06/15/%E6%9C%80%E8%BF%91%E7%A7%AF%E7%B4%AF%E7%9A%84%E4%B8%80%E4%BA%9B%E5%B0%8F%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    <url>/2021/06/15/%E6%9C%80%E8%BF%91%E7%A7%AF%E7%B4%AF%E7%9A%84%E4%B8%80%E4%BA%9B%E5%B0%8F%E7%9F%A5%E8%AF%86%E7%82%B9/</url>
    
    <content type="html"><![CDATA[<h2 id="css"><a href="#css" class="headerlink" title="css"></a>css</h2><p><strong>1.盒子垂直水平居中的方法</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs css">//方法<span class="hljs-number">1</span><br><span class="hljs-selector-class">.parent</span>&#123;<br><br><span class="hljs-attribute">position</span>:relative;<br><br>&#125;<br><br><span class="hljs-selector-class">.child</span>&#123;<br><br><span class="hljs-attribute">position</span>:absolute;<br><br><span class="hljs-attribute">top</span>:<span class="hljs-number">50%</span>;<br><br><span class="hljs-attribute">left</span>:<span class="hljs-number">50%</span>;<br><br><span class="hljs-attribute">margin-top</span>:-<span class="hljs-number">50px</span>;<br><br><span class="hljs-attribute">margin-left</span>:-<span class="hljs-number">50px</span>;<br><br>&#125;<br><br>//方法<span class="hljs-number">2</span><br><span class="hljs-selector-class">.parent</span>&#123;<br>    <span class="hljs-attribute">position</span>:relative<br>&#125;<br><span class="hljs-selector-class">.child</span>&#123;<br>    <span class="hljs-attribute">position</span>:absolute;<br>    <span class="hljs-attribute">top</span>:<span class="hljs-number">50%</span>;<br>    <span class="hljs-attribute">left</span>:<span class="hljs-number">50%</span><br>    transform:<span class="hljs-built_in">translate</span>(-<span class="hljs-number">50%</span>,-<span class="hljs-number">50%</span>);<br>&#125;<br>//方法三<br><span class="hljs-attribute">display</span>：<span class="hljs-attribute">flex</span><br><br><span class="hljs-attribute">justify-content</span>：center<br><br>align-item：center<br></code></pre></td></tr></table></figure><p><strong>2.css 清除浮动</strong></p><p>方法一：在浮动的元素后增加</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs applescript">&lt;<span class="hljs-keyword">div</span> <span class="hljs-built_in">class</span>=<span class="hljs-string">&quot;clear&quot;</span>&gt;&lt;/<span class="hljs-keyword">div</span>&gt;<br>.clear&#123;<br>clear:both;<br>&#125;<br></code></pre></td></tr></table></figure><p>方法二：在包裹float的容器元素上增加 overfloat：hidden  或者 overfloat：auto</p><p>flex:1什么意思，三个属性是什么</p><p><strong>3.BFC的理解，有什么用</strong></p><p>Block Formatting Context 跨级格式化上下文，是一个有隔离功能的容器，里面的布局不会影响外部的元素。</p><p>浮动定位（绝对定位，固定定位）会触发，应用：阻止浮动元素的覆盖，左边定宽，右边自适应，下外边距折叠，清除浮动。</p><p><strong>4.px em rem 区别，rem怎么实现自适应</strong></p><p>px像素。相对屏幕分辨率说的，</p><p>em 相对当前对象内的文本字体大小，默认情况下1em=16px</p><p>rem 相对于根元素设置大小，设置 根元素的字体大小，整个的大小也对相对改变</p><p>cass 实现三角形</p><h2 id="JS"><a href="#JS" class="headerlink" title="JS"></a>JS</h2><p><strong>1.JS的原始类型？null是对象吗？</strong></p><p>js的原始类型 null undefined boolean number string symbol</p><p> <strong>2.对象和原始类型的不同之处？函数参数是对象会发生什么问题？</strong></p><p>js中除了原始类型其他的都是对象类型。对象类型和原始类型的不同之处是，原始类型中存储的数据的值，对象类型中存储的指针，通过访问指针对内存中的数据进行修改。</p><p>当函数参数是对象时，a赋值给b，赋的值是a中存储地址而不是真实的值。修改b的值实际是通过访问b中存储的地址修改了内存中的值，此时访问a的值还是通过a中存储的地址去访问内存中的值，这是这个值已经被b修改。</p><p><strong>深浅拷贝</strong></p><p>普通拷贝：拷贝基本类型的值，对象类型的地址</p><p>浅拷贝，拷贝基本类型的值，对象类型中 基本类型的值，对象类型的地址。</p><p>怎么实现浅拷贝？可以用     <code>Object.assign()</code>    <code>...</code></p><p>深拷贝，拷贝所有类型的值</p><p>怎么实现深拷贝？<code>JSON.parse(JSON.stringify(object))</code></p><p><strong>作用域 作用域链</strong></p><p>变量起作用的地方叫作用域一般作用域有全局作用域（var）和块级作用域（let const）。</p><p><strong>闭包？形成原因？ 作用？</strong></p><p>闭包：有权访问另一个函数作用域的函数</p><p>形成原因：存在上级作用域的引用</p><p>作用：1.保护函数的私有变量不受外部干扰2.形成不被销毁的栈内存3.将上级作用域的引用保存下来，实现方法或属性的私有化</p><p>典型题目</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; i++) &#123;<br>    <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>, i);<br>    &#125;, <span class="hljs-number">1000</span>);<br>&#125;<br><br><span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>, i);<br><br></code></pre></td></tr></table></figure><p>原型原型链</p><p><strong>let var const</strong></p><p>var全局作用域，可以在windows访问，同时存在变量提升。</p><p>let 仅作用于块级作用域，有临时死区</p><p>const和let差不多区别是，第一次声明需要设置初始值，并且声明的原始类型不可改变，对象类型不可修改地址（地址指向的数据可以改）。</p><p><strong>this指向 普通函数？和箭头函数？  怎么改变普通函数里面的this指向？</strong></p><p>一般函数的this都指向函数的地方，如果是对象实例化的直接指向实例化的对象。</p><p>箭头函数本身没有this，使用的this看上级作用域</p><p>想修改普通函数的this指向可以通过apply call bind</p><p><strong>apply call bind？ 有什么区别？ apply实现bind函数？</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js">fun.call(thisArg, param1, param2, ...)<br>fun.apply(thisArg, [param1,param2,...])<br>fun.bind(thisArg, param1, param2, ...)<br></code></pre></td></tr></table></figure><p>返回值</p><p>call apply返回值：fun执行的结果</p><p>bind返回值：fun的拷贝 </p><p>参数：</p><p><code>thisArg</code>：新的this指向</p><p><code>param1,param2</code>(可选): 传给<code>fun</code>的参数。</p><p>promise async await 区别</p><p>es6新特性</p><p>链表在js的实现，和数组的区别</p><p> 介绍链表 栈 队列 树的差异<br>数组增删比链表麻烦 为什么</p><h2 id="vue"><a href="#vue" class="headerlink" title="vue"></a>vue</h2><p><strong>1.vue指令</strong></p><p><strong>html内容绑定：</strong></p><p>v-model=“ vue值”</p><p>v-on：触发=“触发之后执行的函数”</p><p>​    简写 @触发=“触发之后执行的函数”</p><p><strong>html属性绑定</strong></p><p>v-bind:属性=“ vue值”      v-bind:class=“ {css样式：true  }”</p><p>​    简写  :属性=“ vue值”</p><p><strong>html插入内容</strong></p><p>v-html=“vue值”</p><p>更新元素的 <code>innerHTML</code></p><p>v-text=”vue值”</p><p>更新元素的 <code>textContent</code></p><p><strong>2..vue生命周期</strong></p><p>beforeCreated</p><p>created</p><p>beforeMounted</p><p>mounted</p><p>beforeupdated</p><p>updated</p><p>detroyed</p><p>beforeDestroy</p><p><strong>第一次加载页面的时候会触发哪些钩子函数</strong></p><p>beforeCreate, created, beforeMount, mounted </p><p><strong>在哪个钩子阶段可以操作DOM</strong>  </p><p>mounted</p><p><strong>父组件向子组件传值</strong> </p><p>父组件 v-bind  子组件 props 接收</p><p><strong>子组件向父组件传递事件</strong></p><p>子组件 绑定方法</p><p>兄弟组件之间传值</p><p><strong>keep-alive 怎么使用</strong></p><p>进行缓存，增加生命周期  activated和deactivated</p><p><strong>vue双向数据绑定</strong></p><p>object.defineProperty  （vue 2.0）和Proxy（vue3.0） 实现</p><p>优缺点：</p><p>1.object.defineProperty 劫持对象属性，Proxy劫持整个对象。</p><p>2.Proxy可以支持多种API，object.defineProperty 不支持数组的API</p><p>3.object.defineProperty需要遍历对象的每个属性</p><p><strong>为什么监测不到数组的变化？如何能做到proxy对低版本浏览器的兼容？</strong> </p><p>computed和watch之间的区别</p><p>性能优化</p><p>nextTick原理和使用场景</p><p>vue动态添加属性实现数据响应 v-bind</p><p>vue路由懒加载</p><p>vue封装组件</p><p>created 和mounted的区别  created的html节点没有渲染，mounted可以进行数据请求数据绑定，可以把数据绑定到DOM上</p><p>登录鉴权</p><p>路由守卫</p><p>axios怎么实现</p><p><strong>跨域 什么是跨域？限制了什么？不同源的话进行什么策略</strong></p><p>域名协议端口有一个不同就是跨域</p><p>浏览器会拦截跨域返回的数据</p><p>但有的不限制：1.scrpit标签里面的请求</p><p>常用的跨域方法有 JSONP，CROS，正向代理，反向代理。</p><p>JSONP和CROS方法需要后端服务器的配合，反向代理是在服务端建立代理给客户端发送资源。</p><p>jsonp nigix websocket php修改header</p><p>代理设置location的哪一项</p><p>为什么修改header就可以跨域</p><p><strong>什么是mock数据？</strong></p><p>前后端同时开发的时候，后端接口数据没有出来，前端可以mock假数据，模拟开发；</p><h2 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h2><p><strong>都有哪些排序算法？哪些是nlogn</strong></p><p>冒泡 选择 插入 归并 快排 堆排 希尔排序</p><p>nlogn ：归并 快排 堆排 希尔排序</p><h2 id="计算机网络"><a href="#计算机网络" class="headerlink" title="计算机网络"></a>计算机网络</h2><p>http和https的差异 https的保密机制</p><p> 什么地方用对称加密 什么地方用非对称加密</p><p>http 三次握手四次挥手 状态码</p><p>CDN的实现原理， 怎么做到提速的？</p><p>tcp和udp<br>tcp调度算法</p><h2 id="项目"><a href="#项目" class="headerlink" title="项目"></a>项目</h2><p>完成项目的整个流程，（明确需求，实现功能，自测，他人测试，模块测试，上线，用户的体验和反馈，修改，形成一个不断更新的版本）</p>]]></content>
    
    
    
    <tags>
      
      <tag>CSS JavaScript Vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>解决GitHub官网打不开问题</title>
    <link href="/2021/06/15/%E8%A7%A3%E5%86%B3GitHub%E5%AE%98%E7%BD%91%E6%89%93%E4%B8%8D%E5%BC%80%E9%97%AE%E9%A2%98/"/>
    <url>/2021/06/15/%E8%A7%A3%E5%86%B3GitHub%E5%AE%98%E7%BD%91%E6%89%93%E4%B8%8D%E5%BC%80%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<blockquote><p>Github经常打不开，或者打开特别慢，网上也有很多解决方案，这里记录一下。实际只需要找到官网IP地址、域名IP地址、静态资源地址，然后配置本机hosts文件，刷新DNS缓存即可</p></blockquote><h3 id="github网址查询"><a href="#github网址查询" class="headerlink" title="github网址查询"></a>github网址查询</h3><blockquote><p><a href="https://links.jianshu.com/go?to=https://github.com.ipaddress.com/">https://github.com.ipaddress.com/</a></p><p><img src="https://upload-images.jianshu.io/upload_images/9177905-01562c45ecd43dbd.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><p>图片.png</p></blockquote><h3 id="github域名查询"><a href="#github域名查询" class="headerlink" title="github域名查询"></a>github域名查询</h3><blockquote><p><a href="https://links.jianshu.com/go?to=https://fastly.net.ipaddress.com/github.global.ssl.fastly.net">https://fastly.net.ipaddress.com/github.global.ssl.fastly.net</a></p></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/9177905-91519c893b7df5ad.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><p>图片.png</p><h3 id="github静态资源ip"><a href="#github静态资源ip" class="headerlink" title="github静态资源ip"></a>github静态资源ip</h3><blockquote><p><a href="https://links.jianshu.com/go?to=https://github.com.ipaddress.com/assets-cdn.github.com">https://github.com.ipaddress.com/assets-cdn.github.com</a></p></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/9177905-1cc67c84bf9cefa2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><p>图片.png</p><h3 id="配置hosts文件"><a href="#配置hosts文件" class="headerlink" title="配置hosts文件"></a>配置hosts文件</h3><p><strong>路径</strong></p><blockquote><p>C:\Windows\System32\drivers\etc中的hosts文件，添加如下内容</p></blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-id">#github</span><br><span class="hljs-number">140.82</span>.<span class="hljs-number">112.4</span> github<span class="hljs-selector-class">.com</span><br><span class="hljs-number">199.232</span>.<span class="hljs-number">69.194</span> github<span class="hljs-selector-class">.global</span><span class="hljs-selector-class">.ssl</span><span class="hljs-selector-class">.fastly</span><span class="hljs-selector-class">.net</span><br><span class="hljs-number">185.199</span>.<span class="hljs-number">108.153</span> assets-cdn<span class="hljs-selector-class">.github</span><span class="hljs-selector-class">.com</span><br><span class="hljs-number">185.199</span>.<span class="hljs-number">110.153</span> assets-cdn<span class="hljs-selector-class">.github</span><span class="hljs-selector-class">.com</span><br><span class="hljs-number">185.199</span>.<span class="hljs-number">111.153</span> assets-cdn<span class="hljs-selector-class">.github</span><span class="hljs-selector-class">.com</span><br></code></pre></td></tr></table></figure><p><strong>刷新DNS缓存</strong><br> 打开cmd窗口，执行<code>ipconfig /flushdns</code>命令</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>拟态计算器的纯js+vue实现</title>
    <link href="/2021/06/10/%E6%8B%9F%E6%80%81%E8%AE%A1%E7%AE%97%E5%99%A8%E7%9A%84%E7%BA%AFjs-vue%E5%AE%9E%E7%8E%B0/"/>
    <url>/2021/06/10/%E6%8B%9F%E6%80%81%E8%AE%A1%E7%AE%97%E5%99%A8%E7%9A%84%E7%BA%AFjs-vue%E5%AE%9E%E7%8E%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="拟态计算器的纯js-vue实现"><a href="#拟态计算器的纯js-vue实现" class="headerlink" title="拟态计算器的纯js+vue实现"></a>拟态计算器的纯js+vue实现</h1><iframe id="mcvideo" src="//player.bilibili.com/player.html?aid=462114161&page=1&high_quality=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" width=100%> </iframe><p><a href="https://potatomother.github.io/MyPage/calculate/">我要尝试一下！</a></p><h2 id="纯js实现计算器"><a href="#纯js实现计算器" class="headerlink" title="纯js实现计算器"></a>纯js实现计算器</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs html"><br><span class="hljs-comment">&lt;!--calculate.html --&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;utf-8&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/css&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;style.css&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;calculator&quot;</span> &gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;result&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;grid-area:result&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;display&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;ans&quot;</span>&gt;</span><br>    0<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;grid-area:ac&quot;</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;Clear()&quot;</span>&gt;</span>AC<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;grid-area:plus-minus&quot;</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;calculateToggle()&quot;</span>&gt;</span>+/-<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;grid-area:percent&quot;</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;calculatePercentage()&quot;</span>&gt;</span>%<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;grid-area:add&quot;</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;append(&#x27;×&#x27;)&quot;</span>&gt;</span>×<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;grid-area:subtract&quot;</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;append(&#x27;÷&#x27;)&quot;</span>&gt;</span>÷<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;grid-area:multiply&quot;</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;append(&#x27;+&#x27;)&quot;</span>&gt;</span>+<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;grid-area:divide&quot;</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;append(&#x27;-&#x27;)&quot;</span>&gt;</span>-<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;grid-area:equal&quot;</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;calculate()&quot;</span>&gt;</span>=<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;grid-area:number-1&quot;</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;append(1)&quot;</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;grid-area:number-2&quot;</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;append(2)&quot;</span>&gt;</span>2<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;grid-area:number-3&quot;</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;append(3)&quot;</span>&gt;</span>3<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;grid-area:number-4&quot;</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;append(4)&quot;</span>&gt;</span>4<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;grid-area:number-5&quot;</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;append(5)&quot;</span>&gt;</span>5<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;grid-area:number-6&quot;</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;append(6)&quot;</span>&gt;</span>6<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;grid-area:number-7&quot;</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;append(7)&quot;</span>&gt;</span>7<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;grid-area:number-8&quot;</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;append(8)&quot;</span>&gt;</span>8<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;grid-area:number-9&quot;</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;append(9)&quot;</span>&gt;</span>9<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;grid-area:number-0&quot;</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;append(0)&quot;</span>&gt;</span>0<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;grid-area:dot&quot;</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;append(&#x27;.&#x27;)&quot;</span>&gt;</span>.<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;calculate.js&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;utf-8&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//calculate.js</span><br><span class="hljs-comment">//计算结果写到html中</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">outputResult</span>(<span class="hljs-params">ans</span>)</span>&#123;<br><span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;ans&quot;</span>).innerHTML=ans;<br>&#125;<br><span class="hljs-comment">//查询计算结果</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getResult</span>(<span class="hljs-params"></span>)</span>&#123;<br><span class="hljs-keyword">let</span> res=<span class="hljs-built_in">document</span>.getElementsByClassName(<span class="hljs-string">&quot;display&quot;</span>).innerHTML;<br><span class="hljs-keyword">return</span> res<br>&#125;<br><br><span class="hljs-keyword">let</span> equation=<span class="hljs-string">&quot;0&quot;</span>,<br>isDecimalAdded=<span class="hljs-literal">false</span>,<span class="hljs-comment">//判断是否输入小数点</span><br>isOperatorAdded=<span class="hljs-literal">false</span>,<span class="hljs-comment">//判断是否点击加减乘除</span><br>isStarted=<span class="hljs-literal">false</span>;<span class="hljs-comment">//判断计算器是否已经开始输入数字</span><br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">isOperator</span>(<span class="hljs-params">character</span>)</span>&#123;<br><span class="hljs-keyword">return</span>[<span class="hljs-string">&#x27;+&#x27;</span>,<span class="hljs-string">&#x27;-&#x27;</span>,<span class="hljs-string">&#x27;×&#x27;</span>,<span class="hljs-string">&#x27;÷&#x27;</span>].indexOf(character)&gt;-<span class="hljs-number">1</span><br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">append</span>(<span class="hljs-params">character</span>)</span>&#123;<br><span class="hljs-comment">//计算机开始输入之前，保证数字是0</span><br>  <span class="hljs-keyword">if</span>(isStarted==<span class="hljs-literal">false</span> &amp;&amp; !isOperator(character)&amp;&amp;character!==<span class="hljs-string">&quot;.&quot;</span>)&#123;<br>  equation=<span class="hljs-string">&quot;0&quot;</span>;<br>  &#125;<br>  <span class="hljs-keyword">if</span>(isStarted==<span class="hljs-literal">false</span> &amp;&amp; isOperator(character))&#123;<br>  isStarted=<span class="hljs-literal">true</span>;<br>  &#125;<br>  <span class="hljs-comment">//第一个输入</span><br>  <span class="hljs-keyword">if</span>(isStarted===<span class="hljs-literal">false</span> &amp;&amp; !isOperator(character))&#123;<br>  <span class="hljs-keyword">if</span>(character===<span class="hljs-string">&quot;.&quot;</span>)&#123;<br>  equation+=<span class="hljs-string">&#x27;&#x27;</span>+ character;<br>  outputResult(equation);<br>  isDecimalAdded=<span class="hljs-literal">true</span>;<br>  &#125;<span class="hljs-keyword">else</span>&#123;<br>  equation =<span class="hljs-string">&#x27;&#x27;</span>+ character;<br>  outputResult(equation);<br>  &#125;<br>  isStarted=<span class="hljs-literal">true</span>;<br>  <span class="hljs-keyword">return</span><br>  &#125;<br>  <span class="hljs-comment">//输入加减乘除以外的输入</span><br>  <span class="hljs-keyword">if</span>(!isOperator(character))&#123;<br>  <span class="hljs-keyword">if</span>(character===<span class="hljs-string">&quot;.&quot;</span> &amp;&amp; isDecimalAdded)&#123;<br><span class="hljs-keyword">return</span><br>  &#125;<br>  <span class="hljs-keyword">if</span>(character===<span class="hljs-string">&quot;.&quot;</span>)&#123;<br>  isDecimalAdded=<span class="hljs-literal">true</span>;<br>  isOperatorAdded=<span class="hljs-literal">true</span>;<br>  &#125;<span class="hljs-keyword">else</span>&#123;<br>  isOperatorAdded=<span class="hljs-literal">false</span>;<br>  &#125;<br>  equation+=<span class="hljs-string">&#x27;&#x27;</span>+ character;<br>  outputResult(equation);<br>  &#125;<br>  <span class="hljs-comment">//点击加减乘除</span><br>  <span class="hljs-keyword">if</span>(isOperator(character) &amp;&amp; !isOperatorAdded)&#123;<br>  equation+=<span class="hljs-string">&#x27;&#x27;</span>+character<br>  outputResult(equation)<br>  isDecimalAdded=<span class="hljs-literal">false</span><br>  isOperatorAdded=<span class="hljs-literal">true</span><br><br>  &#125;<br>&#125;<br><span class="hljs-comment">// When pressed &#x27;=&#x27;</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">calculate</span>(<span class="hljs-params"></span>)</span>&#123;<br><span class="hljs-keyword">let</span> result = equation<br>.replace(<span class="hljs-keyword">new</span> <span class="hljs-built_in">RegExp</span>(<span class="hljs-string">&quot;×&quot;</span>, <span class="hljs-string">&quot;g&quot;</span>), <span class="hljs-string">&quot;*&quot;</span>)<br>.replace(<span class="hljs-keyword">new</span> <span class="hljs-built_in">RegExp</span>(<span class="hljs-string">&quot;÷&quot;</span>, <span class="hljs-string">&quot;g&quot;</span>), <span class="hljs-string">&quot;/&quot;</span>)<br><span class="hljs-keyword">let</span> ans = <span class="hljs-built_in">eval</span>(result)<br>equation = (ans &lt; <span class="hljs-number">1.0e9</span> ? <span class="hljs-built_in">parseFloat</span>(ans.toFixed(<span class="hljs-number">9</span>)):ans.toExponential(<span class="hljs-number">3</span>)).toString()<br>isDecimalAdded = <span class="hljs-literal">false</span><br>isOperatorAdded = <span class="hljs-literal">false</span><br>isStarted=<span class="hljs-literal">false</span><br>outputResult(equation)<br>&#125;<br><span class="hljs-comment">// When pressed &#x27;+/-&#x27;</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">calculateToggle</span>(<span class="hljs-params"></span>)</span>&#123;<br>      <span class="hljs-keyword">if</span>(isOperatorAdded||!isStarted)&#123;<br>  <span class="hljs-keyword">return</span><br>  &#125;<br>  equation=equation+<span class="hljs-string">&#x27;* -1&#x27;</span><br>  calculate()<br>  outputResult(equation)<br>&#125;<br><span class="hljs-comment">// When pressed &#x27;%&#x27;</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">calculatePercentage</span>(<span class="hljs-params"></span>)</span>&#123;<br>      <span class="hljs-keyword">if</span>(isOperatorAdded||!isStarted)&#123;<br>  <span class="hljs-keyword">return</span><br>      &#125;<br>      equation=equation+<span class="hljs-string">&#x27;* 0.01&#x27;</span><br>      calculate()<br>  outputResult(equation)<br>&#125;<br><span class="hljs-comment">// When pressed &#x27;AC&#x27;</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Clear</span>(<span class="hljs-params"></span>)</span>&#123;<br>  equation=<span class="hljs-string">&quot;0&quot;</span><br>  outputResult(equation)<br>  isDecimalAdded=<span class="hljs-literal">false</span><br>  isOperatorAdded=<span class="hljs-literal">false</span><br>  isStarted=<span class="hljs-literal">false</span><br>&#125;<br><br><br></code></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs css">//css<br><span class="hljs-selector-tag">body</span>&#123;<br>  <span class="hljs-attribute">display</span>:flex;<br>  <span class="hljs-attribute">justify-content</span>:center;<br>  <span class="hljs-attribute">align-items</span>:center;<br>  <span class="hljs-attribute">min-height</span>:<span class="hljs-number">100vh</span>;<br>  <span class="hljs-attribute">background-color</span>:<span class="hljs-number">#eee</span>;<br>  <br>&#125;<br><span class="hljs-selector-class">.calculator</span>&#123;<br>  --<span class="hljs-selector-tag">button</span>-<span class="hljs-attribute">width</span>:<span class="hljs-number">80px</span>;<br>  --<span class="hljs-selector-tag">button</span>-<span class="hljs-attribute">height</span>:<span class="hljs-number">80px</span>;<br>  <span class="hljs-attribute">display</span>:grid;<br>  grid-template-areas:<span class="hljs-string">&quot;result result result result&quot;</span><br>    <span class="hljs-string">&quot;ac plus-minus percent divide&quot;</span><br>    <span class="hljs-string">&quot;number-7 number-8 number-9 multiply&quot;</span><br>    <span class="hljs-string">&quot;number-4 number-5 number-6 subtract&quot;</span><br>    <span class="hljs-string">&quot;number-1 number-2 number-3 add&quot;</span><br>    <span class="hljs-string">&quot;number-0 number-0 dot equal&quot;</span>;<br>  grid-template-<span class="hljs-attribute">columns</span>:<span class="hljs-built_in">repeat</span>(<span class="hljs-number">4</span>,<span class="hljs-built_in">var</span>(--button-width));<br>  grid-template-rows:<span class="hljs-built_in">repeat</span>(<span class="hljs-number">6</span>,<span class="hljs-built_in">var</span>(--button-height));<br>  <br>  <span class="hljs-attribute">box-shadow</span>:-<span class="hljs-number">8px</span> -<span class="hljs-number">8px</span> <span class="hljs-number">16px</span> -<span class="hljs-number">10px</span> <span class="hljs-built_in">rgba</span>(<span class="hljs-number">2555</span>,<span class="hljs-number">255</span>,<span class="hljs-number">255</span>,<span class="hljs-number">1</span>), <span class="hljs-number">8px</span> <span class="hljs-number">8px</span> <span class="hljs-number">16px</span> -<span class="hljs-number">10px</span> <span class="hljs-built_in">rgba</span>(<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,.<span class="hljs-number">15</span>);<br>  <span class="hljs-attribute">padding</span>:<span class="hljs-number">20px</span>;<br>  <span class="hljs-attribute">border-radius</span>:<span class="hljs-number">20px</span>;<br>&#125;<br><span class="hljs-selector-class">.calculator</span> <span class="hljs-selector-tag">button</span> &#123;<br>  <span class="hljs-attribute">margin</span>:<span class="hljs-number">8px</span>;<br>  <span class="hljs-attribute">padding</span>:<span class="hljs-number">0</span>;<br>  <span class="hljs-attribute">border</span>:<span class="hljs-number">0</span>;<br>  <span class="hljs-attribute">display</span>:block;<br>  <span class="hljs-attribute">outline</span>:none;<br>  <span class="hljs-attribute">border-radius</span>:<span class="hljs-built_in">calc</span>(<span class="hljs-built_in">var</span>(--button-height)/<span class="hljs-number">2</span>);<br>  <span class="hljs-attribute">font-size</span>:<span class="hljs-number">24px</span>;<br>  <span class="hljs-attribute">font-family</span>:Helvetica;<br>  <span class="hljs-attribute">font-weight</span>:normal;<br>  <span class="hljs-attribute">color</span>:<span class="hljs-number">#999</span>;<br>  <span class="hljs-attribute">background</span>:<span class="hljs-built_in">linear-gradient</span>(<span class="hljs-number">135deg</span>,<span class="hljs-built_in">rgba</span>(<span class="hljs-number">230</span>,<span class="hljs-number">230</span>,<span class="hljs-number">230</span>,<span class="hljs-number">1</span>) <span class="hljs-number">0%</span>, <span class="hljs-built_in">rgba</span>(<span class="hljs-number">246</span>,<span class="hljs-number">246</span>,<span class="hljs-number">246</span>,<span class="hljs-number">1</span>)<span class="hljs-number">100%</span>);<br>  <span class="hljs-attribute">box-shadow</span>:-<span class="hljs-number">4px</span> -<span class="hljs-number">4px</span> <span class="hljs-number">10px</span> -<span class="hljs-number">8px</span> <span class="hljs-built_in">rgba</span>(<span class="hljs-number">255</span>,<span class="hljs-number">255</span>,<span class="hljs-number">255</span>,<span class="hljs-number">1</span>),<span class="hljs-number">4px</span> <span class="hljs-number">4px</span> <span class="hljs-number">10px</span> -<span class="hljs-number">8px</span> <span class="hljs-built_in">rgba</span>(<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,.<span class="hljs-number">3</span>);<br>&#125;<br><span class="hljs-selector-class">.calculator</span> <span class="hljs-selector-tag">button</span><span class="hljs-selector-pseudo">:active</span>&#123;<br>  <span class="hljs-attribute">box-shadow</span>:-<span class="hljs-number">4px</span> -<span class="hljs-number">4px</span> <span class="hljs-number">10px</span> -<span class="hljs-number">8px</span> <span class="hljs-built_in">rgba</span>(<span class="hljs-number">255</span>,<span class="hljs-number">255</span>,<span class="hljs-number">255</span>,<span class="hljs-number">1</span>),<span class="hljs-number">4px</span> <span class="hljs-number">4px</span> <span class="hljs-number">10px</span> -<span class="hljs-number">8px</span> <span class="hljs-built_in">rgba</span>(<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,.<span class="hljs-number">3</span>) inset ;<br>&#125;<br><span class="hljs-selector-class">.result</span>&#123;<br>  <span class="hljs-attribute">text-align</span><span class="hljs-selector-pseudo">:right</span>;<br>  <span class="hljs-attribute">line-height</span>:<span class="hljs-built_in">var</span>(--button-height);<br>  <span class="hljs-attribute">font-size</span>:<span class="hljs-number">48px</span>;<br>  <span class="hljs-attribute">font-family</span>:Helvetica;<br>  <span class="hljs-attribute">padding</span>:<span class="hljs-number">0</span> <span class="hljs-number">20px</span>;<br>  <span class="hljs-attribute">color</span>:<span class="hljs-number">#666</span>;<br>  <span class="hljs-attribute">overflow</span>: hidden;<br>  <span class="hljs-attribute">white-space</span>: nowrap;<br>&#125;<br><span class="hljs-selector-class">.result</span> <span class="hljs-selector-class">.display</span> &#123;<br><span class="hljs-attribute">position</span>: relative;<br><span class="hljs-attribute">float</span><span class="hljs-selector-pseudo">:right</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="vue改写实现计算器"><a href="#vue改写实现计算器" class="headerlink" title="vue改写实现计算器"></a>vue改写实现计算器</h2><p>css文件不需要改变,只需要改写一部分html与js文件</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!--vue_calcultae.html --&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;utf-8&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/css&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;style.css&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;calculator&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;result&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;grid-area:result&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;display&quot;</span>&gt;</span><br>    &#123;&#123; equation &#125;&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;grid-area:ac&quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;clear&quot;</span>&gt;</span>AC<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;grid-area:plus-minus&quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;calculateToggle&quot;</span>&gt;</span>+/-<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;grid-area:percent&quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;calculatePercentage&quot;</span>&gt;</span>%<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;grid-area:add&quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;append(&#x27;×&#x27;)&quot;</span>&gt;</span>×<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;grid-area:subtract&quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;append(&#x27;÷&#x27;)&quot;</span>&gt;</span>÷<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;grid-area:multiply&quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;append(&#x27;+&#x27;)&quot;</span>&gt;</span>+<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;grid-area:divide&quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;append(&#x27;-&#x27;)&quot;</span>&gt;</span>-<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;grid-area:equal&quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;calculate&quot;</span>&gt;</span>=<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>  <br>  <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;grid-area:number-1&quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;append(1)&quot;</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;grid-area:number-2&quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;append(2)&quot;</span>&gt;</span>2<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;grid-area:number-3&quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;append(3)&quot;</span>&gt;</span>3<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;grid-area:number-4&quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;append(4)&quot;</span>&gt;</span>4<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;grid-area:number-5&quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;append(5)&quot;</span>&gt;</span>5<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;grid-area:number-6&quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;append(6)&quot;</span>&gt;</span>6<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;grid-area:number-7&quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;append(7)&quot;</span>&gt;</span>7<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;grid-area:number-8&quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;append(8)&quot;</span>&gt;</span>8<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;grid-area:number-9&quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;append(9)&quot;</span>&gt;</span>9<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;grid-area:number-0&quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;append(0)&quot;</span>&gt;</span>0<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br> <br> <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;grid-area:dot&quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;append(&#x27;.&#x27;)&quot;</span>&gt;</span>.<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br> <br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;vue.js&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;utf-8&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;calculate_vue.js&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;utf-8&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br><br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//calculate_vue.j</span><br><span class="hljs-keyword">var</span> vm=<span class="hljs-keyword">new</span> Vue(&#123;<br>  <span class="hljs-attr">el</span>:<span class="hljs-string">&quot;#app&quot;</span>,<br>  <span class="hljs-attr">data</span>:&#123;<br>    <span class="hljs-attr">equation</span>:<span class="hljs-string">&quot;0&quot;</span>,<br>    <span class="hljs-attr">isDecimalAdded</span>:<span class="hljs-literal">false</span>,<span class="hljs-comment">//判断是否输入小数点</span><br>    <span class="hljs-attr">isOperatorAdded</span>:<span class="hljs-literal">false</span>,<span class="hljs-comment">//判断是否点击加减乘除</span><br>    <span class="hljs-attr">isStarted</span>:<span class="hljs-literal">false</span>,<span class="hljs-comment">//判断计算器是否已经开始输入数字</span><br>  &#125;,<br>  <span class="hljs-attr">methods</span>:&#123;<br>    <span class="hljs-function"><span class="hljs-title">isOperator</span>(<span class="hljs-params">character</span>)</span>&#123;<br>      <span class="hljs-keyword">return</span>[<span class="hljs-string">&#x27;+&#x27;</span>,<span class="hljs-string">&#x27;-&#x27;</span>,<span class="hljs-string">&#x27;×&#x27;</span>,<span class="hljs-string">&#x27;÷&#x27;</span>].indexOf(character)&gt;-<span class="hljs-number">1</span><br>    &#125;,<br>    <span class="hljs-function"><span class="hljs-title">append</span>(<span class="hljs-params">character</span>)</span>&#123;<br><span class="hljs-comment">//计算机开始输入之前，保证数字是0</span><br>  <span class="hljs-keyword">if</span>(<span class="hljs-built_in">this</span>.isStarted==<span class="hljs-literal">false</span> &amp;&amp; !<span class="hljs-built_in">this</span>.isOperator(character)&amp;&amp;character!==<span class="hljs-string">&quot;.&quot;</span>)&#123;<br>  <span class="hljs-built_in">this</span>.equation=<span class="hljs-string">&quot;0&quot;</span>;<br>  &#125;<br>  <span class="hljs-keyword">if</span>(<span class="hljs-built_in">this</span>.isStarted==<span class="hljs-literal">false</span> &amp;&amp; <span class="hljs-built_in">this</span>.isOperator(character))&#123;<br>  <span class="hljs-built_in">this</span>.isStarted=<span class="hljs-literal">true</span>;<br>  &#125;<br>  <span class="hljs-comment">//第一个输入</span><br>      <span class="hljs-keyword">if</span>(<span class="hljs-built_in">this</span>.isStarted===<span class="hljs-literal">false</span> &amp;&amp; !<span class="hljs-built_in">this</span>.isOperator(character))&#123;<br>  <span class="hljs-keyword">if</span>(character===<span class="hljs-string">&quot;.&quot;</span>)&#123;<br>  <span class="hljs-built_in">this</span>.equation+=<span class="hljs-string">&#x27;&#x27;</span>+ character;<br>  <span class="hljs-built_in">this</span>.isDecimalAdded=<span class="hljs-literal">true</span>;<br>  &#125;<span class="hljs-keyword">else</span>&#123;<br>  <span class="hljs-built_in">this</span>.equation =<span class="hljs-string">&#x27;&#x27;</span>+ character;<br>  &#125;<br>  <span class="hljs-built_in">this</span>.isStarted=<span class="hljs-literal">true</span>;<br>  <span class="hljs-keyword">return</span><br>  &#125;<br>  <span class="hljs-comment">//输入加减乘除以外的输入</span><br>  <span class="hljs-keyword">if</span>(!<span class="hljs-built_in">this</span>.isOperator(character))&#123;<br>  <span class="hljs-keyword">if</span>(character===<span class="hljs-string">&quot;.&quot;</span> &amp;&amp; <span class="hljs-built_in">this</span>.isDecimalAdded)&#123;<br>  <span class="hljs-keyword">return</span><br>  &#125;<br>  <span class="hljs-keyword">if</span>(character===<span class="hljs-string">&quot;.&quot;</span>)&#123;<br>  <span class="hljs-built_in">this</span>.isDecimalAdded=<span class="hljs-literal">true</span>;<br>  <span class="hljs-built_in">this</span>.isOperatorAdded=<span class="hljs-literal">true</span>;<br>  &#125;<span class="hljs-keyword">else</span>&#123;<br>  <span class="hljs-built_in">this</span>.isOperatorAdded=<span class="hljs-literal">false</span>;<br>  &#125;<br>  <span class="hljs-built_in">this</span>.equation+=<span class="hljs-string">&#x27;&#x27;</span>+ character;<br>  &#125;<br>  <span class="hljs-comment">//点击加减乘除</span><br>  <span class="hljs-keyword">if</span>(<span class="hljs-built_in">this</span>.isOperator(character) &amp;&amp; !<span class="hljs-built_in">this</span>.isOperatorAdded)&#123;<br>  <span class="hljs-built_in">this</span>.equation+=<span class="hljs-string">&#x27;&#x27;</span>+character<br>  <span class="hljs-built_in">this</span>.isDecimalAdded=<span class="hljs-literal">false</span><br>  <span class="hljs-built_in">this</span>.isOperatorAdded=<span class="hljs-literal">true</span><br><br>  &#125;<br>    &#125;,<br><span class="hljs-comment">// When pressed &#x27;=&#x27;</span><br>    <span class="hljs-function"><span class="hljs-title">calculate</span>(<span class="hljs-params"></span>)</span>&#123;<br><span class="hljs-keyword">let</span> result = <span class="hljs-built_in">this</span>.equation<br>.replace(<span class="hljs-keyword">new</span> <span class="hljs-built_in">RegExp</span>(<span class="hljs-string">&quot;×&quot;</span>, <span class="hljs-string">&quot;g&quot;</span>), <span class="hljs-string">&quot;*&quot;</span>)<br>.replace(<span class="hljs-keyword">new</span> <span class="hljs-built_in">RegExp</span>(<span class="hljs-string">&quot;÷&quot;</span>, <span class="hljs-string">&quot;g&quot;</span>), <span class="hljs-string">&quot;/&quot;</span>)<br><span class="hljs-keyword">let</span> ans = <span class="hljs-built_in">eval</span>(result)<br><span class="hljs-built_in">this</span>.equation = (ans &lt; <span class="hljs-number">1.0e9</span> ? <span class="hljs-built_in">parseFloat</span>(ans.toFixed(<span class="hljs-number">9</span>)):ans.toExponential(<span class="hljs-number">3</span>)).toString()<br><span class="hljs-built_in">this</span>.isDecimalAdded = <span class="hljs-literal">false</span><br><span class="hljs-built_in">this</span>.isOperatorAdded = <span class="hljs-literal">false</span><br>    <span class="hljs-built_in">this</span>.isStarted=<span class="hljs-literal">false</span><br>    &#125;,<br><span class="hljs-comment">// When pressed &#x27;+/-&#x27;</span><br>    <span class="hljs-function"><span class="hljs-title">calculateToggle</span>(<span class="hljs-params"></span>)</span>&#123;<br>      <span class="hljs-keyword">if</span>(<span class="hljs-built_in">this</span>.isOperatorAdded||!<span class="hljs-built_in">this</span>.isStarted)&#123;<br>  <span class="hljs-keyword">return</span><br>  &#125;<br>  <span class="hljs-built_in">this</span>.equation=<span class="hljs-built_in">this</span>.equation+<span class="hljs-string">&#x27;* -1&#x27;</span><br>  <span class="hljs-built_in">this</span>.calculate()<br>    &#125;,<br><span class="hljs-comment">// When pressed &#x27;%&#x27;</span><br>    <span class="hljs-function"><span class="hljs-title">calculatePercentage</span>(<span class="hljs-params"></span>)</span>&#123;<br>      <span class="hljs-keyword">if</span>(<span class="hljs-built_in">this</span>.isOperatorAdded||!<span class="hljs-built_in">this</span>.isStarted)&#123;<br>  <span class="hljs-keyword">return</span><br>      &#125;<br>      <span class="hljs-built_in">this</span>.equation=<span class="hljs-built_in">this</span>.equation+<span class="hljs-string">&#x27;* 0.01&#x27;</span><br>      <span class="hljs-built_in">this</span>.calculate()<br>    &#125;,<br><span class="hljs-comment">// When pressed &#x27;AC&#x27;</span><br>    <span class="hljs-function"><span class="hljs-title">clear</span>(<span class="hljs-params"></span>)</span>&#123;<br>      <span class="hljs-built_in">this</span>.equation=<span class="hljs-string">&quot;0&quot;</span><br>      <span class="hljs-built_in">this</span>.isDecimalAdded=<span class="hljs-literal">false</span><br>      <span class="hljs-built_in">this</span>.isOperatorAdded=<span class="hljs-literal">false</span><br>      <span class="hljs-built_in">this</span>.isStarted=<span class="hljs-literal">false</span><br>    &#125;<br>  &#125;<br>&#125;)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>搭建个人博客 hexo + github page</title>
    <link href="/2021/05/04/%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2-hexo-github-page/"/>
    <url>/2021/05/04/%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2-hexo-github-page/</url>
    
    <content type="html"><![CDATA[<h1 id="搭建个人博客-Hexo-github"><a href="#搭建个人博客-Hexo-github" class="headerlink" title="搭建个人博客 Hexo + github"></a>搭建个人博客 Hexo + github</h1><p>记录一下搭建个人博客的过程，踩过的一些坑。</p><p>Hexo是一个博客框架，一个是支持Markdown格式，部署github Pages简单，同时提供多种插件。</p><p>Github Page 搭建简单、**<u>免费!</u>**(划重点),缺点是网络可能不稳定，只能托管静态页面。（穷孩子表示，免费的就可以）。</p><p>话不多说，开始正文：</p><h2 id="配置环境"><a href="#配置环境" class="headerlink" title="配置环境"></a>配置环境</h2><p>1.<strong>装git</strong>    <a href="https://git-scm.com/download/win">windows</a>    <a href="https://git-scm.com/download/mac">mac</a>下载之后点点点就可以，如果还是有问题 附上<a href="https://blog.csdn.net/mukes/article/details/115693833">教程</a>。</p><p>2.<strong>装node.js</strong>     <a href="https://nodejs.org/en/">官网</a>,下载LTS版本就可以。</p><pre><code>下载之后进cmd，依次输入`node -v`  `npm -v`，会分别显示node和npm的版本号，说明没问题。2.1**修改npm包管理器的下载源**：</code></pre><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arduino">npm config set registry https:<span class="hljs-comment">//registry.npm.taobao.org</span><br></code></pre></td></tr></table></figure><p>如果已经有环境，可以直接跳过。</p><h2 id="配置Hexo"><a href="#配置Hexo" class="headerlink" title="配置Hexo"></a>配置Hexo</h2><p>进入cmd依次输入以下代码，一个简单的hexo搭建的博客就出来了</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install hexo-cli -g<br>hexo init blog<br><span class="hljs-built_in">cd</span> blog<br>npm install<br>hexo server  <br></code></pre></td></tr></table></figure><p>复制默认地址<a href="http://localhost:4000，到浏览器就可以显示了。">http://localhost:4000，到浏览器就可以显示了。</a></p><p> <em>ps：网址中的4000是端口，可以使用<code>hexo server -p 端口号</code>切换自己想要的端口，比如 <code>hexo server -p 4004</code></em></p><p>到这里我们已经完成一个简单的博客页面了，很自然的我们会有几个需求</p><ul><li>给博客换个好看的皮肤</li><li>写博客</li><li>把博客上传到网络上，和大家分享</li></ul><h2 id="博客换肤（换主题）"><a href="#博客换肤（换主题）" class="headerlink" title="博客换肤（换主题）"></a>博客换肤（换主题）</h2><p>下面是几个主题大家可以挑选，同时给出了其中一个的安装方法。</p><ul><li><p><strong>预览</strong>：<a href="https://hexo.fluid-dev.com/">Fluid</a>   在博客文件夹执行即可<strong>安装</strong>：<code>npm install --save hexo-theme-fluid</code> ，找到新增的<code>hexo-theme-fluid</code>文件夹，复制 <a href="https://github.com/fluid-dev/hexo-theme-fluid/blob/master/_config.yml">_config.yml</a> 文件到博客目录下，并且改名为<code>_config.fluid.yml</code>。<strong>使用说明</strong>：<a href="https://hexo.fluid-dev.com/docs/start/#%E6%90%AD%E5%BB%BA-hexo-%E5%8D%9A%E5%AE%A2">开始使用 | Hexo Fluid (fluid-dev.com)</a></p></li><li><p><a href="https://hexo.io/themes/">Hexo Themes Net</a></p></li><li><p><a href="https://github.com/techlahoma/hexo-theme-okcjs">OKCjs</a></p></li><li><p>官方主题地址： <a href="https://hexo.io/themes/">https://hexo.io/themes/</a></p></li></ul><p>可以参考主题中的说明选自己喜欢的进行安装。</p><h2 id="写博客"><a href="#写博客" class="headerlink" title="写博客"></a>写博客</h2><p>进入博客目录，右键<code>Git Bash Here</code>输入</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs actionscript">hexo <span class="hljs-keyword">new</span> <span class="hljs-string">&quot;测试文章&quot;</span><br></code></pre></td></tr></table></figure><p>提示在<code>source\_posts\测试文章.md</code>生成了 测试文章.md,编辑这个文件可以写博客。</p><p><em>碎碎念：发现一个软件Typora写markdown很好用。</em></p><h2 id="本地的博客部署到Github-Pages"><a href="#本地的博客部署到Github-Pages" class="headerlink" title="本地的博客部署到Github Pages"></a>本地的博客部署到Github Pages</h2><p>我们现在写的博客只是展示在本地的电脑，把hexo博客和github pages关联之后，就可以在网络上看到自己的博客了。</p><h4 id="注册github-page"><a href="#注册github-page" class="headerlink" title="注册github page"></a>注册github page</h4><p>1.注册github</p><p>2.建立一个名字是<code>username.github.io</code>的仓库（ <em>ps：username 是github的用户名</em>）</p><p>注册了一个github page之后还需要把自己本地的博客放到github pages中，使用 Hexo 中的 Hexo deploy 插件进行一键式部署.</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">npm install hexo-deployer-git <span class="hljs-comment">--save</span><br></code></pre></td></tr></table></figure><p>在博客目录下找到 _config.yml 文件打开，找到下面片段。</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-meta"># Deployment</span><br><span class="hljs-meta">## Docs: https:<span class="hljs-comment">//hexo.io/docs/deployment.html</span></span><br><span class="hljs-symbol">deploy:</span><br><span class="hljs-symbol">  type:</span><br></code></pre></td></tr></table></figure><p>改为：</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-meta"># Deployment</span><br><span class="hljs-meta">## Docs: https:<span class="hljs-comment">//hexo.io/docs/deployment.html</span></span><br><span class="hljs-symbol">deploy:</span><br><span class="hljs-symbol">  type:</span> git<br><span class="hljs-symbol">  repo:</span> git@github.com:username/username.github.io.git<br><span class="hljs-symbol">  branch:</span> master<br></code></pre></td></tr></table></figure><p>repo需要填写仓库地址，可以填写SSH和HTTPS两种格式，其中username 是github的用户名.在仓库页面上点击绿色按钮 <code>Clone or download</code> 即可获得仓库地址.</p><p>配置完成之后, 执行部署命令, 在 Git Bash Here 中输入命令: <code>hexo deploy</code> 或者命令的缩写: <code>hexo d</code>, 输入 GitHub 用户名, 密码即可.</p><p>验证方法: 在浏览器中输入网址: <a href="https://用户名.github.io/">https://username.github.io</a> , 用户名修改为你自己的 Github 用户名, 如果能看到之前博客的样子, 就说明部署成功了!</p><h2 id="小tips"><a href="#小tips" class="headerlink" title="小tips"></a>小tips</h2><h3 id="Hexo命令"><a href="#Hexo命令" class="headerlink" title="Hexo命令"></a>Hexo命令</h3><h2 id="常用-Hexo-命令"><a href="#常用-Hexo-命令" class="headerlink" title="常用 Hexo 命令"></a>常用 Hexo 命令</h2><table><thead><tr><th>命令</th><th>作用</th></tr></thead><tbody><tr><td>hexo help</td><td>查看帮助</td></tr><tr><td>hexo -v</td><td>查看本地环境</td></tr><tr><td>hexo init</td><td>初始化 hexo 目录</td></tr><tr><td>hexo new “postName”</td><td>新建文章</td></tr><tr><td>hexo new page “pageName”</td><td>新建页面</td></tr><tr><td>hexo gernerate</td><td>生成网页</td></tr><tr><td>hexo server</td><td>本地预览</td></tr><tr><td>hexo deploy / hexo d</td><td>部署到远程服务器</td></tr><tr><td>hexo clean</td><td>清除缓存 建议每次执行命令前先清理缓存</td></tr></tbody></table>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
