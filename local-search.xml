<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>搭建个人博客 Hexo + github</title>
    <link href="/2021/08/04/%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2-Hexo-github/"/>
    <url>/2021/08/04/%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2-Hexo-github/</url>
    
    <content type="html"><![CDATA[<h1 id="搭建个人博客-Hexo-github"><a href="#搭建个人博客-Hexo-github" class="headerlink" title="搭建个人博客 Hexo + github"></a>搭建个人博客 Hexo + github</h1><p>记录一下搭建个人博客的过程，踩过的一些坑。</p><p>Hexo是一个博客框架，一个是支持Markdown格式，部署github Pages简单，同时提供多种插件。</p><p>Github Page 搭建简单、**<u>免费!</u>**(划重点),缺点是网络可能不稳定，只能托管静态页面。（穷孩子表示，免费的就可以）。</p><p>话不多说，开始正文：</p><h2 id="配置环境"><a href="#配置环境" class="headerlink" title="配置环境"></a>配置环境</h2><p>1.<strong>装git</strong>    <a href="https://git-scm.com/download/win">windows</a>    <a href="https://git-scm.com/download/mac">mac</a>下载之后点点点就可以，如果还是有问题 附上<a href="https://blog.csdn.net/mukes/article/details/115693833">教程</a>。</p><p>2.<strong>装node.js</strong>     <a href="https://nodejs.org/en/">官网</a>,下载LTS版本就可以。</p><p>​    下载之后进cmd，依次输入<code>node -v</code>  <code>npm -v</code>，会分别显示node和npm的版本号，说明没问题。</p><p>​    2.1<strong>修改npm包管理器的下载源</strong>：</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arduino">npm config set registry https:<span class="hljs-comment">//registry.npm.taobao.org</span><br></code></pre></td></tr></table></figure><p>如果已经有环境，可以直接跳过。</p><h2 id="配置Hexo"><a href="#配置Hexo" class="headerlink" title="配置Hexo"></a>配置Hexo</h2><p>进入cmd依次输入以下代码，一个简单的hexo搭建的博客就出来了</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install hexo-cli -g<br>hexo init blog<br><span class="hljs-built_in">cd</span> blog<br>npm install<br>hexo server  <br></code></pre></td></tr></table></figure><p>复制默认地址<a href="http://localhost:4000，到浏览器就可以显示了。">http://localhost:4000，到浏览器就可以显示了。</a></p><p> <em>ps：网址中的4000是端口，可以使用<code>hexo server -p 端口号</code>切换自己想要的端口，比如 <code>hexo server -p 4004</code></em></p><p>到这里我们已经完成一个简单的博客页面了，很自然的我们会有几个需求</p><ul><li>给博客换个好看的皮肤</li><li>写博客</li><li>把博客上传到网络上，和大家分享</li></ul><h2 id="博客换肤（换主题）"><a href="#博客换肤（换主题）" class="headerlink" title="博客换肤（换主题）"></a>博客换肤（换主题）</h2><p>下面是几个主题大家可以挑选，同时给出了其中一个的安装方法。</p><ul><li><p><strong>预览</strong>：<a href="https://hexo.fluid-dev.com/">Fluid</a>   在博客文件夹执行即可<strong>安装</strong>：<code>npm install --save hexo-theme-fluid</code> ，找到新增的<code>hexo-theme-fluid</code>文件夹，复制 <a href="https://github.com/fluid-dev/hexo-theme-fluid/blob/master/_config.yml">_config.yml</a> 文件到博客目录下，并且改名为<code>_config.fluid.yml</code>。<strong>使用说明</strong>：<a href="https://hexo.fluid-dev.com/docs/start/#%E6%90%AD%E5%BB%BA-hexo-%E5%8D%9A%E5%AE%A2">开始使用 | Hexo Fluid (fluid-dev.com)</a></p></li><li><p><a href="https://hexo.io/themes/">Hexo Themes Net</a></p></li><li><p><a href="https://github.com/techlahoma/hexo-theme-okcjs">OKCjs</a></p></li><li><p>官方主题地址： <a href="https://hexo.io/themes/">https://hexo.io/themes/</a></p></li></ul><p>可以参考主题中的说明选自己喜欢的进行安装。</p><h2 id="写博客"><a href="#写博客" class="headerlink" title="写博客"></a>写博客</h2><p>进入博客目录，右键<code>Git Bash Here</code>输入</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs actionscript">hexo <span class="hljs-keyword">new</span> <span class="hljs-string">&quot;测试文章&quot;</span><br></code></pre></td></tr></table></figure><p>提示在<code>source\_posts\测试文章.md</code>生成了 测试文章.md,编辑这个文件可以写博客。</p><p><em>碎碎念：发现一个软件Typora写markdown很好用。</em></p><h2 id="本地的博客部署到Github-Pages"><a href="#本地的博客部署到Github-Pages" class="headerlink" title="本地的博客部署到Github Pages"></a>本地的博客部署到Github Pages</h2><p>我们现在写的博客只是展示在本地的电脑，把hexo博客和github pages关联之后，就可以在网络上看到自己的博客了。</p><h4 id="注册github-page"><a href="#注册github-page" class="headerlink" title="注册github page"></a>注册github page</h4><p>1.注册github</p><p>2.建立一个名字是<code>username.github.io</code>的仓库（ <em>ps：username 是github的用户名</em>）</p><p>注册了一个github page之后还需要把自己本地的博客放到github pages中，使用 Hexo 中的 Hexo deploy 插件进行一键式部署.</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">npm install hexo-deployer-git <span class="hljs-comment">--save</span><br></code></pre></td></tr></table></figure><p>在博客目录下找到 _config.yml 文件打开，找到下面片段。</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-meta"># Deployment</span><br><span class="hljs-meta">## Docs: https:<span class="hljs-comment">//hexo.io/docs/deployment.html</span></span><br><span class="hljs-symbol">deploy:</span><br><span class="hljs-symbol">  type:</span><br></code></pre></td></tr></table></figure><p>改为：</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-meta"># Deployment</span><br><span class="hljs-meta">## Docs: https:<span class="hljs-comment">//hexo.io/docs/deployment.html</span></span><br><span class="hljs-symbol">deploy:</span><br><span class="hljs-symbol">  type:</span> git<br><span class="hljs-symbol">  repo:</span> git@github.com:username/username.github.io.git<br><span class="hljs-symbol">  branch:</span> master<br></code></pre></td></tr></table></figure><p>repo需要填写仓库地址，可以填写SSH和HTTPS两种格式，其中username 是github的用户名.在仓库页面上点击绿色按钮 <code>Clone or download</code> 即可获得仓库地址.</p><p>配置完成之后, 执行部署命令, 在 Git Bash Here 中输入命令: <code>hexo deploy</code> 或者命令的缩写: <code>hexo d</code>, 输入 GitHub 用户名, 密码即可.</p><p>验证方法: 在浏览器中输入网址: <a href="https://用户名.github.io/">https://username.github.io</a> , 用户名修改为你自己的 Github 用户名, 如果能看到之前博客的样子, 就说明部署成功了!</p><h2 id="小tips"><a href="#小tips" class="headerlink" title="小tips"></a>小tips</h2><h3 id="Hexo命令"><a href="#Hexo命令" class="headerlink" title="Hexo命令"></a>Hexo命令</h3><table><thead><tr><th>命令</th><th>作用</th></tr></thead><tbody><tr><td>hexo help</td><td>查看帮助</td></tr><tr><td>hexo -v</td><td>查看本地环境</td></tr><tr><td>hexo init</td><td>初始化 hexo 目录</td></tr><tr><td>hexo new “postNam e”</td><td>新建文章</td></tr><tr><td>hexo new page “pageName”</td><td>新建页面</td></tr><tr><td>hexo gernerate</td><td>生成网页</td></tr><tr><td>hexo server</td><td>本地预览</td></tr><tr><td>hexo deploy / hexo d</td><td>部署到远程服务器</td></tr><tr><td>hexo clean</td><td>清除缓存 建议每次执行命令前先清理缓存</td></tr></tbody></table>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>【vue】响应式 数据双向绑定</title>
    <link href="/2021/08/04/%E3%80%90vue%E3%80%91%E5%93%8D%E5%BA%94%E5%BC%8F-%E6%95%B0%E6%8D%AE%E5%8F%8C%E5%90%91%E7%BB%91%E5%AE%9A/"/>
    <url>/2021/08/04/%E3%80%90vue%E3%80%91%E5%93%8D%E5%BA%94%E5%BC%8F-%E6%95%B0%E6%8D%AE%E5%8F%8C%E5%90%91%E7%BB%91%E5%AE%9A/</url>
    
    <content type="html"><![CDATA[<h1 id="vue响应式-数据双向绑定"><a href="#vue响应式-数据双向绑定" class="headerlink" title="vue响应式 数据双向绑定"></a>vue响应式 数据双向绑定</h1><p>vue程序中，当值发生改变，它会做三件事：</p><ol><li><p>更新网页上的值<code>price</code></p></li><li><p>计算新的表达式，更新页面<code>price*code</code></p></li><li><p>再次调用功能并更新页面<code>totalPriWithTax</code></p><p>通过声明一个class完成以上需求简易的实现，这个class需要有几个功能，一个功能是记录需要更新的表达式，另一个功能是运行所记录的表达式（更新数据）。</p></li></ol><h2 id="1-通过声明Dep-class以完成类似操作："><a href="#1-通过声明Dep-class以完成类似操作：" class="headerlink" title="1.通过声明Dep class以完成类似操作："></a>1.通过声明Dep class以完成类似操作：</h2><p><u>Dep class   用于收集依赖函数（Dependency）</u></p><ul><li>depend：用于存储需要运行的target</li><li>notify：重新执行所有存储的target function</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Dep</span> </span>&#123;<br>  <span class="hljs-title">constructor</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-built_in">this</span>.subscribers = [] <br>  &#125;<br>  <span class="hljs-function"><span class="hljs-title">depend</span>(<span class="hljs-params"></span>)</span> &#123;  <br>    <span class="hljs-keyword">if</span> (target &amp;&amp; !<span class="hljs-built_in">this</span>.subscribers.includes(target)) &#123;<br>      <span class="hljs-comment">// Only if there is a target &amp; it&#x27;s not already subscribed</span><br>      <span class="hljs-built_in">this</span>.subscribers.push(target)<br>    &#125; <br>  &#125;<br>  <span class="hljs-function"><span class="hljs-title">notify</span>(<span class="hljs-params"></span>)</span> &#123;<br>    <span class="hljs-built_in">this</span>.subscribers.forEach(<span class="hljs-function"><span class="hljs-params">sub</span> =&gt;</span> sub())<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>在完成以上功能之后，需要考虑 Dep class什么时候更新数据呢？</p><p>在JavaScript中对象有一个方法**Object.defineProperty()**其中有两个属性叫做get和set，get在对象被访问的时候会调用，set在对象的数据被修改的时候调用。通过这两个属性可以监听数据的使用以及修改，当数据修改的时候使用notify()方法，重新运行表达式更新数据。</p><h2 id="2-object对象-Object-defineProperty-中的get和set属性："><a href="#2-object对象-Object-defineProperty-中的get和set属性：" class="headerlink" title="2.object对象 Object.defineProperty()中的get和set属性："></a>2.object对象 Object.defineProperty()中的get和set属性：</h2><p><code>Object.defineProperty(data, key, descriptor)</code></p><p><strong>参数</strong></p><p><code>data</code>要定义属性的对象。</p><p><code>key</code>要定义或修改的属性的名称或 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Symbol"><code>Symbol</code></a> 。</p><p><code>descriptor</code>要定义或修改的属性描述符。</p><p><code>get</code> <strong>指读取属性时调用的函数</strong>当访问数据的时候，调用depend()方法，存储相应函数</p><p><code>set</code> <strong>指写入属性时调用的函数</strong>当修改数据的时候，将调用notify()方法，将存储的函数重新运行，达到更新数据的目的</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-built_in">Object</span>.defineProperty(data, key, &#123;<br>  <span class="hljs-function"><span class="hljs-title">get</span>(<span class="hljs-params"></span>)</span> &#123;<br>    dep.depend() <span class="hljs-comment">// &lt;-- Remember the target we&#x27;re running</span><br>    <span class="hljs-keyword">return</span> internalValue<br>  &#125;,<br>  <span class="hljs-function"><span class="hljs-title">set</span>(<span class="hljs-params">newVal</span>)</span> &#123;<br>    internalValue = newVal<br>    dep.notify() <span class="hljs-comment">// &lt;-- Re-run stored functions</span><br>  &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><p>最后需要设置一个监听器，监听器控制depend()方法中 表达式的记录，监听器输入表达式。</p><p>调用流程如下：</p><p>​    表达式相关变量被访问——调用get()——调用depend()——若target表达式没有记录，则记录表达式</p><p>​    表达式相关变量被修改——调用set()——调用notify()——重新运行记录的表达式，修改数据</p><h2 id="3-设置监听Watcher："><a href="#3-设置监听Watcher：" class="headerlink" title="3.设置监听Watcher："></a>3.设置监听Watcher：</h2><p>这里定义需要监听响应的方法或者函数<code>target</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">watcher</span>(<span class="hljs-params">myFunc</span>) </span>&#123;<br>  target = myFunc<br>  target()<br>  target = <span class="hljs-literal">null</span><br>&#125;<br><br>watcher(<span class="hljs-function">() =&gt;</span> &#123;<br>  data.total = data.price * data.quantity<br>&#125;)<br></code></pre></td></tr></table></figure><h2 id="4-响应程序"><a href="#4-响应程序" class="headerlink" title="4.响应程序"></a>4.响应程序</h2><p><img src="/images/vue%E5%93%8D%E5%BA%94%E5%BC%8F1.png" alt="vue响应式1"></p><h2 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> data = &#123; <span class="hljs-attr">price</span>: <span class="hljs-number">5</span>, <span class="hljs-attr">quantity</span>: <span class="hljs-number">2</span> &#125;<br>   <span class="hljs-keyword">let</span> target = <span class="hljs-literal">null</span><br>   <br>   <span class="hljs-comment">// This is exactly the same Dep class</span><br>   <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Dep</span> </span>&#123;<br>     <span class="hljs-title">constructor</span> (<span class="hljs-params"></span>) &#123;<br>       <span class="hljs-built_in">this</span>.subscribers = [] <br>     &#125;<br>     <span class="hljs-function"><span class="hljs-title">depend</span>(<span class="hljs-params"></span>)</span> &#123;  <br>       <span class="hljs-keyword">if</span> (target &amp;&amp; !<span class="hljs-built_in">this</span>.subscribers.includes(target)) &#123;<br>         <span class="hljs-comment">// Only if there is a target &amp; it&#x27;s not already subscribed</span><br>         <span class="hljs-built_in">this</span>.subscribers.push(target)<br>       &#125; <br>     &#125;<br>     <span class="hljs-function"><span class="hljs-title">notify</span>(<span class="hljs-params"></span>)</span> &#123;<br>       <span class="hljs-built_in">this</span>.subscribers.forEach(<span class="hljs-function"><span class="hljs-params">sub</span> =&gt;</span> sub())<br>     &#125;<br>   &#125;<br>   <br>   <span class="hljs-comment">// Go through each of our data properties</span><br>   <span class="hljs-built_in">Object</span>.keys(data).forEach(<span class="hljs-function"><span class="hljs-params">key</span> =&gt;</span> &#123;<br>     <span class="hljs-keyword">let</span> internalValue = data[key]<br>     <br>     <span class="hljs-comment">// Each property gets a dependency instance</span><br>     <span class="hljs-keyword">const</span> dep = <span class="hljs-keyword">new</span> Dep()<br>     <br>     <span class="hljs-built_in">Object</span>.defineProperty(data, key, &#123;<br>       <span class="hljs-function"><span class="hljs-title">get</span>(<span class="hljs-params"></span>)</span> &#123;<br>         dep.depend() <span class="hljs-comment">// &lt;-- Remember the target we&#x27;re running</span><br>         <span class="hljs-keyword">return</span> internalValue<br>       &#125;,<br>       <span class="hljs-function"><span class="hljs-title">set</span>(<span class="hljs-params">newVal</span>)</span> &#123;<br>         internalValue = newVal<br>         dep.notify() <span class="hljs-comment">// &lt;-- Re-run stored functions</span><br>       &#125;<br>     &#125;)<br>   &#125;)<br>   <br>   <span class="hljs-comment">// My watcher no longer calls dep.depend,</span><br>   <span class="hljs-comment">// since that gets called from inside our get method.</span><br>   <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">watcher</span>(<span class="hljs-params">myFunc</span>) </span>&#123;<br>     target = myFunc<br>     target()<br>     target = <span class="hljs-literal">null</span><br>   &#125;<br>   <br>   watcher(<span class="hljs-function">() =&gt;</span> &#123;<br>     data.total = data.price * data.quantity<br>   &#125;)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>测试文章</title>
    <link href="/2021/08/03/%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0/"/>
    <url>/2021/08/03/%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2021/08/03/hello-world/"/>
    <url>/2021/08/03/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
